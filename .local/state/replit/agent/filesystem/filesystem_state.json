{"file_contents":{"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# DealerPro\n\n## Overview\n\nDealerPro is a comprehensive dealership management system designed to streamline vehicle inventory management, sales tracking, and business operations. The application provides an intuitive interface for managing car inventory, processing sales transactions, and generating business insights through a modern web-based platform.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript, using Vite as the build tool and development server\n- **Routing**: Client-side routing implemented with Wouter for lightweight navigation\n- **State Management**: TanStack Query (React Query) for server state management and data fetching\n- **UI Components**: Radix UI primitives with shadcn/ui component system for consistent, accessible design\n- **Styling**: Tailwind CSS with custom design tokens and CSS variables for theming\n- **Form Handling**: React Hook Form with Zod validation for type-safe form management\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework for RESTful API development\n- **Development Setup**: Full-stack development with Vite middleware integration for hot reloading\n- **API Structure**: RESTful endpoints organized by resource (inventory, sales) with comprehensive CRUD operations\n- **Error Handling**: Centralized error handling middleware with structured error responses\n- **Request Processing**: JSON and URL-encoded request parsing with request logging middleware\n\n### Data Storage Solutions\n- **Database**: PostgreSQL as the primary database with Drizzle ORM for type-safe database operations\n- **Schema Management**: Drizzle Kit for database migrations and schema management\n- **Connection**: Neon Database serverless PostgreSQL for cloud-based data storage\n- **Development Storage**: In-memory storage implementation for development and testing\n\n### Database Schema Design\n- **Inventory Table**: Comprehensive vehicle information including VIN, stock numbers, pricing, and vehicle specifications\n- **Sales Table**: Customer transaction records with support for trade-ins and delivery tracking\n- **Data Validation**: Zod schema validation ensuring data integrity at both API and database levels\n- **Constraints**: Unique constraints on VIN numbers and stock numbers to prevent duplicates\n\n### Authentication and Authorization\n- **Current State**: No authentication system implemented\n- **Session Management**: Connect-pg-simple ready for PostgreSQL-based session storage\n- **Future Considerations**: Session-based authentication infrastructure prepared\n\n## External Dependencies\n\n### Database Services\n- **Neon Database**: Serverless PostgreSQL hosting for production data storage\n- **Connection Management**: @neondatabase/serverless for optimized serverless connections\n\n### UI and Component Libraries\n- **Radix UI**: Comprehensive collection of accessible, unstyled UI primitives\n- **Lucide React**: Icon library providing consistent iconography throughout the application\n- **Tailwind CSS**: Utility-first CSS framework for rapid UI development\n\n### Development and Build Tools\n- **Vite**: Fast build tool and development server with hot module replacement\n- **TypeScript**: Static type checking for enhanced code quality and developer experience\n- **ESBuild**: High-performance JavaScript bundler for production builds\n\n### Data Management\n- **Drizzle ORM**: TypeScript-first ORM with excellent performance and developer experience\n- **TanStack Query**: Powerful data synchronization for React applications\n- **Zod**: TypeScript-first schema declaration and validation library\n\n### Form and Validation\n- **React Hook Form**: Performant form library with minimal re-renders\n- **Hookform Resolvers**: Integration layer for various validation libraries\n\n### Development Environment\n- **Replit Integration**: Specialized plugins and configurations for Replit development environment\n- **PostCSS**: CSS processing with Tailwind CSS and Autoprefixer plugins","size_bytes":4042},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import { createServer } from \"http\";\nimport { createApp } from \"./app\";\nimport { setupVite, serveStatic } from \"./vite\";\nimport { env, isDevelopment } from \"./config/env\";\n\n(async () => {\n  try {\n    // Create Express app\n    const app = await createApp();\n\n    // Create HTTP server\n    const server = createServer(app);\n\n    // Setup Vite in development or serve static files in production\n    if (isDevelopment) {\n      await setupVite(app as any, server);\n    } else {\n      serveStatic(app as any);\n    }\n\n    // Determine host (use 0.0.0.0 for Replit)\n    const isReplit = process.env.REPLIT_DEV_DOMAIN || process.env.REPL_ID;\n    const host = isReplit ? \"0.0.0.0\" : \"localhost\";\n\n    // Start server\n    server.listen(env.PORT, host, () => {\n      console.log(`Server running on ${host}:${env.PORT}`);\n    });\n\n    // Graceful shutdown\n    process.on(\"SIGTERM\", () => {\n      console.log(\"SIGTERM received, shutting down gracefully\");\n      server.close(() => {\n        console.log(\"Process terminated\");\n      });\n    });\n\n  } catch (error) {\n    console.error(\"Failed to start server:\", error);\n    process.exit(1);\n  }\n})();","size_bytes":1134},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage, storagePromise } from \"./storage\";\nimport { \n  insertInventorySchema, \n  insertSalesSchema,\n  insertSettingsSchema,\n  registerUserSchema,\n  loginUserSchema \n} from \"@shared/schema\";\nimport { ZodError } from \"zod\";\nimport { \n  authenticateToken,\n  authorizeRoles,\n  requireAdmin,\n  requireManagerOrAdmin,\n  requireAnyRole,\n  generateToken,\n  comparePassword\n} from \"./middleware/auth\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Wait for storage to be initialized\n  await storagePromise;\n\n  // Authentication routes\n  app.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      const validatedData = registerUserSchema.parse(req.body);\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(validatedData.email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"User with this email already exists\" });\n      }\n      \n      const user = await storage.createUser(validatedData);\n      \n      // Generate JWT token\n      const token = generateToken({\n        userId: user.id,\n        email: user.email,\n        userType: user.userType\n      });\n      \n      res.status(201).json({\n        message: \"User registered successfully\",\n        user: {\n          id: user.id,\n          username: user.username,\n          email: user.email,\n          userType: user.userType\n        },\n        token\n      });\n    } catch (error) {\n      if (error instanceof ZodError) {\n        return res.status(400).json({ \n          message: \"Validation error\", \n          errors: error.errors \n        });\n      }\n      console.error(\"Registration error:\", error);\n      res.status(500).json({ message: \"Failed to register user\" });\n    }\n  });\n\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const validatedData = loginUserSchema.parse(req.body);\n      \n      // Find user by email\n      const userDoc = await storage.getUserByEmail(validatedData.email);\n      if (!userDoc) {\n        return res.status(401).json({ message: \"Invalid email or password\" });\n      }\n      \n      // Verify password\n      const isValidPassword = await comparePassword(validatedData.password, userDoc.password);\n      if (!isValidPassword) {\n        return res.status(401).json({ message: \"Invalid email or password\" });\n      }\n      \n      // Generate JWT token\n      const token = generateToken({\n        userId: userDoc._id!.toString(),\n        email: userDoc.email,\n        userType: userDoc.userType\n      });\n      \n      res.json({\n        message: \"Login successful\",\n        user: {\n          id: userDoc._id!.toString(),\n          username: userDoc.username,\n          email: userDoc.email,\n          userType: userDoc.userType\n        },\n        token\n      });\n    } catch (error) {\n      if (error instanceof ZodError) {\n        return res.status(400).json({ \n          message: \"Validation error\", \n          errors: error.errors \n        });\n      }\n      console.error(\"Login error:\", error);\n      res.status(500).json({ message: \"Failed to login\" });\n    }\n  });\n\n  // Protected route to get current user\n  app.get(\"/api/auth/me\", authenticateToken, async (req, res) => {\n    try {\n      const user = await storage.getUserById(req.user!.userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json({ user });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get user data\" });\n    }\n  });\n\n  // Inventory routes - All roles can view inventory\n  app.get(\"/api/inventory\", authenticateToken, requireAnyRole, async (req, res) => {\n    try {\n      const inventory = await storage.getInventory();\n      res.json(inventory);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch inventory\" });\n    }\n  });\n\n  app.get(\"/api/inventory/vin/:vin\", authenticateToken, requireAnyRole, async (req, res) => {\n    try {\n      const item = await storage.getInventoryByVin(req.params.vin);\n      if (!item) {\n        return res.status(404).json({ message: \"Vehicle not found\" });\n      }\n      res.json(item);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to search by VIN\" });\n    }\n  });\n\n  app.get(\"/api/inventory/:id\", authenticateToken, requireAnyRole, async (req, res) => {\n    try {\n      const item = await storage.getInventoryItem(req.params.id);\n      if (!item) {\n        return res.status(404).json({ message: \"Inventory item not found\" });\n      }\n      res.json(item);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch inventory item\" });\n    }\n  });\n\n  app.post(\"/api/inventory\", authenticateToken, requireManagerOrAdmin, async (req, res) => {\n    try {\n      const validatedData = insertInventorySchema.parse(req.body);\n      \n      // Check for duplicate VIN or Stock Number\n      const existingVin = await storage.getInventoryByVin(validatedData.vin);\n      if (existingVin) {\n        return res.status(400).json({ message: \"A vehicle with this VIN already exists\" });\n      }\n      \n      const existingStock = await storage.getInventoryByStockNumber(validatedData.stockNumber);\n      if (existingStock) {\n        return res.status(400).json({ message: \"A vehicle with this stock number already exists\" });\n      }\n\n      const item = await storage.createInventoryItem(validatedData);\n      res.status(201).json(item);\n    } catch (error) {\n      if (error instanceof ZodError) {\n        return res.status(400).json({ \n          message: \"Validation error\", \n          errors: error.errors \n        });\n      }\n      res.status(500).json({ message: \"Failed to create inventory item\" });\n    }\n  });\n\n  app.put(\"/api/inventory/:id\", authenticateToken, requireManagerOrAdmin, async (req, res) => {\n    try {\n      const validatedData = insertInventorySchema.partial().parse(req.body);\n      const item = await storage.updateInventoryItem(req.params.id, validatedData);\n      res.json(item);\n    } catch (error) {\n      if (error instanceof ZodError) {\n        return res.status(400).json({ \n          message: \"Validation error\", \n          errors: error.errors \n        });\n      }\n      if (error instanceof Error && error.message === \"Inventory item not found\") {\n        return res.status(404).json({ message: \"Inventory item not found\" });\n      }\n      res.status(500).json({ message: \"Failed to update inventory item\" });\n    }\n  });\n\n  app.delete(\"/api/inventory/:id\", authenticateToken, requireAdmin, async (req, res) => {\n    try {\n      const deleted = await storage.deleteInventoryItem(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Inventory item not found\" });\n      }\n      res.json({ message: \"Inventory item deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete inventory item\" });\n    }\n  });\n\n  app.get(\"/api/inventory/search/:query\", authenticateToken, requireAnyRole, async (req, res) => {\n    try {\n      const results = await storage.searchInventory(req.params.query);\n      res.json(results);\n    } catch (error) {\n      res.status(500).json({ message: \"Search failed\" });\n    }\n  });\n\n  // Sales routes - All roles can view sales data\n  app.get(\"/api/sales\", authenticateToken, requireAnyRole, async (req, res) => {\n    try {\n      const sales = await storage.getSales();\n      res.json(sales);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch sales\" });\n    }\n  });\n\n  app.get(\"/api/sales/:id\", authenticateToken, requireAnyRole, async (req, res) => {\n    try {\n      const item = await storage.getSalesItem(req.params.id);\n      if (!item) {\n        return res.status(404).json({ message: \"Sales record not found\" });\n      }\n      res.json(item);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch sales record\" });\n    }\n  });\n\n  app.post(\"/api/sales\", authenticateToken, requireManagerOrAdmin, async (req, res) => {\n    try {\n      const validatedData = insertSalesSchema.parse(req.body);\n      \n      // Verify the stock number exists in inventory\n      const inventoryItem = await storage.getInventoryByStockNumber(validatedData.stockNumber);\n      if (!inventoryItem) {\n        return res.status(400).json({ message: \"Stock number not found in inventory\" });\n      }\n\n      const item = await storage.createSalesItem(validatedData);\n      res.status(201).json(item);\n    } catch (error) {\n      if (error instanceof ZodError) {\n        return res.status(400).json({ \n          message: \"Validation error\", \n          errors: error.errors \n        });\n      }\n      res.status(500).json({ message: \"Failed to create sales record\" });\n    }\n  });\n\n  app.put(\"/api/sales/:id\", authenticateToken, requireManagerOrAdmin, async (req, res) => {\n    try {\n      const validatedData = insertSalesSchema.partial().parse(req.body);\n      const item = await storage.updateSalesItem(req.params.id, validatedData);\n      res.json(item);\n    } catch (error) {\n      if (error instanceof ZodError) {\n        return res.status(400).json({ \n          message: \"Validation error\", \n          errors: error.errors \n        });\n      }\n      if (error instanceof Error && error.message === \"Sales item not found\") {\n        return res.status(404).json({ message: \"Sales record not found\" });\n      }\n      res.status(500).json({ message: \"Failed to update sales record\" });\n    }\n  });\n\n  app.delete(\"/api/sales/:id\", authenticateToken, requireAdmin, async (req, res) => {\n    try {\n      const deleted = await storage.deleteSalesItem(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Sales record not found\" });\n      }\n      res.json({ message: \"Sales record deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete sales record\" });\n    }\n  });\n\n  app.get(\"/api/sales/search/:query\", authenticateToken, requireAnyRole, async (req, res) => {\n    try {\n      const results = await storage.searchSales(req.params.query);\n      res.json(results);\n    } catch (error) {\n      res.status(500).json({ message: \"Search failed\" });\n    }\n  });\n\n  // Dashboard stats - All roles can view stats\n  app.get(\"/api/stats\", authenticateToken, requireAnyRole, async (req, res) => {\n    try {\n      const inventory = await storage.getInventory();\n      const sales = await storage.getSales();\n      \n      const currentMonth = new Date().getMonth();\n      const currentYear = new Date().getFullYear();\n      \n      const salesThisMonth = sales.filter(sale => {\n        const saleDate = sale.createdAt ? new Date(sale.createdAt) : new Date();\n        return saleDate.getMonth() === currentMonth && saleDate.getFullYear() === currentYear;\n      });\n\n      const totalRevenue = salesThisMonth.reduce((sum, sale) => sum + Number(sale.salesPrice), 0);\n      \n      const avgAge = inventory.length > 0 \n        ? inventory.reduce((sum, item) => sum + (item.age || 0), 0) / inventory.length \n        : 0;\n\n      res.json({\n        totalInventory: inventory.length,\n        salesThisMonth: salesThisMonth.length,\n        revenue: totalRevenue,\n        avgDaysInLot: Math.round(avgAge),\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch stats\" });\n    }\n  });\n\n  // Settings routes - Admin only can update settings, all roles can view\n  app.get(\"/api/settings\", authenticateToken, requireAnyRole, async (req, res) => {\n    try {\n      const settings = await storage.getSettings();\n      if (!settings) {\n        // Return empty settings structure if no settings exist\n        res.json({\n          make: [],\n          sources: [],\n          years: [],\n          status: [],\n          model: [],\n          colors: []\n        });\n        return;\n      }\n      res.json(settings);\n    } catch (error) {\n      console.error(\"Failed to get settings:\", error);\n      res.status(500).json({ message: \"Failed to retrieve settings\" });\n    }\n  });\n\n  app.put(\"/api/settings\", authenticateToken, requireAdmin, async (req, res) => {\n    try {\n      const validatedData = insertSettingsSchema.parse(req.body);\n      const settings = await storage.updateSettings(validatedData);\n      res.json(settings);\n    } catch (error) {\n      if (error instanceof ZodError) {\n        return res.status(400).json({ \n          message: \"Validation error\", \n          errors: error.errors \n        });\n      }\n      console.error(\"Failed to update settings:\", error);\n      res.status(500).json({ message: \"Failed to update settings\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":12708},"server/storage.ts":{"content":"import { ObjectId, MongoClient, Db, Collection } from \"mongodb\";\nimport { \n  type Inventory, \n  type InsertInventory, \n  type Sales, \n  type InsertSales,\n  type InventoryDocument,\n  type SalesDocument,\n  type User,\n  type RegisterUser,\n  type UserDocument,\n  type Settings,\n  type InsertSettings,\n  type SettingsDocument\n} from \"@shared/schema\";\n\nexport interface IStorage {\n  // User methods\n  createUser(user: RegisterUser): Promise<User>;\n  getUserByEmail(email: string): Promise<UserDocument | undefined>;\n  getUserById(id: string): Promise<User | undefined>;\n  \n  // Inventory methods\n  getInventory(): Promise<Inventory[]>;\n  getInventoryItem(id: string): Promise<Inventory | undefined>;\n  getInventoryByVin(vin: string): Promise<Inventory | undefined>;\n  getInventoryByStockNumber(stockNumber: string): Promise<Inventory | undefined>;\n  createInventoryItem(item: InsertInventory): Promise<Inventory>;\n  updateInventoryItem(id: string, item: Partial<InsertInventory>): Promise<Inventory>;\n  deleteInventoryItem(id: string): Promise<boolean>;\n\n  // Sales methods\n  getSales(): Promise<Sales[]>;\n  getSalesItem(id: string): Promise<Sales | undefined>;\n  createSalesItem(item: InsertSales): Promise<Sales>;\n  updateSalesItem(id: string, item: Partial<InsertSales>): Promise<Sales>;\n  deleteSalesItem(id: string): Promise<boolean>;\n\n  // Settings methods\n  getSettings(): Promise<Settings | undefined>;\n  updateSettings(settings: InsertSettings): Promise<Settings>;\n\n  // Search methods\n  searchInventory(query: string): Promise<Inventory[]>;\n  searchSales(query: string): Promise<Sales[]>;\n}\n\nclass MongoDBCompatibleStorage implements IStorage {\n  private inventory: Map<string, InventoryDocument>;\n  private sales: Map<string, SalesDocument>;\n  private users: Map<string, UserDocument>;\n  private settings: SettingsDocument | null;\n\n  constructor() {\n    this.inventory = new Map();\n    this.sales = new Map();\n    this.users = new Map();\n    this.settings = null;\n    this.initializeDummyData();\n    this.initializeDefaultUsers();\n    this.initializeDefaultSettings();\n  }\n\n  private initializeDummyData() {\n    // Add dummy inventory data\n    const dummyInventory: InventoryDocument[] = [\n      {\n        _id: new ObjectId(),\n        stockNumber: \"A2024001\",\n        vin: \"1HGBH41JXMN109186\",\n        year: 2023,\n        make: \"Honda\",\n        model: \"Accord\",\n        series: \"LX\",\n        color: \"Silver Metallic\",\n        certified: true,\n        body: \"Sedan\",\n        price: \"28450\",\n        bookValue: \"26500\",\n        cost: \"24000\",\n        markup: \"4450\",\n        odometer: 15420,\n        age: 45,\n        createdAt: new Date(Date.now() - 45 * 24 * 60 * 60 * 1000)\n      },\n      {\n        _id: new ObjectId(),\n        stockNumber: \"B2024002\",\n        vin: \"3GNKBKRS5NS123456\",\n        year: 2022,\n        make: \"Chevrolet\",\n        model: \"Equinox\",\n        series: \"LS\",\n        color: \"Pearl White\",\n        certified: false,\n        body: \"SUV\",\n        price: \"32995\",\n        bookValue: \"30200\",\n        cost: \"28500\",\n        markup: \"4495\",\n        odometer: 28750,\n        age: 32,\n        createdAt: new Date(Date.now() - 32 * 24 * 60 * 60 * 1000)\n      },\n      {\n        _id: new ObjectId(),\n        stockNumber: \"C2024003\",\n        vin: \"1FA6P8TH5N5123789\",\n        year: 2024,\n        make: \"Ford\",\n        model: \"Mustang\",\n        series: \"GT\",\n        color: \"Racing Red\",\n        certified: true,\n        body: \"Coupe\",\n        price: \"45750\",\n        bookValue: \"43200\",\n        cost: \"39800\",\n        markup: \"5950\",\n        odometer: 2850,\n        age: 18,\n        createdAt: new Date(Date.now() - 18 * 24 * 60 * 60 * 1000)\n      },\n      {\n        _id: new ObjectId(),\n        stockNumber: \"D2024004\",\n        vin: \"JM1CX1GL5N0456123\",\n        year: 2023,\n        make: \"Mazda\",\n        model: \"CX-5\",\n        series: \"Touring\",\n        color: \"Deep Crystal Blue\",\n        certified: true,\n        body: \"SUV\",\n        price: \"34200\",\n        bookValue: \"32100\",\n        cost: \"29500\",\n        markup: \"4700\",\n        odometer: 12340,\n        age: 28,\n        createdAt: new Date(Date.now() - 28 * 24 * 60 * 60 * 1000)\n      },\n      {\n        _id: new ObjectId(),\n        stockNumber: \"E2024005\",\n        vin: \"5YFBURHE5NP789456\",\n        year: 2022,\n        make: \"Toyota\",\n        model: \"Camry\",\n        series: \"XLE\",\n        color: \"Midnight Black\",\n        certified: false,\n        body: \"Sedan\",\n        price: \"29850\",\n        bookValue: \"27900\",\n        cost: \"25200\",\n        markup: \"4650\",\n        odometer: 22100,\n        age: 52,\n        createdAt: new Date(Date.now() - 52 * 24 * 60 * 60 * 1000)\n      }\n    ];\n\n    // Add dummy sales data\n    const dummySales: SalesDocument[] = [\n      {\n        _id: new ObjectId(),\n        dealNumber: \"D2024-001\",\n        customerNumber: \"C001\",\n        firstName: \"John\",\n        lastName: \"Smith\",\n        zip: \"12345\",\n        exteriorColor: \"Silver Metallic\",\n        newUsed: \"Used\",\n        stockNumber: \"A2024001\",\n        deliveryDate: new Date(Date.now() - 15 * 24 * 60 * 60 * 1000),\n        deliveryMileage: 15420,\n        trade1Vin: \"2HGFC2F59MH987654\",\n        trade1Year: 2021,\n        trade1Make: \"Honda\",\n        trade1Model: \"Civic\",\n        trade1Odometer: 45000,\n        trade1ACV: \"18500\",\n        trade2Vin: null,\n        trade2Year: null,\n        trade2Make: null,\n        trade2Model: null,\n        trade2Odometer: null,\n        trade2ACV: null,\n        closingManagerNumber: \"M001\",\n        closingManagerName: \"Sarah Johnson\",\n        financeManagerNumber: \"F001\",\n        financeManagerName: \"Mike Davis\",\n        salesmanNumber: \"S001\",\n        salesmanName: \"Robert Wilson\",\n        msrp: \"29500\",\n        listPrice: \"28450\",\n        salesPrice: \"27200\",\n        createdAt: new Date(Date.now() - 15 * 24 * 60 * 60 * 1000)\n      },\n      {\n        _id: new ObjectId(),\n        dealNumber: \"D2024-002\",\n        customerNumber: \"C002\",\n        firstName: \"Emily\",\n        lastName: \"Johnson\",\n        zip: \"54321\",\n        exteriorColor: \"Pearl White\",\n        newUsed: \"Used\",\n        stockNumber: \"B2024002\",\n        deliveryDate: new Date(Date.now() - 8 * 24 * 60 * 60 * 1000),\n        deliveryMileage: 28750,\n        trade1Vin: null,\n        trade1Year: null,\n        trade1Make: null,\n        trade1Model: null,\n        trade1Odometer: null,\n        trade1ACV: null,\n        trade2Vin: null,\n        trade2Year: null,\n        trade2Make: null,\n        trade2Model: null,\n        trade2Odometer: null,\n        trade2ACV: null,\n        closingManagerNumber: \"M002\",\n        closingManagerName: \"Lisa Chen\",\n        financeManagerNumber: \"F002\",\n        financeManagerName: \"James Brown\",\n        salesmanNumber: \"S002\",\n        salesmanName: \"Amanda Garcia\",\n        msrp: \"34200\",\n        listPrice: \"32995\",\n        salesPrice: \"31800\",\n        createdAt: new Date(Date.now() - 8 * 24 * 60 * 60 * 1000)\n      },\n      {\n        _id: new ObjectId(),\n        dealNumber: \"D2024-003\",\n        customerNumber: \"C003\",\n        firstName: \"Michael\",\n        lastName: \"Brown\",\n        zip: \"67890\",\n        exteriorColor: \"Racing Red\",\n        newUsed: \"New\",\n        stockNumber: \"C2024003\",\n        deliveryDate: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000),\n        deliveryMileage: 2850,\n        trade1Vin: \"1G6KD57Y85U456789\",\n        trade1Year: 2019,\n        trade1Make: \"Cadillac\",\n        trade1Model: \"CTS\",\n        trade1Odometer: 62000,\n        trade1ACV: \"22500\",\n        trade2Vin: null,\n        trade2Year: null,\n        trade2Make: null,\n        trade2Model: null,\n        trade2Odometer: null,\n        trade2ACV: null,\n        closingManagerNumber: \"M001\",\n        closingManagerName: \"Sarah Johnson\",\n        financeManagerNumber: \"F001\",\n        financeManagerName: \"Mike Davis\",\n        salesmanNumber: \"S003\",\n        salesmanName: \"David Martinez\",\n        msrp: \"47500\",\n        listPrice: \"45750\",\n        salesPrice: \"44200\",\n        createdAt: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000)\n      }\n    ];\n\n    // Add to maps using ObjectId as string key\n    dummyInventory.forEach(item => {\n      this.inventory.set(item._id!.toString(), item);\n    });\n\n    dummySales.forEach(item => {\n      this.sales.set(item._id!.toString(), item);\n    });\n  }\n\n  private async initializeDefaultUsers() {\n    // Create default admin user (password will be hashed in production)\n    const { hashPassword } = await import(\"./middleware/auth\");\n    \n    const defaultUsers: UserDocument[] = [\n      {\n        _id: new ObjectId(),\n        username: \"admin\",\n        email: \"admin@dealerpro.com\",\n        password: await hashPassword(\"admin123\"),\n        userType: \"admin\",\n        createdAt: new Date()\n      },\n      {\n        _id: new ObjectId(),\n        username: \"manager1\",\n        email: \"manager@dealerpro.com\", \n        password: await hashPassword(\"manager123\"),\n        userType: \"manager\",\n        createdAt: new Date()\n      },\n      {\n        _id: new ObjectId(),\n        username: \"employee1\",\n        email: \"employee@dealerpro.com\",\n        password: await hashPassword(\"employee123\"),\n        userType: \"employee\",\n        createdAt: new Date()\n      }\n    ];\n\n    defaultUsers.forEach(user => {\n      this.users.set(user._id!.toString(), user);\n    });\n  }\n\n  private documentToInventory(doc: InventoryDocument): Inventory {\n    return {\n      id: doc._id!.toString(),\n      stockNumber: doc.stockNumber,\n      vin: doc.vin,\n      year: doc.year,\n      make: doc.make,\n      model: doc.model,\n      series: doc.series,\n      color: doc.color,\n      certified: doc.certified,\n      body: doc.body,\n      price: doc.price,\n      bookValue: doc.bookValue,\n      cost: doc.cost,\n      markup: doc.markup,\n      odometer: doc.odometer,\n      age: doc.age,\n      createdAt: doc.createdAt\n    };\n  }\n\n  private documentToSales(doc: SalesDocument): Sales {\n    return {\n      id: doc._id!.toString(),\n      dealNumber: doc.dealNumber,\n      customerNumber: doc.customerNumber,\n      firstName: doc.firstName,\n      lastName: doc.lastName,\n      zip: doc.zip,\n      exteriorColor: doc.exteriorColor,\n      newUsed: doc.newUsed,\n      stockNumber: doc.stockNumber,\n      deliveryDate: doc.deliveryDate,\n      deliveryMileage: doc.deliveryMileage,\n      trade1Vin: doc.trade1Vin,\n      trade1Year: doc.trade1Year,\n      trade1Make: doc.trade1Make,\n      trade1Model: doc.trade1Model,\n      trade1Odometer: doc.trade1Odometer,\n      trade1ACV: doc.trade1ACV,\n      trade2Vin: doc.trade2Vin,\n      trade2Year: doc.trade2Year,\n      trade2Make: doc.trade2Make,\n      trade2Model: doc.trade2Model,\n      trade2Odometer: doc.trade2Odometer,\n      trade2ACV: doc.trade2ACV,\n      closingManagerNumber: doc.closingManagerNumber,\n      closingManagerName: doc.closingManagerName,\n      financeManagerNumber: doc.financeManagerNumber,\n      financeManagerName: doc.financeManagerName,\n      salesmanNumber: doc.salesmanNumber,\n      salesmanName: doc.salesmanName,\n      msrp: doc.msrp,\n      listPrice: doc.listPrice,\n      salesPrice: doc.salesPrice,\n      createdAt: doc.createdAt\n    };\n  }\n\n  private documentToUser(doc: UserDocument): User {\n    return {\n      id: doc._id!.toString(),\n      username: doc.username,\n      email: doc.email,\n      userType: doc.userType,\n      createdAt: doc.createdAt\n    };\n  }\n\n  // User methods\n  async createUser(userData: RegisterUser): Promise<User> {\n    const { hashPassword } = await import(\"./middleware/auth\");\n    \n    const id = new ObjectId();\n    const document: UserDocument = {\n      _id: id,\n      username: userData.username,\n      email: userData.email,\n      password: await hashPassword(userData.password),\n      userType: userData.userType,\n      createdAt: new Date()\n    };\n\n    this.users.set(id.toString(), document);\n    return this.documentToUser(document);\n  }\n\n  async getUserByEmail(email: string): Promise<UserDocument | undefined> {\n    const users = Array.from(this.users.values());\n    return users.find(user => user.email === email);\n  }\n\n  async getUserById(id: string): Promise<User | undefined> {\n    const doc = this.users.get(id);\n    return doc ? this.documentToUser(doc) : undefined;\n  }\n\n  // Inventory methods\n  async getInventory(): Promise<Inventory[]> {\n    const docs = Array.from(this.inventory.values());\n    return docs.map(doc => this.documentToInventory(doc));\n  }\n\n  async getInventoryItem(id: string): Promise<Inventory | undefined> {\n    const doc = this.inventory.get(id);\n    return doc ? this.documentToInventory(doc) : undefined;\n  }\n\n  async getInventoryByVin(vin: string): Promise<Inventory | undefined> {\n    const docs = Array.from(this.inventory.values());\n    const doc = docs.find(item => item.vin === vin);\n    return doc ? this.documentToInventory(doc) : undefined;\n  }\n\n  async getInventoryByStockNumber(stockNumber: string): Promise<Inventory | undefined> {\n    const docs = Array.from(this.inventory.values());\n    const doc = docs.find(item => item.stockNumber === stockNumber);\n    return doc ? this.documentToInventory(doc) : undefined;\n  }\n\n  async createInventoryItem(insertItem: InsertInventory): Promise<Inventory> {\n    const id = new ObjectId();\n    const document: InventoryDocument = {\n      _id: id,\n      ...insertItem,\n      createdAt: new Date(),\n      markup: insertItem.price && insertItem.cost \n        ? String(Number(insertItem.price) - Number(insertItem.cost))\n        : insertItem.markup || null\n    };\n\n    this.inventory.set(id.toString(), document);\n    return this.documentToInventory(document);\n  }\n\n  async updateInventoryItem(id: string, updateData: Partial<InsertInventory>): Promise<Inventory> {\n    const existing = this.inventory.get(id);\n    if (!existing) {\n      throw new Error(\"Inventory item not found\");\n    }\n\n    const updated: InventoryDocument = {\n      ...existing,\n      ...updateData,\n      markup: updateData.price && updateData.cost \n        ? String(Number(updateData.price) - Number(updateData.cost))\n        : updateData.markup || existing.markup\n    };\n    \n    this.inventory.set(id, updated);\n    return this.documentToInventory(updated);\n  }\n\n  async deleteInventoryItem(id: string): Promise<boolean> {\n    return this.inventory.delete(id);\n  }\n\n  // Sales methods\n  async getSales(): Promise<Sales[]> {\n    const docs = Array.from(this.sales.values());\n    return docs.map(doc => this.documentToSales(doc));\n  }\n\n  async getSalesItem(id: string): Promise<Sales | undefined> {\n    const doc = this.sales.get(id);\n    return doc ? this.documentToSales(doc) : undefined;\n  }\n\n  async createSalesItem(insertItem: InsertSales): Promise<Sales> {\n    const id = new ObjectId();\n    const document: SalesDocument = {\n      _id: id,\n      ...insertItem,\n      createdAt: new Date(),\n    };\n\n    this.sales.set(id.toString(), document);\n    return this.documentToSales(document);\n  }\n\n  async updateSalesItem(id: string, updateData: Partial<InsertSales>): Promise<Sales> {\n    const existing = this.sales.get(id);\n    if (!existing) {\n      throw new Error(\"Sales item not found\");\n    }\n\n    const updated: SalesDocument = { ...existing, ...updateData };\n    this.sales.set(id, updated);\n    return this.documentToSales(updated);\n  }\n\n  async deleteSalesItem(id: string): Promise<boolean> {\n    return this.sales.delete(id);\n  }\n\n  // Search methods\n  async searchInventory(query: string): Promise<Inventory[]> {\n    const docs = Array.from(this.inventory.values());\n    const lowerQuery = query.toLowerCase();\n    \n    const filtered = docs.filter(item => \n      item.vin.toLowerCase().includes(lowerQuery) ||\n      item.make.toLowerCase().includes(lowerQuery) ||\n      item.model.toLowerCase().includes(lowerQuery) ||\n      item.stockNumber.toLowerCase().includes(lowerQuery) ||\n      item.color.toLowerCase().includes(lowerQuery)\n    );\n    \n    return filtered.map(doc => this.documentToInventory(doc));\n  }\n\n  async searchSales(query: string): Promise<Sales[]> {\n    const docs = Array.from(this.sales.values());\n    const lowerQuery = query.toLowerCase();\n    \n    const filtered = docs.filter(item => \n      item.dealNumber.toLowerCase().includes(lowerQuery) ||\n      item.firstName.toLowerCase().includes(lowerQuery) ||\n      item.lastName.toLowerCase().includes(lowerQuery) ||\n      (item.customerNumber && item.customerNumber.toLowerCase().includes(lowerQuery))\n    );\n    \n    return filtered.map(doc => this.documentToSales(doc));\n  }\n\n  // Settings methods\n  async getSettings(): Promise<Settings | undefined> {\n    if (!this.settings) {\n      return undefined;\n    }\n    return this.documentToSettings(this.settings);\n  }\n\n  async updateSettings(settings: InsertSettings): Promise<Settings> {\n    const updatedSettings: SettingsDocument = {\n      _id: this.settings?._id || new ObjectId(),\n      ...settings,\n      createdAt: this.settings?.createdAt || new Date(),\n      updatedAt: new Date(),\n    };\n    \n    this.settings = updatedSettings;\n    return this.documentToSettings(updatedSettings);\n  }\n\n  private initializeDefaultSettings() {\n    const defaultSettings: SettingsDocument = {\n      _id: new ObjectId(),\n      make: [\"Ford\", \"Toyota\", \"Honda\", \"Chevrolet\", \"Nissan\", \"BMW\", \"Mercedes-Benz\", \"Audi\", \"Hyundai\", \"Kia\", \"Volkswagen\", \"Subaru\", \"Mazda\", \"Lexus\", \"Acura\", \"Infiniti\", \"Cadillac\", \"Lincoln\", \"Buick\", \"GMC\", \"Ram\", \"Jeep\", \"Dodge\", \"Chrysler\"],\n      sources: [\"Kelley Blue Book\", \"Direct Purchase\", \"Trade-In\", \"Lease Buyout\", \"Auction\", \"Fleet Sale\", \"Wholesale\", \"Consignment\"],\n      years: [2020, 2021, 2022, 2023, 2024, 2025],\n      status: [\"Available\", \"In Stock\", \"Sold\", \"Reserved\", \"In Transit\", \"Received\", \"Pending Inspection\", \"Dealer Trade\", \"Service Required\", \"Demo Vehicle\", \"Wholesale\", \"Auction\", \"On Hold\", \"Recall\"],\n      model: [\n        {\n          name: \"Bronco\",\n          Series: [\"Base\", \"Big Bend\", \"Black Diamond\", \"Outer Banks\", \"Badlands\", \"Wildtrak\", \"Raptor\"]\n        },\n        {\n          name: \"Bronco Sport\",\n          Series: [\"Base\", \"Big Bend\", \"Outer Banks\", \"Badlands\"]\n        },\n        {\n          name: \"F-150\",\n          Series: [\"Regular Cab\", \"SuperCab\", \"SuperCrew\", \"XL\", \"XLT\", \"Lariat\", \"King Ranch\", \"Platinum\", \"Limited\", \"Raptor\", \"Lightning\"]\n        },\n        {\n          name: \"Mustang\",\n          Series: [\"EcoBoost\", \"EcoBoost Premium\", \"GT\", \"GT Premium\", \"Mach 1\", \"Shelby GT350\", \"Shelby GT500\"]\n        },\n        {\n          name: \"Explorer\",\n          Series: [\"Base\", \"XLT\", \"Limited\", \"Platinum\", \"ST\", \"King Ranch\"]\n        },\n        {\n          name: \"Escape\",\n          Series: [\"S\", \"SE\", \"SEL\", \"Titanium\"]\n        },\n        {\n          name: \"Edge\",\n          Series: [\"SE\", \"SEL\", \"Titanium\", \"ST\"]\n        }\n      ],\n      colors: [\n        {code: \"PUM\", name: \"Agate Black\"},\n        {code: \"PDR\", name: \"Avalanche\"},\n        {code: \"PYZ\", name: \"Oxford White\"},\n        {code: \"PAZ\", name: \"Star White\"},\n        {code: \"PA3\", name: \"Space White\"},\n        {code: \"PG1\", name: \"Shadow Black\"},\n        {code: \"PHY\", name: \"Dark Matter\"},\n        {code: \"PM7\", name: \"Carbonized Gray\"},\n        {code: \"PUJ\", name: \"Sterling Gray\"},\n        {code: \"PJS\", name: \"Iconic Silver\"},\n        {code: \"PTN\", name: \"Silver Gray\"},\n        {code: \"PNE\", name: \"Fighter Jet Gray\"},\n        {code: \"PAE\", name: \"Grabber Blue\"},\n        {code: \"PK1\", name: \"Vapor Blue\"},\n        {code: \"PAB\", name: \"Blue Tinted Clearcoat\"},\n        {code: \"PE7\", name: \"Velocity Blue\"},\n        {code: \"PLK\", name: \"Dark Blue\"},\n        {code: \"PL8\", name: \"Cinnabar Red\"},\n        {code: \"PD4\", name: \"Rapid Red Metallic\"},\n        {code: \"PPQ\", name: \"Race Red\"},\n        {code: \"PCN\", name: \"Code Orange\"},\n        {code: \"PSB\", name: \"Cyber Orange\"}\n      ],\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n\n    this.settings = defaultSettings;\n  }\n\n  private documentToSettings(doc: SettingsDocument): Settings {\n    return {\n      id: doc._id!.toString(),\n      make: doc.make,\n      sources: doc.sources,\n      years: doc.years,\n      status: doc.status,\n      model: doc.model,\n      colors: doc.colors,\n      createdAt: doc.createdAt,\n      updatedAt: doc.updatedAt,\n    };\n  }\n}\n\nclass MongoDBStorage implements IStorage {\n  private client: MongoClient;\n  private db: Db;\n  private users: Collection<UserDocument>;\n  private inventory: Collection<InventoryDocument>;\n  private sales: Collection<SalesDocument>;\n  private settings: Collection<SettingsDocument>;\n\n  constructor(mongoUrl: string, databaseName: string = \"dealerpro\") {\n    this.client = new MongoClient(mongoUrl);\n    this.db = this.client.db(databaseName);\n    this.users = this.db.collection<UserDocument>(\"users\");\n    this.inventory = this.db.collection<InventoryDocument>(\"inventory\");\n    this.sales = this.db.collection<SalesDocument>(\"sales\");\n    this.settings = this.db.collection<SettingsDocument>(\"settings\");\n  }\n\n  async connect(): Promise<void> {\n    await this.client.connect();\n    console.log(\"Connected to MongoDB successfully\");\n    await this.initializeDefaultUsers();\n    await this.initializeDefaultSettings();\n  }\n\n  async disconnect(): Promise<void> {\n    await this.client.close();\n    console.log(\"Disconnected from MongoDB\");\n  }\n\n  private async initializeDefaultUsers() {\n    // Check if users already exist\n    const existingUsersCount = await this.users.countDocuments();\n    if (existingUsersCount > 0) {\n      console.log(\"Users already exist in MongoDB, skipping initialization\");\n      return;\n    }\n\n    // Create default users\n    const { hashPassword } = await import(\"./middleware/auth\");\n    \n    const defaultUsers: UserDocument[] = [\n      {\n        _id: new ObjectId(),\n        username: \"admin\",\n        email: \"admin@dealerpro.com\",\n        password: await hashPassword(\"admin123\"),\n        userType: \"admin\",\n        createdAt: new Date()\n      },\n      {\n        _id: new ObjectId(),\n        username: \"manager1\",\n        email: \"manager@dealerpro.com\", \n        password: await hashPassword(\"manager123\"),\n        userType: \"manager\",\n        createdAt: new Date()\n      },\n      {\n        _id: new ObjectId(),\n        username: \"employee1\",\n        email: \"employee@dealerpro.com\",\n        password: await hashPassword(\"employee123\"),\n        userType: \"employee\",\n        createdAt: new Date()\n      }\n    ];\n\n    await this.users.insertMany(defaultUsers);\n    console.log(\"Default users created in MongoDB\");\n  }\n\n  private documentToInventory(doc: InventoryDocument): Inventory {\n    return {\n      id: doc._id!.toString(),\n      stockNumber: doc.stockNumber,\n      vin: doc.vin,\n      year: doc.year,\n      make: doc.make,\n      model: doc.model,\n      series: doc.series,\n      color: doc.color,\n      certified: doc.certified,\n      body: doc.body,\n      price: doc.price,\n      bookValue: doc.bookValue,\n      cost: doc.cost,\n      markup: doc.markup,\n      odometer: doc.odometer,\n      age: doc.age,\n      createdAt: doc.createdAt\n    };\n  }\n\n  private documentToSales(doc: SalesDocument): Sales {\n    return {\n      id: doc._id!.toString(),\n      dealNumber: doc.dealNumber,\n      customerNumber: doc.customerNumber,\n      firstName: doc.firstName,\n      lastName: doc.lastName,\n      zip: doc.zip,\n      exteriorColor: doc.exteriorColor,\n      newUsed: doc.newUsed,\n      stockNumber: doc.stockNumber,\n      deliveryDate: doc.deliveryDate,\n      deliveryMileage: doc.deliveryMileage,\n      trade1Vin: doc.trade1Vin,\n      trade1Year: doc.trade1Year,\n      trade1Make: doc.trade1Make,\n      trade1Model: doc.trade1Model,\n      trade1Odometer: doc.trade1Odometer,\n      trade1ACV: doc.trade1ACV,\n      trade2Vin: doc.trade2Vin,\n      trade2Year: doc.trade2Year,\n      trade2Make: doc.trade2Make,\n      trade2Model: doc.trade2Model,\n      trade2Odometer: doc.trade2Odometer,\n      trade2ACV: doc.trade2ACV,\n      closingManagerNumber: doc.closingManagerNumber,\n      closingManagerName: doc.closingManagerName,\n      financeManagerNumber: doc.financeManagerNumber,\n      financeManagerName: doc.financeManagerName,\n      salesmanNumber: doc.salesmanNumber,\n      salesmanName: doc.salesmanName,\n      msrp: doc.msrp,\n      listPrice: doc.listPrice,\n      salesPrice: doc.salesPrice,\n      createdAt: doc.createdAt\n    };\n  }\n\n  private documentToUser(doc: UserDocument): User {\n    return {\n      id: doc._id!.toString(),\n      username: doc.username,\n      email: doc.email,\n      userType: doc.userType,\n      createdAt: doc.createdAt\n    };\n  }\n\n  // User methods\n  async createUser(userData: RegisterUser): Promise<User> {\n    const { hashPassword } = await import(\"./middleware/auth\");\n    \n    const document: UserDocument = {\n      _id: new ObjectId(),\n      username: userData.username,\n      email: userData.email,\n      password: await hashPassword(userData.password),\n      userType: userData.userType,\n      createdAt: new Date()\n    };\n\n    const result = await this.users.insertOne(document);\n    document._id = result.insertedId;\n    return this.documentToUser(document);\n  }\n\n  async getUserByEmail(email: string): Promise<UserDocument | undefined> {\n    const user = await this.users.findOne({ email });\n    return user || undefined;\n  }\n\n  async getUserById(id: string): Promise<User | undefined> {\n    const doc = await this.users.findOne({ _id: new ObjectId(id) });\n    return doc ? this.documentToUser(doc) : undefined;\n  }\n\n  // Inventory methods\n  async getInventory(): Promise<Inventory[]> {\n    const docs = await this.inventory.find({}).toArray();\n    return docs.map(doc => this.documentToInventory(doc));\n  }\n\n  async getInventoryItem(id: string): Promise<Inventory | undefined> {\n    const doc = await this.inventory.findOne({ _id: new ObjectId(id) });\n    return doc ? this.documentToInventory(doc) : undefined;\n  }\n\n  async getInventoryByVin(vin: string): Promise<Inventory | undefined> {\n    const doc = await this.inventory.findOne({ vin });\n    return doc ? this.documentToInventory(doc) : undefined;\n  }\n\n  async getInventoryByStockNumber(stockNumber: string): Promise<Inventory | undefined> {\n    const doc = await this.inventory.findOne({ stockNumber });\n    return doc ? this.documentToInventory(doc) : undefined;\n  }\n\n  async createInventoryItem(insertItem: InsertInventory): Promise<Inventory> {\n    const document: InventoryDocument = {\n      _id: new ObjectId(),\n      ...insertItem,\n      createdAt: new Date(),\n      markup: insertItem.price && insertItem.cost \n        ? String(Number(insertItem.price) - Number(insertItem.cost))\n        : insertItem.markup || null\n    };\n\n    const result = await this.inventory.insertOne(document);\n    document._id = result.insertedId;\n    return this.documentToInventory(document);\n  }\n\n  async updateInventoryItem(id: string, updateData: Partial<InsertInventory>): Promise<Inventory> {\n    const updateDoc = {\n      ...updateData,\n      markup: updateData.price && updateData.cost \n        ? String(Number(updateData.price) - Number(updateData.cost))\n        : updateData.markup\n    };\n\n    const result = await this.inventory.findOneAndUpdate(\n      { _id: new ObjectId(id) },\n      { $set: updateDoc },\n      { returnDocument: \"after\" }\n    );\n    \n    if (!result) {\n      throw new Error(\"Inventory item not found\");\n    }\n    \n    return this.documentToInventory(result);\n  }\n\n  async deleteInventoryItem(id: string): Promise<boolean> {\n    const result = await this.inventory.deleteOne({ _id: new ObjectId(id) });\n    return result.deletedCount > 0;\n  }\n\n  // Sales methods\n  async getSales(): Promise<Sales[]> {\n    const docs = await this.sales.find({}).toArray();\n    return docs.map(doc => this.documentToSales(doc));\n  }\n\n  async getSalesItem(id: string): Promise<Sales | undefined> {\n    const doc = await this.sales.findOne({ _id: new ObjectId(id) });\n    return doc ? this.documentToSales(doc) : undefined;\n  }\n\n  async createSalesItem(insertItem: InsertSales): Promise<Sales> {\n    const document: SalesDocument = {\n      _id: new ObjectId(),\n      ...insertItem,\n      createdAt: new Date(),\n    };\n\n    const result = await this.sales.insertOne(document);\n    document._id = result.insertedId;\n    return this.documentToSales(document);\n  }\n\n  async updateSalesItem(id: string, updateData: Partial<InsertSales>): Promise<Sales> {\n    const result = await this.sales.findOneAndUpdate(\n      { _id: new ObjectId(id) },\n      { $set: updateData },\n      { returnDocument: \"after\" }\n    );\n    \n    if (!result) {\n      throw new Error(\"Sales item not found\");\n    }\n    \n    return this.documentToSales(result);\n  }\n\n  async deleteSalesItem(id: string): Promise<boolean> {\n    const result = await this.sales.deleteOne({ _id: new ObjectId(id) });\n    return result.deletedCount > 0;\n  }\n\n  // Search methods\n  async searchInventory(query: string): Promise<Inventory[]> {\n    const lowerQuery = query.toLowerCase();\n    const regex = new RegExp(lowerQuery, 'i');\n    \n    const docs = await this.inventory.find({\n      $or: [\n        { vin: regex },\n        { make: regex },\n        { model: regex },\n        { stockNumber: regex },\n        { color: regex }\n      ]\n    }).toArray();\n    \n    return docs.map(doc => this.documentToInventory(doc));\n  }\n\n  async searchSales(query: string): Promise<Sales[]> {\n    const lowerQuery = query.toLowerCase();\n    const regex = new RegExp(lowerQuery, 'i');\n    \n    const docs = await this.sales.find({\n      $or: [\n        { dealNumber: regex },\n        { firstName: regex },\n        { lastName: regex },\n        { customerNumber: regex }\n      ]\n    }).toArray();\n    \n    return docs.map(doc => this.documentToSales(doc));\n  }\n\n  // Settings methods\n  async getSettings(): Promise<Settings | undefined> {\n    const doc = await this.settings.findOne({});\n    return doc ? this.documentToSettings(doc) : undefined;\n  }\n\n  async updateSettings(settings: InsertSettings): Promise<Settings> {\n    const existingDoc = await this.settings.findOne({});\n    \n    if (existingDoc) {\n      const updatedDoc = {\n        ...existingDoc,\n        ...settings,\n        updatedAt: new Date(),\n      };\n      \n      await this.settings.replaceOne({ _id: existingDoc._id }, updatedDoc);\n      return this.documentToSettings(updatedDoc);\n    } else {\n      const newDoc: SettingsDocument = {\n        _id: new ObjectId(),\n        ...settings,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n      \n      await this.settings.insertOne(newDoc);\n      return this.documentToSettings(newDoc);\n    }\n  }\n\n  private async initializeDefaultSettings() {\n    // Check if settings already exist\n    const existingSettingsCount = await this.settings.countDocuments();\n    if (existingSettingsCount > 0) {\n      console.log(\"Settings already exist in MongoDB, skipping initialization\");\n      return;\n    }\n\n    const defaultSettings: SettingsDocument = {\n      _id: new ObjectId(),\n      make: [\"Ford\", \"Toyota\", \"Honda\", \"Chevrolet\", \"Nissan\", \"BMW\", \"Mercedes-Benz\", \"Audi\", \"Hyundai\", \"Kia\", \"Volkswagen\", \"Subaru\", \"Mazda\", \"Lexus\", \"Acura\", \"Infiniti\", \"Cadillac\", \"Lincoln\", \"Buick\", \"GMC\", \"Ram\", \"Jeep\", \"Dodge\", \"Chrysler\"],\n      sources: [\"Kelley Blue Book\", \"Direct Purchase\", \"Trade-In\", \"Lease Buyout\", \"Auction\", \"Fleet Sale\", \"Wholesale\", \"Consignment\"],\n      years: [2020, 2021, 2022, 2023, 2024, 2025],\n      status: [\"Available\", \"In Stock\", \"Sold\", \"Reserved\", \"In Transit\", \"Received\", \"Pending Inspection\", \"Dealer Trade\", \"Service Required\", \"Demo Vehicle\", \"Wholesale\", \"Auction\", \"On Hold\", \"Recall\"],\n      model: [\n        {\n          name: \"Bronco\",\n          Series: [\"Base\", \"Big Bend\", \"Black Diamond\", \"Outer Banks\", \"Badlands\", \"Wildtrak\", \"Raptor\"]\n        },\n        {\n          name: \"Bronco Sport\",\n          Series: [\"Base\", \"Big Bend\", \"Outer Banks\", \"Badlands\"]\n        },\n        {\n          name: \"F-150\",\n          Series: [\"Regular Cab\", \"SuperCab\", \"SuperCrew\", \"XL\", \"XLT\", \"Lariat\", \"King Ranch\", \"Platinum\", \"Limited\", \"Raptor\", \"Lightning\"]\n        },\n        {\n          name: \"Mustang\",\n          Series: [\"EcoBoost\", \"EcoBoost Premium\", \"GT\", \"GT Premium\", \"Mach 1\", \"Shelby GT350\", \"Shelby GT500\"]\n        },\n        {\n          name: \"Explorer\",\n          Series: [\"Base\", \"XLT\", \"Limited\", \"Platinum\", \"ST\", \"King Ranch\"]\n        },\n        {\n          name: \"Escape\",\n          Series: [\"S\", \"SE\", \"SEL\", \"Titanium\"]\n        },\n        {\n          name: \"Edge\",\n          Series: [\"SE\", \"SEL\", \"Titanium\", \"ST\"]\n        }\n      ],\n      colors: [\n        {code: \"PUM\", name: \"Agate Black\"},\n        {code: \"PDR\", name: \"Avalanche\"},\n        {code: \"PYZ\", name: \"Oxford White\"},\n        {code: \"PAZ\", name: \"Star White\"},\n        {code: \"PA3\", name: \"Space White\"},\n        {code: \"PG1\", name: \"Shadow Black\"},\n        {code: \"PHY\", name: \"Dark Matter\"},\n        {code: \"PM7\", name: \"Carbonized Gray\"},\n        {code: \"PUJ\", name: \"Sterling Gray\"},\n        {code: \"PJS\", name: \"Iconic Silver\"},\n        {code: \"PTN\", name: \"Silver Gray\"},\n        {code: \"PNE\", name: \"Fighter Jet Gray\"},\n        {code: \"PAE\", name: \"Grabber Blue\"},\n        {code: \"PK1\", name: \"Vapor Blue\"},\n        {code: \"PAB\", name: \"Blue Tinted Clearcoat\"},\n        {code: \"PE7\", name: \"Velocity Blue\"},\n        {code: \"PLK\", name: \"Dark Blue\"},\n        {code: \"PL8\", name: \"Cinnabar Red\"},\n        {code: \"PD4\", name: \"Rapid Red Metallic\"},\n        {code: \"PPQ\", name: \"Race Red\"},\n        {code: \"PCN\", name: \"Code Orange\"},\n        {code: \"PSB\", name: \"Cyber Orange\"}\n      ],\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n\n    await this.settings.insertOne(defaultSettings);\n    console.log(\"Default settings created in MongoDB\");\n  }\n\n  private documentToSettings(doc: SettingsDocument): Settings {\n    return {\n      id: doc._id!.toString(),\n      make: doc.make,\n      sources: doc.sources,\n      years: doc.years,\n      status: doc.status,\n      model: doc.model,\n      colors: doc.colors,\n      createdAt: doc.createdAt,\n      updatedAt: doc.updatedAt,\n    };\n  }\n}\n\n// Initialize storage based on environment\nasync function initializeStorage(): Promise<IStorage> {\n  const mongoUrl = process.env.MONGODB_URL || process.env.MONGO_URL;\n  \n  if (mongoUrl) {\n    console.log(\"Initializing MongoDB storage...\");\n    try {\n      const mongoStorage = new MongoDBStorage(mongoUrl);\n      await mongoStorage.connect();\n      return mongoStorage;\n    } catch (error) {\n      console.error(\"Failed to connect to MongoDB:\", error);\n      console.log(\"Falling back to in-memory storage\");\n    }\n  }\n  \n  console.log(\"Using in-memory storage\");\n  return new MongoDBCompatibleStorage();\n}\n\n// Export a promise that resolves to the initialized storage\nexport const storagePromise = initializeStorage();\nexport let storage: IStorage;\n\n// Initialize storage immediately\ninitializeStorage().then(s => {\n  storage = s;\n}).catch(error => {\n  console.error(\"Failed to initialize storage:\", error);\n  storage = new MongoDBCompatibleStorage();\n});","size_bytes":34941},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { z } from \"zod\";\nimport { ObjectId } from \"mongodb\";\n\n// User types for authentication\nexport type UserType = \"admin\" | \"manager\" | \"employee\";\n\n// MongoDB Document interfaces\nexport interface UserDocument {\n  _id?: ObjectId;\n  username: string;\n  email: string;\n  password: string; // hashed\n  userType: UserType;\n  createdAt: Date;\n}\nexport interface InventoryDocument {\n  _id?: ObjectId;\n  stockNumber: string;\n  vin: string;\n  year: number;\n  make: string;\n  model: string;\n  series?: string;\n  color: string;\n  certified: boolean;\n  body: string;\n  price: string;\n  bookValue?: string | null;\n  cost?: string | null;\n  markup?: string | null;\n  odometer: number;\n  age?: number | null;\n  createdAt: Date;\n}\n\nexport interface SalesDocument {\n  _id?: ObjectId;\n  dealNumber: string;\n  customerNumber?: string | null;\n  firstName: string;\n  lastName: string;\n  zip?: string | null;\n  exteriorColor?: string | null;\n  newUsed: string;\n  stockNumber: string;\n  deliveryDate?: Date | null;\n  deliveryMileage?: number | null;\n  trade1Vin?: string | null;\n  trade1Year?: number | null;\n  trade1Make?: string | null;\n  trade1Model?: string | null;\n  trade1Odometer?: number | null;\n  trade1ACV?: string | null;\n  trade2Vin?: string | null;\n  trade2Year?: number | null;\n  trade2Make?: string | null;\n  trade2Model?: string | null;\n  trade2Odometer?: number | null;\n  trade2ACV?: string | null;\n  closingManagerNumber?: string | null;\n  closingManagerName?: string | null;\n  financeManagerNumber?: string | null;\n  financeManagerName?: string | null;\n  salesmanNumber?: string | null;\n  salesmanName?: string | null;\n  msrp?: string | null;\n  listPrice?: string | null;\n  salesPrice: string;\n  createdAt: Date;\n}\n\n// Settings Document interfaces  \nexport interface SettingsDocument {\n  _id?: ObjectId;\n  make: string[];\n  sources: string[];\n  years: number[];\n  status: string[];\n  model: ModelSeriesType[];\n  colors: ColorOptionType[];\n  createdAt: Date;\n  updatedAt: Date;\n}\n\n// Zod validation schemas for client-side form validation\nexport const insertInventorySchema = z.object({\n  stockNumber: z.string().min(1, \"Stock number is required\"),\n  vin: z.string().length(17, \"VIN must be exactly 17 characters\"),\n  year: z.number().min(1900).max(2030),\n  make: z.string().min(1, \"Make is required\"),\n  model: z.string().min(1, \"Model is required\"),\n  series: z.string().optional(),\n  color: z.string().min(1, \"Color is required\"),\n  certified: z.boolean().default(false),\n  body: z.string().min(1, \"Body type is required\"),\n  price: z.string().refine((val) => !isNaN(Number(val)) && Number(val) > 0, \"Price must be a positive number\"),\n  bookValue: z.string().optional().nullable(),\n  cost: z.string().optional().nullable(),\n  markup: z.string().optional().nullable(),\n  odometer: z.number().min(0, \"Odometer cannot be negative\"),\n  age: z.number().optional().nullable(),\n});\n\nexport const insertSalesSchema = z.object({\n  dealNumber: z.string().min(1, \"Deal number is required\"),\n  customerNumber: z.string().optional(),\n  firstName: z.string().min(1, \"First name is required\"),\n  lastName: z.string().min(1, \"Last name is required\"),\n  zip: z.string().optional(),\n  exteriorColor: z.string().optional(),\n  newUsed: z.string().min(1, \"New/Used status is required\"),\n  stockNumber: z.string().min(1, \"Stock number is required\"),\n  deliveryDate: z.date().optional(),\n  deliveryMileage: z.number().optional(),\n  trade1Vin: z.string().length(17).optional().or(z.literal(\"\")),\n  trade1Year: z.number().optional(),\n  trade1Make: z.string().optional(),\n  trade1Model: z.string().optional(),\n  trade1Odometer: z.number().optional(),\n  trade1ACV: z.string().optional().nullable(),\n  trade2Vin: z.string().length(17).optional().or(z.literal(\"\")),\n  trade2Year: z.number().optional(),\n  trade2Make: z.string().optional(),\n  trade2Model: z.string().optional(),\n  trade2Odometer: z.number().optional(),\n  trade2ACV: z.string().optional().nullable(),\n  closingManagerNumber: z.string().optional(),\n  closingManagerName: z.string().optional(),\n  financeManagerNumber: z.string().optional(),\n  financeManagerName: z.string().optional(),\n  salesmanNumber: z.string().optional(),\n  salesmanName: z.string().optional(),\n  msrp: z.string().optional().nullable(),\n  listPrice: z.string().optional().nullable(),\n  salesPrice: z.string().refine((val) => !isNaN(Number(val)) && Number(val) > 0, \"Sales price must be positive\"),\n});\n\n// Settings validation schemas\nexport const modelSeriesSchema = z.object({\n  name: z.string().min(1, \"Model name is required\"),\n  Series: z.array(z.string().min(1, \"Series name cannot be empty\")),\n});\n\nexport const colorOptionSchema = z.object({\n  code: z.string().min(1, \"Color code is required\"),\n  name: z.string().min(1, \"Color name is required\"),\n});\n\nexport const insertSettingsSchema = z.object({\n  make: z.array(z.string().min(1, \"Make cannot be empty\")),\n  sources: z.array(z.string().min(1, \"Source cannot be empty\")),\n  years: z.array(z.number().min(1900).max(2100)),\n  status: z.array(z.string().min(1, \"Status cannot be empty\")),\n  model: z.array(modelSeriesSchema),\n  colors: z.array(colorOptionSchema),\n});\n\n// Client-facing types (without MongoDB ObjectId)\nexport interface Inventory {\n  id: string;\n  stockNumber: string;\n  vin: string;\n  year: number;\n  make: string;\n  model: string;\n  series?: string | null;\n  color: string;\n  certified: boolean;\n  body: string;\n  price: string;\n  bookValue?: string | null;\n  cost?: string | null;\n  markup?: string | null;\n  odometer: number;\n  age?: number | null;\n  createdAt: Date;\n}\n\nexport interface Sales {\n  id: string;\n  dealNumber: string;\n  customerNumber?: string | null;\n  firstName: string;\n  lastName: string;\n  zip?: string | null;\n  exteriorColor?: string | null;\n  newUsed: string;\n  stockNumber: string;\n  deliveryDate?: Date | null;\n  deliveryMileage?: number | null;\n  trade1Vin?: string | null;\n  trade1Year?: number | null;\n  trade1Make?: string | null;\n  trade1Model?: string | null;\n  trade1Odometer?: number | null;\n  trade1ACV?: string | null;\n  trade2Vin?: string | null;\n  trade2Year?: number | null;\n  trade2Make?: string | null;\n  trade2Model?: string | null;\n  trade2Odometer?: number | null;\n  trade2ACV?: string | null;\n  closingManagerNumber?: string | null;\n  closingManagerName?: string | null;\n  financeManagerNumber?: string | null;\n  financeManagerName?: string | null;\n  salesmanNumber?: string | null;\n  salesmanName?: string | null;\n  msrp?: string | null;\n  listPrice?: string | null;\n  salesPrice: string;\n  createdAt: Date;\n}\n\n// Client-facing Settings interface\nexport interface Settings {\n  id: string;\n  make: string[];\n  sources: string[];\n  years: number[];\n  status: string[];\n  model: ModelSeriesType[];\n  colors: ColorOptionType[];\n  createdAt: Date;\n  updatedAt: Date;\n}\n\n// User authentication schemas\nexport const registerUserSchema = z.object({\n  username: z.string().min(3, \"Username must be at least 3 characters\").max(50),\n  email: z.string().email(\"Invalid email format\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  userType: z.enum([\"admin\", \"manager\", \"employee\"]),\n});\n\nexport const loginUserSchema = z.object({\n  email: z.string().email(\"Invalid email format\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\n// Client-facing User type (without password)\nexport interface User {\n  id: string;\n  username: string;\n  email: string;\n  userType: UserType;\n  createdAt: Date;\n}\n\n// JWT payload type\nexport interface JWTPayload {\n  userId: string;\n  email: string;\n  userType: UserType;\n}\n\n// Type inference from Zod schemas\nexport type InsertInventory = z.infer<typeof insertInventorySchema>;\nexport type InsertSales = z.infer<typeof insertSalesSchema>;\nexport type InsertSettings = z.infer<typeof insertSettingsSchema>;\nexport type ModelSeriesType = z.infer<typeof modelSeriesSchema>;\nexport type ColorOptionType = z.infer<typeof colorOptionSchema>;\nexport type RegisterUser = z.infer<typeof registerUserSchema>;\nexport type LoginUser = z.infer<typeof loginUserSchema>;","size_bytes":8045},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/contexts/AuthContext\";\nimport NotFound from \"@/pages/not-found\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Inventory from \"@/pages/inventory\";\nimport Sales from \"@/pages/sales\";\nimport Reports from \"@/pages/reports\";\nimport Settings from \"@/pages/settings\";\nimport Login from \"@/pages/login\";\nimport Register from \"@/pages/register\";\nimport Sidebar from \"@/components/sidebar\";\nimport ProtectedRoute from \"@/components/ProtectedRoute\";\n\nfunction Router() {\n  return (\n    <Switch>\n      {/* Public routes */}\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/register\" component={Register} />\n\n      {/* Protected routes */}\n      <Route>\n        <ProtectedRoute>\n          <div className=\"flex h-screen bg-gray-50\">\n            <Sidebar />\n            <div className=\"flex-1 flex flex-col overflow-hidden\">\n              <Switch>\n                <Route path=\"/\" component={Dashboard} />\n                <Route path=\"/dashboard\" component={Dashboard} />\n                <Route path=\"/inventory\" component={Inventory} />\n                <Route path=\"/sales\" component={Sales} />\n                <Route path=\"/reports\" component={Reports} />\n                <Route path=\"/settings\" component={Settings} />\n                <Route component={NotFound} />\n              </Switch>\n            </div>\n          </div>\n        </ProtectedRoute>\n      </Route>\n    </Switch>\n  );\n}\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <AuthProvider>\n          <Toaster />\n          <Router />\n        </AuthProvider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1960},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(215.5 92.1% 52.0%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210.6 14.3% 53.1%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(156.9 72.2% 48.0%);\n  --accent-foreground: hsl(0 0% 100%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(215.5 92.1% 52.0%);\n  --chart-1: hsl(215.5 92.1% 52.0%);\n  --chart-2: hsl(156.9 72.2% 48.0%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(215.5 92.1% 52.0%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(215.5 92.1% 52.0%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(215.5 92.1% 52.0%);\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(215.5 92.1% 52.0%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(156.9 72.2% 48.0%);\n  --accent-foreground: hsl(0 0% 100%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(215.5 92.1% 52.0%);\n  --chart-1: hsl(215.5 92.1% 52.0%);\n  --chart-2: hsl(156.9 72.2% 48.0%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(215.5 92.1% 52.0%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(215.5 92.1% 52.0%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(215.5 92.1% 52.0%);\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n","size_bytes":4991},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/inventory-edit-form.tsx":{"content":"import { useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { insertInventorySchema, type InsertInventory, type Inventory } from \"@shared/schema\";\n\ninterface InventoryEditFormProps {\n  vehicle: Inventory;\n  onSuccess: () => void;\n}\n\nexport default function InventoryEditForm({ vehicle, onSuccess }: InventoryEditFormProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<InsertInventory>({\n    resolver: zodResolver(insertInventorySchema),\n    defaultValues: {\n      stockNumber: vehicle.stockNumber,\n      vin: vehicle.vin,\n      year: vehicle.year,\n      make: vehicle.make,\n      model: vehicle.model,\n      series: vehicle.series || \"\",\n      color: vehicle.color,\n      certified: vehicle.certified || false,\n      body: vehicle.body,\n      price: vehicle.price,\n      bookValue: vehicle.bookValue || \"0\",\n      cost: vehicle.cost,\n      markup: vehicle.markup || \"0\",\n      odometer: vehicle.odometer,\n      age: vehicle.age || 0,\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: (data: InsertInventory) => \n      apiRequest(`/api/inventory/${vehicle.id}`, { method: \"PUT\", body: data }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/inventory\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/stats\"] });\n      toast({\n        title: \"Success\",\n        description: \"Vehicle updated successfully\",\n      });\n      onSuccess();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update vehicle\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: InsertInventory) => {\n    updateMutation.mutate(data);\n  };\n\n  // Watch price and cost to auto-calculate markup\n  const watchPrice = form.watch(\"price\");\n  const watchCost = form.watch(\"cost\");\n\n  // Auto-calculate markup when price or cost changes\n  useEffect(() => {\n    if (watchPrice && watchCost) {\n      const calculatedMarkup = Number(watchPrice) - Number(watchCost);\n      if (form.getValues(\"markup\") !== String(calculatedMarkup)) {\n        form.setValue(\"markup\", String(calculatedMarkup));\n      }\n    }\n  }, [watchPrice, watchCost, form]);\n\n  return (\n    <div className=\"max-w-6xl mx-auto\">\n      <DialogHeader className=\"pb-6 border-b border-gray-200 bg-gradient-to-r from-blue-50 to-indigo-50 -mx-6 -mt-6 px-6 pt-6 rounded-t-lg\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <DialogTitle className=\"text-2xl font-bold text-gray-900\">\n              Edit Vehicle\n            </DialogTitle>\n            <p className=\"text-lg text-gray-600 mt-1\">{vehicle.year} {vehicle.make} {vehicle.model} • Stock #{vehicle.stockNumber}</p>\n          </div>\n          <div className=\"text-right\">\n            <p className=\"text-2xl font-bold text-blue-600\">${Number(vehicle.price).toLocaleString()}</p>\n            <p className=\"text-sm text-gray-500\">Current Price</p>\n          </div>\n        </div>\n      </DialogHeader>\n      \n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8 mt-6\">\n          {/* Basic Vehicle Information */}\n          <div className=\"bg-white rounded-lg p-6 shadow-sm border border-gray-100\">\n            <div className=\"flex items-center mb-4\">\n              <div className=\"w-3 h-3 bg-blue-500 rounded-full mr-3\"></div>\n              <h3 className=\"text-xl font-semibold text-gray-900\">Basic Vehicle Information</h3>\n            </div>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {/* Stock Number */}\n            <FormField\n              control={form.control}\n              name=\"stockNumber\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Stock Number</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"A2024001\" {...field} data-testid=\"input-stock-number\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            {/* VIN */}\n            <FormField\n              control={form.control}\n              name=\"vin\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>VIN</FormLabel>\n                  <FormControl>\n                    <Input\n                      placeholder=\"1HGCM82633A123456\"\n                      maxLength={17}\n                      {...field}\n                      onChange={(e) => {\n                        const value = e.target.value.toUpperCase().replace(/[^A-HJ-NPR-Z0-9]/g, '');\n                        field.onChange(value);\n                      }}\n                      data-testid=\"input-vin\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            {/* Year */}\n            <FormField\n              control={form.control}\n              name=\"year\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Year</FormLabel>\n                  <FormControl>\n                    <Input\n                      type=\"number\"\n                      min=\"1900\"\n                      max=\"2030\"\n                      {...field}\n                      onChange={(e) => field.onChange(parseInt(e.target.value))}\n                      data-testid=\"input-year\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            {/* Make */}\n            <FormField\n              control={form.control}\n              name=\"make\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Make</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"Toyota\" {...field} data-testid=\"input-make\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            {/* Model */}\n            <FormField\n              control={form.control}\n              name=\"model\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Model</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"Camry\" {...field} data-testid=\"input-model\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            {/* Series */}\n            <FormField\n              control={form.control}\n              name=\"series\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Series</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"LE\" {...field} data-testid=\"input-series\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            {/* Color */}\n            <FormField\n              control={form.control}\n              name=\"color\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Color</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"Silver Metallic\" {...field} data-testid=\"input-color\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            {/* Certified */}\n            <FormField\n              control={form.control}\n              name=\"certified\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Certified</FormLabel>\n                  <Select onValueChange={(value) => field.onChange(value === \"true\")} value={field.value?.toString() || \"false\"}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-certified\">\n                        <SelectValue placeholder=\"Select status\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"true\">Yes</SelectItem>\n                      <SelectItem value=\"false\">No</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            {/* Body */}\n            <FormField\n              control={form.control}\n              name=\"body\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Body Type</FormLabel>\n                  <Select onValueChange={field.onChange} value={field.value}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-body\">\n                        <SelectValue placeholder=\"Select body type\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"Sedan\">Sedan</SelectItem>\n                      <SelectItem value=\"SUV\">SUV</SelectItem>\n                      <SelectItem value=\"Truck\">Truck</SelectItem>\n                      <SelectItem value=\"Coupe\">Coupe</SelectItem>\n                      <SelectItem value=\"Convertible\">Convertible</SelectItem>\n                      <SelectItem value=\"Wagon\">Wagon</SelectItem>\n                      <SelectItem value=\"Hatchback\">Hatchback</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            {/* Price */}\n            <FormField\n              control={form.control}\n              name=\"price\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Price ($)</FormLabel>\n                  <FormControl>\n                    <Input\n                      type=\"number\"\n                      step=\"0.01\"\n                      placeholder=\"28450\"\n                      {...field}\n                      onChange={(e) => field.onChange(e.target.value || \"0\")}\n                      data-testid=\"input-price\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            {/* Book Value */}\n            <FormField\n              control={form.control}\n              name=\"bookValue\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Book Value ($)</FormLabel>\n                  <FormControl>\n                    <Input\n                      type=\"number\"\n                      step=\"0.01\"\n                      placeholder=\"26500\"\n                      {...field}\n                      onChange={(e) => field.onChange(e.target.value || \"0\")}\n                      data-testid=\"input-book-value\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            {/* Cost */}\n            <FormField\n              control={form.control}\n              name=\"cost\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Cost ($)</FormLabel>\n                  <FormControl>\n                    <Input\n                      type=\"number\"\n                      step=\"0.01\"\n                      placeholder=\"24000\"\n                      {...field}\n                      onChange={(e) => field.onChange(e.target.value || \"0\")}\n                      data-testid=\"input-cost\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            {/* Markup (calculated) */}\n            <FormField\n              control={form.control}\n              name=\"markup\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Markup ($)</FormLabel>\n                  <FormControl>\n                    <Input\n                      type=\"number\"\n                      step=\"0.01\"\n                      {...field}\n                      readOnly\n                      className=\"bg-gray-100\"\n                      data-testid=\"input-markup\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            {/* Odometer */}\n            <FormField\n              control={form.control}\n              name=\"odometer\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Odometer (miles)</FormLabel>\n                  <FormControl>\n                    <Input\n                      type=\"number\"\n                      placeholder=\"12450\"\n                      {...field}\n                      onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                      data-testid=\"input-odometer\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            </div>\n          </div>\n\n          {/* Vehicle Specifications */}\n          <div className=\"bg-white rounded-lg p-6 shadow-sm border border-gray-100\">\n            <div className=\"flex items-center mb-4\">\n              <div className=\"w-3 h-3 bg-purple-500 rounded-full mr-3\"></div>\n              <h3 className=\"text-xl font-semibold text-gray-900\">Vehicle Specifications</h3>\n            </div>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {/* Color */}\n              <FormField\n                control={form.control}\n                name=\"color\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Color</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Silver Metallic\" {...field} data-testid=\"input-color\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              {/* Body */}\n              <FormField\n                control={form.control}\n                name=\"body\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Body Type</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-body\">\n                          <SelectValue placeholder=\"Select body type\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"Sedan\">Sedan</SelectItem>\n                        <SelectItem value=\"SUV\">SUV</SelectItem>\n                        <SelectItem value=\"Truck\">Truck</SelectItem>\n                        <SelectItem value=\"Coupe\">Coupe</SelectItem>\n                        <SelectItem value=\"Convertible\">Convertible</SelectItem>\n                        <SelectItem value=\"Wagon\">Wagon</SelectItem>\n                        <SelectItem value=\"Hatchback\">Hatchback</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              {/* Certified */}\n              <FormField\n                control={form.control}\n                name=\"certified\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Certified</FormLabel>\n                    <Select onValueChange={(value) => field.onChange(value === \"true\")} value={field.value?.toString() || \"false\"}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-certified\">\n                          <SelectValue placeholder=\"Select status\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"true\">Yes</SelectItem>\n                        <SelectItem value=\"false\">No</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n          </div>\n\n          {/* Financial Information */}\n          <div className=\"bg-white rounded-lg p-6 shadow-sm border border-gray-100\">\n            <div className=\"flex items-center mb-4\">\n              <div className=\"w-3 h-3 bg-green-500 rounded-full mr-3\"></div>\n              <h3 className=\"text-xl font-semibold text-gray-900\">Financial Information</h3>\n            </div>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n              {/* Price */}\n              <FormField\n                control={form.control}\n                name=\"price\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Price ($)</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"number\"\n                        step=\"0.01\"\n                        placeholder=\"28450\"\n                        {...field}\n                        onChange={(e) => field.onChange(e.target.value || \"0\")}\n                        data-testid=\"input-price\"\n                        className=\"font-semibold text-green-600\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              {/* Book Value */}\n              <FormField\n                control={form.control}\n                name=\"bookValue\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Book Value ($)</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"number\"\n                        step=\"0.01\"\n                        placeholder=\"26500\"\n                        {...field}\n                        onChange={(e) => field.onChange(e.target.value || \"0\")}\n                        data-testid=\"input-book-value\"\n                        className=\"font-semibold text-blue-600\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              {/* Cost */}\n              <FormField\n                control={form.control}\n                name=\"cost\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Cost ($)</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"number\"\n                        step=\"0.01\"\n                        placeholder=\"24000\"\n                        {...field}\n                        onChange={(e) => field.onChange(e.target.value || \"0\")}\n                        data-testid=\"input-cost\"\n                        className=\"font-semibold text-red-600\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              {/* Markup (calculated) */}\n              <FormField\n                control={form.control}\n                name=\"markup\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Markup ($)</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"number\"\n                        step=\"0.01\"\n                        {...field}\n                        readOnly\n                        className=\"bg-purple-50 font-semibold text-purple-600 border-purple-200\"\n                        data-testid=\"input-markup\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n          </div>\n\n          {/* Vehicle Condition */}\n          <div className=\"bg-white rounded-lg p-6 shadow-sm border border-gray-100\">\n            <div className=\"flex items-center mb-4\">\n              <div className=\"w-3 h-3 bg-orange-500 rounded-full mr-3\"></div>\n              <h3 className=\"text-xl font-semibold text-gray-900\">Vehicle Condition</h3>\n            </div>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              {/* Odometer */}\n              <FormField\n                control={form.control}\n                name=\"odometer\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Odometer (miles)</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"number\"\n                        placeholder=\"12450\"\n                        {...field}\n                        onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                        data-testid=\"input-odometer\"\n                        className=\"font-semibold text-blue-600\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              {/* Age */}\n              <FormField\n                control={form.control}\n                name=\"age\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Age (days)</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"number\"\n                        placeholder=\"45\"\n                        {...field}\n                        onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                        data-testid=\"input-age\"\n                        className=\"font-semibold text-orange-600\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n          </div>\n          \n          <div className=\"bg-gray-50 rounded-lg p-6 border border-gray-200\">\n            <div className=\"flex justify-between items-center\">\n              <p className=\"text-sm text-gray-600\">\n                All changes will be saved to the inventory database\n              </p>\n              <div className=\"flex space-x-4\">\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={onSuccess} \n                  data-testid=\"button-cancel-edit\"\n                  className=\"px-6 py-2\"\n                >\n                  Cancel\n                </Button>\n                <Button \n                  type=\"submit\" \n                  disabled={updateMutation.isPending} \n                  data-testid=\"button-save-changes\"\n                  className=\"px-6 py-2 bg-gradient-to-r from-blue-500 to-indigo-600 hover:from-blue-600 hover:to-indigo-700\"\n                >\n                  {updateMutation.isPending ? \"Saving...\" : \"Save Changes\"}\n                </Button>\n              </div>\n            </div>\n          </div>\n        </form>\n      </Form>\n    </div>\n  );\n}","size_bytes":24315},"client/src/components/inventory-form.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { useEffect, useState } from \"react\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { insertInventorySchema, type InsertInventory, type Settings } from \"@shared/schema\";\n\ninterface InventoryFormProps {\n  onSuccess: () => void;\n}\n\nexport default function InventoryForm({ onSuccess }: InventoryFormProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedMake, setSelectedMake] = useState(\"\");\n\n  // Fetch settings data\n  const { data: settings } = useQuery<Settings>({\n    queryKey: [\"/api/settings\"],\n    queryFn: () => apiRequest(\"/api/settings\"),\n  });\n\n  const form = useForm<InsertInventory>({\n    resolver: zodResolver(insertInventorySchema),\n    defaultValues: {\n      stockNumber: \"\",\n      vin: \"\",\n      year: new Date().getFullYear(),\n      make: \"\",\n      model: \"\",\n      series: \"\",\n      color: \"\",\n      certified: false,\n      body: \"\",\n      price: \"0\",\n      bookValue: \"0\",\n      cost: \"0\",\n      markup: \"0\",\n      odometer: 0,\n      age: 0,\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: (data: InsertInventory) =>\n      apiRequest(\"/api/inventory\", { method: \"POST\", body: data }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/inventory\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/stats\"] });\n      toast({\n        title: \"Success\",\n        description: \"Vehicle added to inventory successfully!\",\n      });\n      onSuccess();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to add vehicle to inventory\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: InsertInventory) => {\n    // Calculate markup if price and cost are provided\n    if (data.price && data.cost) {\n      data.markup = String(Number(data.price) - Number(data.cost));\n    }\n    createMutation.mutate(data);\n  };\n\n  // Watch price and cost to auto-calculate markup\n  const watchPrice = form.watch(\"price\");\n  const watchCost = form.watch(\"cost\");\n\n  // Auto-calculate markup when price or cost changes\n  useEffect(() => {\n    if (watchPrice && watchCost) {\n      const calculatedMarkup = Number(watchPrice) - Number(watchCost);\n      if (form.getValues(\"markup\") !== String(calculatedMarkup)) {\n        form.setValue(\"markup\", String(calculatedMarkup));\n      }\n    }\n  }, [watchPrice, watchCost, form]);\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h3 className=\"text-lg font-semibold text-gray-900\">Add New Vehicle to Inventory</h3>\n        <p className=\"text-sm text-gray-600 mt-1\">Enter vehicle details to add to inventory</p>\n      </div>\n      \n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {/* Stock Number */}\n            <FormField\n              control={form.control}\n              name=\"stockNumber\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Stock #</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"TC2024001\" {...field} data-testid=\"input-stock-number\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            {/* VIN */}\n            <FormField\n              control={form.control}\n              name=\"vin\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>VIN</FormLabel>\n                  <FormControl>\n                    <Input\n                      placeholder=\"1HGCM82633A123456\"\n                      maxLength={17}\n                      {...field}\n                      onChange={(e) => {\n                        const value = e.target.value.toUpperCase().replace(/[^A-HJ-NPR-Z0-9]/g, '');\n                        field.onChange(value);\n                      }}\n                      data-testid=\"input-vin\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            {/* Year */}\n            <FormField\n              control={form.control}\n              name=\"year\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Year</FormLabel>\n                  <FormControl>\n                    <Input\n                      type=\"number\"\n                      min=\"1900\"\n                      max=\"2030\"\n                      {...field}\n                      onChange={(e) => field.onChange(parseInt(e.target.value))}\n                      data-testid=\"input-year\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            {/* Make */}\n            <FormField\n              control={form.control}\n              name=\"make\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Make</FormLabel>\n                  <Select \n                    onValueChange={(value) => {\n                      field.onChange(value);\n                      setSelectedMake(value);\n                      form.setValue(\"model\", \"\");\n                      form.setValue(\"series\", \"\");\n                    }} \n                    defaultValue={field.value}\n                  >\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-make\">\n                        <SelectValue placeholder=\"Select Make\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {settings?.make?.map((make) => (\n                        <SelectItem key={make} value={make}>\n                          {make}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            {/* Model */}\n            <FormField\n              control={form.control}\n              name=\"model\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Model</FormLabel>\n                  <Select \n                    onValueChange={(value) => {\n                      field.onChange(value);\n                      form.setValue(\"series\", \"\");\n                    }} \n                    defaultValue={field.value}\n                  >\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-model\">\n                        <SelectValue placeholder=\"Select Model\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {settings?.model?.map((model) => (\n                        <SelectItem key={model.name} value={model.name}>\n                          {model.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            {/* Series */}\n            <FormField\n              control={form.control}\n              name=\"series\"\n              render={({ field }) => {\n                const selectedModel = form.watch(\"model\");\n                const availableSeries = settings?.model?.find(m => m.name === selectedModel)?.Series || [];\n                \n                return (\n                  <FormItem>\n                    <FormLabel>Series</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-series\">\n                          <SelectValue placeholder=\"Select Series\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {availableSeries.map((series) => (\n                          <SelectItem key={series} value={series}>\n                            {series}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                );\n              }}\n            />\n            \n            {/* Color */}\n            <FormField\n              control={form.control}\n              name=\"color\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Color</FormLabel>\n                  <Select onValueChange={field.onChange} defaultValue={field.value}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-color\">\n                        <SelectValue placeholder=\"Select Color\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {settings?.colors?.map((color) => (\n                        <SelectItem key={color.code} value={color.name}>\n                          {color.name} ({color.code})\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            {/* Certified */}\n            <FormField\n              control={form.control}\n              name=\"certified\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Certified</FormLabel>\n                  <Select onValueChange={(value) => field.onChange(value === \"true\")} defaultValue={field.value ? \"true\" : \"false\"}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-certified\">\n                        <SelectValue />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"false\">No</SelectItem>\n                      <SelectItem value=\"true\">Yes</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            {/* Body Style */}\n            <FormField\n              control={form.control}\n              name=\"body\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Body Style</FormLabel>\n                  <Select onValueChange={field.onChange} defaultValue={field.value}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-body-style\">\n                        <SelectValue placeholder=\"Select Body Style\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"sedan\">Sedan</SelectItem>\n                      <SelectItem value=\"suv\">SUV</SelectItem>\n                      <SelectItem value=\"coupe\">Coupe</SelectItem>\n                      <SelectItem value=\"hatchback\">Hatchback</SelectItem>\n                      <SelectItem value=\"truck\">Truck</SelectItem>\n                      <SelectItem value=\"convertible\">Convertible</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            {/* Price */}\n            <FormField\n              control={form.control}\n              name=\"price\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Price ($)</FormLabel>\n                  <FormControl>\n                    <Input\n                      type=\"number\"\n                      step=\"0.01\"\n                      placeholder=\"28450\"\n                      {...field}\n                      onChange={(e) => field.onChange(e.target.value || \"0\")}\n                      data-testid=\"input-price\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            {/* Book Value */}\n            <FormField\n              control={form.control}\n              name=\"bookValue\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Book Value ($)</FormLabel>\n                  <FormControl>\n                    <Input\n                      type=\"number\"\n                      step=\"0.01\"\n                      placeholder=\"26500\"\n                      {...field}\n                      onChange={(e) => field.onChange(e.target.value || \"0\")}\n                      data-testid=\"input-book-value\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            {/* Cost */}\n            <FormField\n              control={form.control}\n              name=\"cost\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Cost ($)</FormLabel>\n                  <FormControl>\n                    <Input\n                      type=\"number\"\n                      step=\"0.01\"\n                      placeholder=\"24000\"\n                      {...field}\n                      onChange={(e) => field.onChange(e.target.value || \"0\")}\n                      data-testid=\"input-cost\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            {/* Markup (calculated) */}\n            <FormField\n              control={form.control}\n              name=\"markup\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Markup ($)</FormLabel>\n                  <FormControl>\n                    <Input\n                      type=\"number\"\n                      step=\"0.01\"\n                      {...field}\n                      readOnly\n                      className=\"bg-gray-100\"\n                      data-testid=\"input-markup\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            {/* Odometer */}\n            <FormField\n              control={form.control}\n              name=\"odometer\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Odometer (miles)</FormLabel>\n                  <FormControl>\n                    <Input\n                      type=\"number\"\n                      placeholder=\"12450\"\n                      {...field}\n                      onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                      data-testid=\"input-odometer\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            {/* Age */}\n            <FormField\n              control={form.control}\n              name=\"age\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Age (days)</FormLabel>\n                  <FormControl>\n                    <Input\n                      type=\"number\"\n                      placeholder=\"45\"\n                      {...field}\n                      onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                      data-testid=\"input-age\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </div>\n          \n          <div className=\"flex justify-end space-x-4 pt-6 border-t border-gray-200\">\n            <Button type=\"button\" variant=\"outline\" onClick={onSuccess} data-testid=\"button-cancel-inventory\">\n              Cancel\n            </Button>\n            <Button type=\"submit\" disabled={createMutation.isPending} data-testid=\"button-submit-inventory\">\n              {createMutation.isPending ? \"Adding...\" : \"Add Vehicle\"}\n            </Button>\n          </div>\n        </form>\n      </Form>\n    </div>\n  );\n}\n","size_bytes":17037},"client/src/components/inventory-table.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Edit, Trash2, Eye } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Inventory } from \"@shared/schema\";\nimport InventoryEditForm from \"@/components/inventory-edit-form\";\n\ninterface InventoryTableProps {\n  inventory: Inventory[];\n  isLoading: boolean;\n  visibleColumns: Record<string, boolean>;\n}\n\n\nfunction VehicleViewDialog({ vehicle }: { vehicle: Inventory }) {\n  const profitMargin = vehicle.markup && vehicle.cost ? ((Number(vehicle.markup) / Number(vehicle.cost)) * 100).toFixed(1) : '0.0';\n  \n  return (\n    <DialogContent className=\"max-w-5xl max-h-[90vh] overflow-y-auto\">\n      <DialogHeader className=\"pb-6 border-b border-gray-200\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <DialogTitle className=\"text-2xl font-bold text-gray-900\">\n              {vehicle.year} {vehicle.make} {vehicle.model}\n            </DialogTitle>\n            <p className=\"text-lg text-gray-600 mt-1\">Stock #{vehicle.stockNumber}</p>\n          </div>\n          <div className=\"text-right\">\n            <p className=\"text-3xl font-bold text-green-600\">${Number(vehicle.price).toLocaleString()}</p>\n            <p className=\"text-sm text-gray-500\">Listed Price</p>\n          </div>\n        </div>\n      </DialogHeader>\n      \n      <div className=\"space-y-8 pt-6\">\n        {/* Vehicle Identification */}\n        <div className=\"bg-white rounded-lg p-6 shadow-sm border\">\n          <h3 className=\"text-xl font-semibold text-gray-900 mb-4\">Vehicle Information</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            <div className=\"space-y-3\">\n              <div className=\"flex flex-col\">\n                <span className=\"text-sm font-medium text-gray-500 uppercase tracking-wide\">VIN Number</span>\n                <span className=\"font-mono text-lg text-gray-900 bg-gray-50 px-3 py-2 rounded border\">{vehicle.vin}</span>\n              </div>\n            </div>\n            <div className=\"space-y-3\">\n              <div className=\"flex flex-col\">\n                <span className=\"text-sm font-medium text-gray-500 uppercase tracking-wide\">Year & Make</span>\n                <span className=\"text-lg font-semibold text-gray-900\">{vehicle.year} {vehicle.make}</span>\n              </div>\n              <div className=\"flex flex-col\">\n                <span className=\"text-sm font-medium text-gray-500 uppercase tracking-wide\">Model & Series</span>\n                <span className=\"text-lg font-semibold text-gray-900\">{vehicle.model} {vehicle.series || ''}</span>\n              </div>\n            </div>\n            <div className=\"space-y-3\">\n              <div className=\"flex flex-col\">\n                <span className=\"text-sm font-medium text-gray-500 uppercase tracking-wide\">Color</span>\n                <span className=\"text-lg font-medium text-gray-900\">{vehicle.color}</span>\n              </div>\n              <div className=\"flex flex-col\">\n                <span className=\"text-sm font-medium text-gray-500 uppercase tracking-wide\">Body Type</span>\n                <span className=\"text-lg font-medium text-gray-900\">{vehicle.body}</span>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Vehicle Status & Condition */}\n        <div className=\"bg-white rounded-lg p-6 shadow-sm border\">\n          <h3 className=\"text-xl font-semibold text-gray-900 mb-4\">Vehicle Status</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <div className=\"text-center p-4 rounded-lg border\">\n              <div className=\"mb-2\">\n                {vehicle.certified ? (\n                  <Badge className=\"px-4 py-2 text-sm font-medium\">\n                    ✓ Certified Pre-Owned\n                  </Badge>\n                ) : (\n                  <Badge variant=\"outline\" className=\"px-4 py-2 text-sm font-medium\">\n                    Standard Vehicle\n                  </Badge>\n                )}\n              </div>\n              <p className=\"text-xs text-gray-600\">Certification Status</p>\n            </div>\n            <div className=\"text-center p-4 rounded-lg border\">\n              <p className=\"text-2xl font-bold text-gray-900\">{vehicle.odometer.toLocaleString()}</p>\n              <p className=\"text-sm text-gray-600\">Miles</p>\n            </div>\n            <div className=\"text-center p-4 rounded-lg border\">\n              <p className=\"text-2xl font-bold text-gray-900\">{vehicle.age || 0}</p>\n              <p className=\"text-sm text-gray-600\">Days on Lot</p>\n            </div>\n          </div>\n        </div>\n        \n        {/* Pricing Breakdown */}\n        <div className=\"bg-white rounded-lg p-6 shadow-sm border\">\n          <h3 className=\"text-xl font-semibold text-gray-900 mb-4\">Financial Details</h3>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <div className=\"p-4 rounded-lg border\">\n              <p className=\"text-sm font-medium text-gray-600 mb-1\">Listed Price</p>\n              <p className=\"text-2xl font-bold text-gray-900\">${Number(vehicle.price).toLocaleString()}</p>\n            </div>\n            <div className=\"p-4 rounded-lg border\">\n              <p className=\"text-sm font-medium text-gray-600 mb-1\">Book Value</p>\n              <p className=\"text-2xl font-bold text-gray-900\">${vehicle.bookValue ? Number(vehicle.bookValue).toLocaleString() : 'N/A'}</p>\n            </div>\n            <div className=\"p-4 rounded-lg border\">\n              <p className=\"text-sm font-medium text-gray-600 mb-1\">Our Cost</p>\n              <p className=\"text-2xl font-bold text-gray-900\">${Number(vehicle.cost).toLocaleString()}</p>\n            </div>\n            <div className=\"p-4 rounded-lg border\">\n              <p className=\"text-sm font-medium text-gray-600 mb-1\">Markup</p>\n              <p className=\"text-2xl font-bold text-gray-900\">${vehicle.markup ? Number(vehicle.markup).toLocaleString() : '0'}</p>\n              <p className=\"text-xs text-gray-500 mt-1\">{profitMargin}% margin</p>\n            </div>\n          </div>\n        </div>\n        \n        {/* Record Information */}\n        <div className=\"bg-gray-50 rounded-lg p-4 border\">\n          <div className=\"flex items-center text-gray-600\">\n            <div className=\"w-2 h-2 bg-gray-400 rounded-full mr-2\"></div>\n            <span className=\"text-sm\">Added to inventory: </span>\n            <span className=\"font-medium ml-1\">{vehicle.createdAt ? new Date(vehicle.createdAt).toLocaleDateString('en-US', { \n              year: 'numeric', month: 'long', day: 'numeric' \n            }) : 'Date not available'}</span>\n          </div>\n        </div>\n      </div>\n    </DialogContent>\n  );\n}\n\nexport default function InventoryTable({ inventory, isLoading, visibleColumns }: InventoryTableProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [editingVehicle, setEditingVehicle] = useState<Inventory | null>(null);\n\n\n  const deleteMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(`/api/inventory/${id}`, { method: \"DELETE\" }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/inventory\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/stats\"] });\n      toast({\n        title: \"Success\",\n        description: \"Vehicle deleted successfully\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete vehicle\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleDelete = (id: string, stockNumber: string) => {\n    if (confirm(`Are you sure you want to delete vehicle ${stockNumber}?`)) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <Card>\n        <div className=\"p-8 text-center\">\n          <p className=\"text-gray-500\">Loading inventory...</p>\n        </div>\n      </Card>\n    );\n  }\n\n  if (inventory.length === 0) {\n    return (\n      <Card>\n        <div className=\"p-8 text-center\">\n          <p className=\"text-gray-500\">No vehicles in inventory</p>\n        </div>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"overflow-hidden\">\n      <div className=\"overflow-x-auto\">\n        <Table>\n          <TableHeader>\n            <TableRow className=\"bg-gray-50\">\n              {visibleColumns.stockNumber && <TableHead>Stock #</TableHead>}\n              {visibleColumns.vin && <TableHead>VIN</TableHead>}\n              {visibleColumns.vehicle && <TableHead>Vehicle</TableHead>}\n              {visibleColumns.color && <TableHead>Color</TableHead>}\n              {visibleColumns.price && <TableHead>Price</TableHead>}\n              {visibleColumns.odometer && <TableHead>Odometer</TableHead>}\n              {visibleColumns.age && <TableHead>Age</TableHead>}\n              {visibleColumns.actions && <TableHead>Actions</TableHead>}\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {inventory.map((vehicle) => (\n              <TableRow key={vehicle.id} className=\"hover:bg-gray-50\" data-testid={`row-vehicle-${vehicle.id}`}>\n                {visibleColumns.stockNumber && (\n                  <TableCell className=\"font-medium text-primary\" data-testid={`text-stock-${vehicle.id}`}>\n                    {vehicle.stockNumber}\n                  </TableCell>\n                )}\n                {visibleColumns.vin && (\n                  <TableCell className=\"text-gray-600 font-mono text-sm\" data-testid={`text-vin-${vehicle.id}`}>\n                    {vehicle.vin}\n                  </TableCell>\n                )}\n                {visibleColumns.vehicle && (\n                  <TableCell>\n                    <div>\n                      <div className=\"font-medium text-gray-900\" data-testid={`text-vehicle-${vehicle.id}`}>\n                        {vehicle.year} {vehicle.make} {vehicle.model} {vehicle.series}\n                      </div>\n                      <div className=\"text-sm text-gray-500\">\n                        {vehicle.body}\n                        {vehicle.certified && (\n                          <Badge variant=\"secondary\" className=\"ml-2\">Certified</Badge>\n                        )}\n                      </div>\n                    </div>\n                  </TableCell>\n                )}\n                {visibleColumns.color && (\n                  <TableCell className=\"text-gray-600\" data-testid={`text-color-${vehicle.id}`}>\n                    {vehicle.color}\n                  </TableCell>\n                )}\n                {visibleColumns.price && (\n                  <TableCell className=\"font-medium text-gray-900\" data-testid={`text-price-${vehicle.id}`}>\n                    ${Number(vehicle.price).toLocaleString()}\n                  </TableCell>\n                )}\n                {visibleColumns.odometer && (\n                  <TableCell className=\"text-gray-600\" data-testid={`text-odometer-${vehicle.id}`}>\n                    {vehicle.odometer.toLocaleString()} mi\n                  </TableCell>\n                )}\n                {visibleColumns.age && (\n                  <TableCell className=\"text-gray-600\" data-testid={`text-age-${vehicle.id}`}>\n                    {vehicle.age || 0} days\n                  </TableCell>\n                )}\n                {visibleColumns.actions && (\n                  <TableCell>\n                    <div className=\"flex items-center space-x-2\">\n                      <Dialog>\n                        <DialogTrigger asChild>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"text-primary hover:text-blue-700\"\n                            data-testid={`button-view-${vehicle.id}`}\n                          >\n                            <Eye size={16} />\n                          </Button>\n                        </DialogTrigger>\n                        <VehicleViewDialog vehicle={vehicle} />\n                      </Dialog>\n                      <Dialog open={editingVehicle?.id === vehicle.id} onOpenChange={(open) => !open && setEditingVehicle(null)}>\n                        <DialogTrigger asChild>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"text-primary hover:text-blue-700\"\n                            onClick={() => setEditingVehicle(vehicle)}\n                            data-testid={`button-edit-${vehicle.id}`}\n                          >\n                            <Edit size={16} />\n                          </Button>\n                        </DialogTrigger>\n                        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n                          {editingVehicle && (\n                            <InventoryEditForm \n                              vehicle={editingVehicle} \n                              onSuccess={() => setEditingVehicle(null)} \n                            />\n                          )}\n                        </DialogContent>\n                      </Dialog>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"text-red-600 hover:text-red-900\"\n                        onClick={() => handleDelete(vehicle.id, vehicle.stockNumber)}\n                        disabled={deleteMutation.isPending}\n                        data-testid={`button-delete-${vehicle.id}`}\n                      >\n                        <Trash2 size={16} />\n                      </Button>\n                    </div>\n                  </TableCell>\n                )}\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </div>\n    </Card>\n  );\n}\n","size_bytes":14265},"client/src/components/sales-edit-form.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Search, CheckCircle } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { insertSalesSchema, type InsertSales, type Sales, type Inventory } from \"@shared/schema\";\n\ninterface SalesEditFormProps {\n  sale: Sales;\n  onSuccess: () => void;\n}\n\nexport default function SalesEditForm({ sale, onSuccess }: SalesEditFormProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<InsertSales>({\n    resolver: zodResolver(insertSalesSchema),\n    defaultValues: {\n      dealNumber: sale.dealNumber,\n      customerNumber: sale.customerNumber || \"\",\n      firstName: sale.firstName,\n      lastName: sale.lastName,\n      zip: sale.zip || \"\",\n      exteriorColor: sale.exteriorColor || \"\",\n      newUsed: sale.newUsed,\n      stockNumber: sale.stockNumber,\n      deliveryDate: sale.deliveryDate ? new Date(sale.deliveryDate).toISOString().split('T')[0] : undefined,\n      deliveryMileage: sale.deliveryMileage || 0,\n      trade1Vin: sale.trade1Vin || \"\",\n      trade1Year: sale.trade1Year || undefined,\n      trade1Make: sale.trade1Make || \"\",\n      trade1Model: sale.trade1Model || \"\",\n      trade1Odometer: sale.trade1Odometer || 0,\n      trade1ACV: sale.trade1ACV || \"0\",\n      trade2Vin: sale.trade2Vin || \"\",\n      trade2Year: sale.trade2Year || undefined,\n      trade2Make: sale.trade2Make || \"\",\n      trade2Model: sale.trade2Model || \"\",\n      trade2Odometer: sale.trade2Odometer || 0,\n      trade2ACV: sale.trade2ACV || \"0\",\n      closingManagerNumber: sale.closingManagerNumber || \"\",\n      closingManagerName: sale.closingManagerName || \"\",\n      financeManagerNumber: sale.financeManagerNumber || \"\",\n      financeManagerName: sale.financeManagerName || \"\",\n      salesmanNumber: sale.salesmanNumber || \"\",\n      salesmanName: sale.salesmanName || \"\",\n      msrp: sale.msrp || \"0\",\n      listPrice: sale.listPrice || \"0\",\n      salesPrice: sale.salesPrice,\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: (data: InsertSales) => \n      apiRequest(`/api/sales/${sale.id}`, { method: \"PUT\", body: data }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/sales\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/stats\"] });\n      toast({\n        title: \"Success\",\n        description: \"Sales record updated successfully\",\n      });\n      onSuccess();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update sales record\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: InsertSales) => {\n    // Clean up trade data if VINs are empty\n    if (!data.trade1Vin) {\n      data.trade1Vin = undefined;\n      data.trade1Year = undefined;\n      data.trade1Make = \"\";\n      data.trade1Model = \"\";\n      data.trade1Odometer = 0;\n      data.trade1ACV = \"0\";\n    }\n    if (!data.trade2Vin) {\n      data.trade2Vin = undefined;\n      data.trade2Year = undefined;\n      data.trade2Make = \"\";\n      data.trade2Model = \"\";\n      data.trade2Odometer = 0;\n      data.trade2ACV = \"0\";\n    }\n    updateMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"max-w-7xl mx-auto\">\n      <DialogHeader className=\"pb-6 border-b border-gray-200 bg-gradient-to-r from-green-50 to-emerald-50 -mx-6 -mt-6 px-6 pt-6 rounded-t-lg\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <DialogTitle className=\"text-2xl font-bold text-gray-900\">\n              Edit Sale Record\n            </DialogTitle>\n            <p className=\"text-lg text-gray-600 mt-1\">Deal #{sale.dealNumber} • {sale.firstName} {sale.lastName} • Stock #{sale.stockNumber}</p>\n          </div>\n          <div className=\"text-right\">\n            <p className=\"text-2xl font-bold text-green-600\">${Number(sale.salesPrice).toLocaleString()}</p>\n            <p className=\"text-sm text-gray-500\">Sale Price</p>\n          </div>\n        </div>\n      </DialogHeader>\n      \n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8 mt-6\">\n          {/* Basic Sale Information */}\n          <div className=\"bg-white rounded-lg p-6 shadow-sm border border-gray-100\">\n            <div className=\"flex items-center mb-4\">\n              <div className=\"w-3 h-3 bg-blue-500 rounded-full mr-3\"></div>\n              <h3 className=\"text-xl font-semibold text-gray-900\">Sale Information</h3>\n            </div>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"dealNumber\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Deal Number</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"D2024-001\" {...field} data-testid=\"input-deal-number\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"stockNumber\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Stock Number</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"A2024001\" {...field} data-testid=\"input-stock-number\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"newUsed\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>New/Used</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-new-used\">\n                          <SelectValue placeholder=\"Select condition\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"New\">New</SelectItem>\n                        <SelectItem value=\"Used\">Used</SelectItem>\n                        <SelectItem value=\"Certified\">Certified Pre-Owned</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n          </div>\n\n          {/* Customer Information */}\n          <div className=\"bg-white rounded-lg p-6 shadow-sm border border-gray-100\">\n            <div className=\"flex items-center mb-4\">\n              <div className=\"w-3 h-3 bg-purple-500 rounded-full mr-3\"></div>\n              <h3 className=\"text-xl font-semibold text-gray-900\">Customer Information</h3>\n            </div>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"customerNumber\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Customer Number</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"C001\" {...field} data-testid=\"input-customer-number\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"firstName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>First Name</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"John\" {...field} data-testid=\"input-first-name\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"lastName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Last Name</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Smith\" {...field} data-testid=\"input-last-name\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"zip\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>ZIP Code</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"12345\" {...field} data-testid=\"input-zip\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n          </div>\n\n          {/* Vehicle Details */}\n          <div className=\"bg-white rounded-lg p-6 shadow-sm border border-gray-100\">\n            <div className=\"flex items-center mb-4\">\n              <div className=\"w-3 h-3 bg-orange-500 rounded-full mr-3\"></div>\n              <h3 className=\"text-xl font-semibold text-gray-900\">Vehicle Details</h3>\n            </div>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"exteriorColor\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Exterior Color</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Silver Metallic\" {...field} data-testid=\"input-exterior-color\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"deliveryDate\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Delivery Date</FormLabel>\n                    <FormControl>\n                      <Input type=\"date\" {...field} data-testid=\"input-delivery-date\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"deliveryMileage\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Delivery Mileage</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"number\"\n                        placeholder=\"15420\"\n                        {...field}\n                        onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                        data-testid=\"input-delivery-mileage\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n          </div>\n\n          {/* Pricing Information */}\n          <div className=\"bg-white rounded-lg p-6 shadow-sm border border-gray-100\">\n            <div className=\"flex items-center mb-4\">\n              <div className=\"w-3 h-3 bg-green-500 rounded-full mr-3\"></div>\n              <h3 className=\"text-xl font-semibold text-gray-900\">Pricing Information</h3>\n            </div>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"msrp\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>MSRP ($)</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"number\"\n                        step=\"0.01\"\n                        placeholder=\"29500\"\n                        {...field}\n                        data-testid=\"input-msrp\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"listPrice\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>List Price ($)</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"number\"\n                        step=\"0.01\"\n                        placeholder=\"28450\"\n                        {...field}\n                        data-testid=\"input-list-price\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"salesPrice\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Sales Price ($)</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"number\"\n                        step=\"0.01\"\n                        placeholder=\"27200\"\n                        {...field}\n                        data-testid=\"input-sales-price\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n          </div>\n\n          {/* Staff Information */}\n          <div className=\"bg-white rounded-lg p-6 shadow-sm border border-gray-100\">\n            <div className=\"flex items-center mb-4\">\n              <div className=\"w-3 h-3 bg-indigo-500 rounded-full mr-3\"></div>\n              <h3 className=\"text-xl font-semibold text-gray-900\">Staff Information</h3>\n            </div>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-4\">\n                <h4 className=\"font-medium text-gray-700\">Manager Information</h4>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"closingManagerNumber\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Closing Manager #</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"M001\" {...field} data-testid=\"input-closing-manager-number\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"closingManagerName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Closing Manager Name</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Sarah Johnson\" {...field} data-testid=\"input-closing-manager-name\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"financeManagerNumber\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Finance Manager #</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"F001\" {...field} data-testid=\"input-finance-manager-number\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"financeManagerName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Finance Manager Name</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Mike Davis\" {...field} data-testid=\"input-finance-manager-name\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              </div>\n              \n              <div className=\"space-y-4\">\n                <h4 className=\"font-medium text-gray-700\">Salesperson Information</h4>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"salesmanNumber\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Salesperson #</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"S001\" {...field} data-testid=\"input-salesman-number\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"salesmanName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Salesperson Name</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Robert Wilson\" {...field} data-testid=\"input-salesman-name\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n          \n          {/* Trade-in Information */}\n          <div className=\"bg-white rounded-lg p-6 shadow-sm border border-gray-100\">\n            <div className=\"flex items-center mb-4\">\n              <div className=\"w-3 h-3 bg-yellow-500 rounded-full mr-3\"></div>\n              <h3 className=\"text-xl font-semibold text-gray-900\">Trade-in Vehicles</h3>\n            </div>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              {/* Trade 1 */}\n              <div className=\"p-4 bg-gradient-to-br from-yellow-50 to-orange-50 rounded-lg border border-yellow-200\">\n                <h4 className=\"font-semibold text-yellow-700 mb-3\">Trade-in #1</h4>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"col-span-2\">\n                    <FormField\n                      control={form.control}\n                      name=\"trade1Vin\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>VIN</FormLabel>\n                          <FormControl>\n                            <Input\n                              placeholder=\"1HGCM82633A123456\"\n                              maxLength={17}\n                              {...field}\n                              className=\"font-mono\"\n                              data-testid=\"input-trade1-vin\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                  <FormField\n                    control={form.control}\n                    name=\"trade1Year\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Year</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"number\"\n                            min=\"1900\"\n                            max=\"2030\"\n                            {...field}\n                            onChange={(e) => field.onChange(parseInt(e.target.value) || undefined)}\n                            data-testid=\"input-trade1-year\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"trade1Make\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Make</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Honda\" {...field} data-testid=\"input-trade1-make\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"trade1Model\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Model</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Civic\" {...field} data-testid=\"input-trade1-model\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"trade1Odometer\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Mileage</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"number\"\n                            placeholder=\"85000\"\n                            {...field}\n                            onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                            data-testid=\"input-trade1-odometer\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"trade1ACV\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>ACV ($)</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"number\"\n                            step=\"0.01\"\n                            placeholder=\"8500\"\n                            {...field}\n                            className=\"font-semibold text-yellow-600\"\n                            data-testid=\"input-trade1-acv\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              </div>\n\n              {/* Trade 2 */}\n              <div className=\"p-4 bg-gradient-to-br from-amber-50 to-yellow-50 rounded-lg border border-amber-200\">\n                <h4 className=\"font-semibold text-amber-700 mb-3\">Trade-in #2 (Optional)</h4>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"col-span-2\">\n                    <FormField\n                      control={form.control}\n                      name=\"trade2Vin\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>VIN</FormLabel>\n                          <FormControl>\n                            <Input\n                              placeholder=\"1HGCM82633A123456\"\n                              maxLength={17}\n                              {...field}\n                              className=\"font-mono\"\n                              data-testid=\"input-trade2-vin\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                  <FormField\n                    control={form.control}\n                    name=\"trade2Year\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Year</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"number\"\n                            min=\"1900\"\n                            max=\"2030\"\n                            {...field}\n                            onChange={(e) => field.onChange(parseInt(e.target.value) || undefined)}\n                            data-testid=\"input-trade2-year\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"trade2Make\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Make</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Honda\" {...field} data-testid=\"input-trade2-make\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"trade2Model\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Model</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Civic\" {...field} data-testid=\"input-trade2-model\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"trade2Odometer\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Mileage</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"number\"\n                            placeholder=\"85000\"\n                            {...field}\n                            onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                            data-testid=\"input-trade2-odometer\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"trade2ACV\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>ACV ($)</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"number\"\n                            step=\"0.01\"\n                            placeholder=\"8500\"\n                            {...field}\n                            className=\"font-semibold text-amber-600\"\n                            data-testid=\"input-trade2-acv\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"bg-gray-50 rounded-lg p-6 border border-gray-200\">\n            <div className=\"flex justify-between items-center\">\n              <p className=\"text-sm text-gray-600\">\n                All changes will be saved to the sales database\n              </p>\n              <div className=\"flex space-x-4\">\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={onSuccess} \n                  data-testid=\"button-cancel-edit-sales\"\n                  className=\"px-6 py-2\"\n                >\n                  Cancel\n                </Button>\n                <Button \n                  type=\"submit\" \n                  disabled={updateMutation.isPending} \n                  data-testid=\"button-save-sales-changes\"\n                  className=\"px-6 py-2 bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700\"\n                >\n                  {updateMutation.isPending ? \"Saving...\" : \"Save Changes\"}\n                </Button>\n              </div>\n            </div>\n          </div>\n        </form>\n      </Form>\n    </div>\n  );\n}","size_bytes":29728},"client/src/components/sales-form.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Search, CheckCircle } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { insertSalesSchema, type InsertSales, type Inventory, type Settings } from \"@shared/schema\";\n\ninterface SalesFormProps {\n  onSuccess: () => void;\n}\n\nexport default function SalesForm({ onSuccess }: SalesFormProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [vinSearch, setVinSearch] = useState(\"\");\n  const [foundVehicle, setFoundVehicle] = useState<Inventory | null>(null);\n\n  // Fetch settings data\n  const { data: settings } = useQuery<Settings>({\n    queryKey: [\"/api/settings\"],\n    queryFn: () => apiRequest(\"/api/settings\"),\n  });\n\n  const form = useForm<InsertSales>({\n    resolver: zodResolver(insertSalesSchema),\n    defaultValues: {\n      dealNumber: \"\",\n      customerNumber: \"\",\n      firstName: \"\",\n      lastName: \"\",\n      zip: \"\",\n      exteriorColor: \"\",\n      newUsed: \"\",\n      stockNumber: \"\",\n      deliveryDate: undefined,\n      deliveryMileage: 0,\n      trade1Vin: \"\",\n      trade1Year: undefined,\n      trade1Make: \"\",\n      trade1Model: \"\",\n      trade1Odometer: 0,\n      trade1ACV: \"0\",\n      trade2Vin: \"\",\n      trade2Year: undefined,\n      trade2Make: \"\",\n      trade2Model: \"\",\n      trade2Odometer: 0,\n      trade2ACV: \"0\",\n      closingManagerNumber: \"\",\n      closingManagerName: \"\",\n      financeManagerNumber: \"\",\n      financeManagerName: \"\",\n      salesmanNumber: \"\",\n      salesmanName: \"\",\n      msrp: \"0\",\n      listPrice: \"0\",\n      salesPrice: \"0\",\n    },\n  });\n\n  const searchVinMutation = useMutation({\n    mutationFn: (vin: string) => apiRequest(`/api/inventory/vin/${vin}`),\n    onSuccess: (vehicle: Inventory) => {\n      setFoundVehicle(vehicle);\n      // Pre-fill form with vehicle data\n      form.setValue(\"stockNumber\", vehicle.stockNumber);\n      form.setValue(\"exteriorColor\", vehicle.color);\n      form.setValue(\"listPrice\", String(vehicle.price));\n      form.setValue(\"msrp\", String(Number(vehicle.price) + 1000)); // Estimate MSRP\n      toast({\n        title: \"Vehicle Found\",\n        description: `${vehicle.year} ${vehicle.make} ${vehicle.model} - Stock #${vehicle.stockNumber}`,\n      });\n    },\n    onError: () => {\n      setFoundVehicle(null);\n      toast({\n        title: \"Search Failed\",\n        description: \"Failed to search for vehicle\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: (data: InsertSales) =>\n      apiRequest(\"/api/sales\", { method: \"POST\", body: data }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/sales\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/stats\"] });\n      toast({\n        title: \"Success\",\n        description: \"Sale recorded successfully!\",\n      });\n      onSuccess();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to record sale\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleVinSearch = () => {\n    if (vinSearch.length === 17) {\n      searchVinMutation.mutate(vinSearch);\n    } else {\n      toast({\n        title: \"Invalid VIN\",\n        description: \"Please enter a valid 17-character VIN\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const onSubmit = (data: InsertSales) => {\n    // Clean up empty trade-in VINs\n    if (!data.trade1Vin) {\n      data.trade1Vin = undefined;\n      data.trade1Year = undefined;\n      data.trade1Make = \"\";\n      data.trade1Model = \"\";\n      data.trade1Odometer = 0;\n      data.trade1ACV = \"0\";\n    }\n    if (!data.trade2Vin) {\n      data.trade2Vin = undefined;\n      data.trade2Year = undefined;\n      data.trade2Make = \"\";\n      data.trade2Model = \"\";\n      data.trade2Odometer = 0;\n      data.trade2ACV = \"0\";\n    }\n    createMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h3 className=\"text-lg font-semibold text-gray-900\">New Sales Entry</h3>\n        <p className=\"text-sm text-gray-600 mt-1\">Record a new vehicle sale</p>\n      </div>\n      \n      {/* VIN Search Section */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-md\">Search Vehicle by VIN</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex-1\">\n              <Input\n                type=\"text\"\n                placeholder=\"Enter VIN to auto-populate vehicle details\"\n                maxLength={17}\n                value={vinSearch}\n                onChange={(e) => {\n                  const value = e.target.value.toUpperCase().replace(/[^A-HJ-NPR-Z0-9]/g, '');\n                  setVinSearch(value);\n                }}\n                data-testid=\"input-vin-search\"\n              />\n            </div>\n            <Button \n              type=\"button\" \n              onClick={handleVinSearch}\n              disabled={searchVinMutation.isPending}\n              data-testid=\"button-search-vin\"\n            >\n              <Search className=\"mr-2\" size={16} />\n              {searchVinMutation.isPending ? \"Searching...\" : \"Search\"}\n            </Button>\n          </div>\n          {foundVehicle && (\n            <div className=\"mt-4 p-3 bg-green-50 border border-green-200 rounded-md\">\n              <p className=\"text-sm text-green-800 flex items-center\">\n                <CheckCircle className=\"mr-2\" size={16} />\n                Vehicle found: {foundVehicle.year} {foundVehicle.make} {foundVehicle.model} {foundVehicle.series} - Stock #{foundVehicle.stockNumber}\n              </p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n      \n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\n          {/* Deal Information */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-md\">Deal Information</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"dealNumber\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Deal Number</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"D2024001\" {...field} data-testid=\"input-deal-number\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"customerNumber\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Customer Number</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"C001234\" {...field} data-testid=\"input-customer-number\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"newUsed\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>New/Used</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-new-used\">\n                            <SelectValue placeholder=\"Select\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"new\">New</SelectItem>\n                          <SelectItem value=\"used\">Used</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Customer Information */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-md\">Customer Information</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"firstName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>First Name</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"John\" {...field} data-testid=\"input-first-name\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"lastName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Last Name</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Williams\" {...field} data-testid=\"input-last-name\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"zip\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>ZIP Code</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"12345\" maxLength={10} {...field} data-testid=\"input-zip\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Vehicle Information */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-md\">Vehicle Information</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"stockNumber\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Stock Number</FormLabel>\n                      <FormControl>\n                        <Input className=\"bg-gray-100\" readOnly {...field} data-testid=\"input-stock-number-sales\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"exteriorColor\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Exterior Color</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-exterior-color\">\n                            <SelectValue placeholder=\"Select Color\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {settings?.colors?.map((color) => (\n                            <SelectItem key={color.code} value={color.name}>\n                              {color.name} ({color.code})\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"msrp\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>MSRP ($)</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"number\"\n                          step=\"0.01\"\n                          placeholder=\"29500\"\n                          {...field}\n                          value={field.value || \"\"}\n                          onChange={(e) => field.onChange(e.target.value)}\n                          data-testid=\"input-msrp\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"listPrice\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>List Price ($)</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"number\"\n                          step=\"0.01\"\n                          placeholder=\"28450\"\n                          {...field}\n                          value={field.value || \"\"}\n                          onChange={(e) => field.onChange(e.target.value)}\n                          data-testid=\"input-list-price\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"salesPrice\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Sales Price ($)</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"number\"\n                          step=\"0.01\"\n                          placeholder=\"27200\"\n                          {...field}\n                          onChange={(e) => field.onChange(e.target.value)}\n                          data-testid=\"input-sales-price\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Delivery Information */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-md\">Delivery Information</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"deliveryDate\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Delivery Date</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"date\"\n                          {...field}\n                          value={field.value ? new Date(field.value).toISOString().split('T')[0] : ''}\n                          onChange={(e) => field.onChange(e.target.value ? new Date(e.target.value) : undefined)}\n                          data-testid=\"input-delivery-date\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"deliveryMileage\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Delivery Mileage</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"number\"\n                          placeholder=\"12450\"\n                          {...field}\n                          onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                          data-testid=\"input-delivery-mileage\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Trade-In Information */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-md\">Trade-In Information</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {/* Trade 1 */}\n              <div>\n                <h5 className=\"text-sm font-medium text-gray-700 mb-3\">Trade Vehicle 1</h5>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"trade1Vin\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>VIN</FormLabel>\n                        <FormControl>\n                          <Input\n                            maxLength={17}\n                            {...field}\n                            onChange={(e) => {\n                              const value = e.target.value.toUpperCase().replace(/[^A-HJ-NPR-Z0-9]/g, '');\n                              field.onChange(value);\n                            }}\n                            data-testid=\"input-trade1-vin\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"trade1Year\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Year</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"number\"\n                            min=\"1900\"\n                            max=\"2030\"\n                            {...field}\n                            onChange={(e) => field.onChange(e.target.value ? parseInt(e.target.value) : undefined)}\n                            data-testid=\"input-trade1-year\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"trade1Make\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Make</FormLabel>\n                        <FormControl>\n                          <Input {...field} data-testid=\"input-trade1-make\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"trade1Model\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Model</FormLabel>\n                        <FormControl>\n                          <Input {...field} data-testid=\"input-trade1-model\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"trade1Odometer\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Odometer</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"number\"\n                            {...field}\n                            onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                            data-testid=\"input-trade1-odometer\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"trade1ACV\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Actual Cash Value ($)</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"number\"\n                            step=\"0.01\"\n                            {...field}\n                            value={field.value || \"\"}\n                            onChange={(e) => field.onChange(e.target.value)}\n                            data-testid=\"input-trade1-acv\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              </div>\n\n              {/* Trade 2 */}\n              <div>\n                <h5 className=\"text-sm font-medium text-gray-700 mb-3\">Trade Vehicle 2 (Optional)</h5>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"trade2Vin\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>VIN</FormLabel>\n                        <FormControl>\n                          <Input\n                            maxLength={17}\n                            {...field}\n                            onChange={(e) => {\n                              const value = e.target.value.toUpperCase().replace(/[^A-HJ-NPR-Z0-9]/g, '');\n                              field.onChange(value);\n                            }}\n                            data-testid=\"input-trade2-vin\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"trade2Year\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Year</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"number\"\n                            min=\"1900\"\n                            max=\"2030\"\n                            {...field}\n                            onChange={(e) => field.onChange(e.target.value ? parseInt(e.target.value) : undefined)}\n                            data-testid=\"input-trade2-year\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"trade2Make\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Make</FormLabel>\n                        <FormControl>\n                          <Input {...field} data-testid=\"input-trade2-make\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"trade2Model\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Model</FormLabel>\n                        <FormControl>\n                          <Input {...field} data-testid=\"input-trade2-model\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"trade2Odometer\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Odometer</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"number\"\n                            {...field}\n                            onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                            data-testid=\"input-trade2-odometer\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"trade2ACV\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Actual Cash Value ($)</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"number\"\n                            step=\"0.01\"\n                            {...field}\n                            value={field.value || \"\"}\n                            onChange={(e) => field.onChange(e.target.value)}\n                            data-testid=\"input-trade2-acv\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Manager Information */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-md\">Manager Information</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"closingManagerNumber\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Closing Manager Number</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"CM001\" {...field} data-testid=\"input-closing-manager-number\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"closingManagerName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Closing Manager Name</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Robert Johnson\" {...field} data-testid=\"input-closing-manager-name\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"financeManagerNumber\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Finance Manager Number</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"FM001\" {...field} data-testid=\"input-finance-manager-number\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"financeManagerName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Finance Manager Name</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Sarah Williams\" {...field} data-testid=\"input-finance-manager-name\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"salesmanNumber\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Salesman Number</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"SM001\" {...field} data-testid=\"input-salesman-number\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"salesmanName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Salesman Name</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Mike Johnson\" {...field} data-testid=\"input-salesman-name\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n            </CardContent>\n          </Card>\n          \n          <div className=\"flex justify-end space-x-4 pt-6 border-t border-gray-200\">\n            <Button type=\"button\" variant=\"outline\" onClick={onSuccess} data-testid=\"button-cancel-sales\">\n              Cancel\n            </Button>\n            <Button type=\"submit\" disabled={createMutation.isPending} data-testid=\"button-submit-sales\">\n              {createMutation.isPending ? \"Recording...\" : \"Record Sale\"}\n            </Button>\n          </div>\n        </form>\n      </Form>\n    </div>\n  );\n}\n","size_bytes":30565},"client/src/components/sales-table.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Eye, Edit } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Sales } from \"@shared/schema\";\nimport SalesEditForm from \"@/components/sales-edit-form\";\n\ninterface SalesTableProps {\n  sales: Sales[];\n  isLoading: boolean;\n  visibleColumns: Record<string, boolean>;\n}\n\n\nfunction SaleViewDialog({ sale }: { sale: Sales }) {\n  const discount = sale.msrp && sale.salesPrice ? (Number(sale.msrp) - Number(sale.salesPrice)) : 0;\n  const discountPercent = sale.msrp && discount > 0 ? ((discount / Number(sale.msrp)) * 100).toFixed(1) : '0.0';\n  \n  return (\n    <DialogContent className=\"max-w-6xl max-h-[90vh] overflow-y-auto\">\n      <DialogHeader className=\"pb-6 border-b border-gray-200\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <DialogTitle className=\"text-2xl font-bold text-gray-900\">\n              Sale #{sale.dealNumber}\n            </DialogTitle>\n            <p className=\"text-lg text-gray-600 mt-1\">{sale.firstName} {sale.lastName} • Stock #{sale.stockNumber}</p>\n          </div>\n          <div className=\"text-right\">\n            <p className=\"text-3xl font-bold text-green-600\">${Number(sale.salesPrice).toLocaleString()}</p>\n            <p className=\"text-sm text-gray-500\">Final Sale Price</p>\n            {discount > 0 && (\n              <p className=\"text-xs text-red-500 mt-1\">-${discount.toLocaleString()} ({discountPercent}% off MSRP)</p>\n            )}\n          </div>\n        </div>\n      </DialogHeader>\n      \n      <div className=\"space-y-8 pt-6\">\n        {/* Customer Information */}\n        <div className=\"bg-white rounded-lg p-6 shadow-sm border\">\n          <h3 className=\"text-xl font-semibold text-gray-900 mb-4\">Customer Information</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            <div className=\"p-4 rounded-lg border\">\n              <p className=\"text-sm font-medium text-gray-600 mb-1\">Customer</p>\n              <p className=\"text-xl font-bold text-gray-900\">{sale.firstName} {sale.lastName}</p>\n              <p className=\"text-xs text-gray-500 mt-1\">#{sale.customerNumber || 'N/A'}</p>\n            </div>\n            <div className=\"p-4 rounded-lg border\">\n              <p className=\"text-sm font-medium text-gray-600 mb-1\">ZIP Code</p>\n              <p className=\"text-xl font-bold text-gray-900\">{sale.zip || 'Not provided'}</p>\n            </div>\n            <div className=\"p-4 rounded-lg border\">\n              <p className=\"text-sm font-medium text-gray-600 mb-1\">Vehicle Type</p>\n              <p className=\"text-xl font-bold text-gray-900\">{sale.newUsed}</p>\n            </div>\n            <div className=\"p-4 rounded-lg border\">\n              <p className=\"text-sm font-medium text-gray-600 mb-1\">Exterior Color</p>\n              <p className=\"text-xl font-bold text-gray-900\">{sale.exteriorColor || 'Not specified'}</p>\n            </div>\n          </div>\n        </div>\n\n        {/* Vehicle & Delivery Details */}\n        <div className=\"bg-white rounded-lg p-6 shadow-sm border\">\n          <h3 className=\"text-xl font-semibold text-gray-900 mb-4\">Vehicle & Delivery</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <div className=\"text-center p-4 rounded-lg border\">\n              <p className=\"text-2xl font-bold text-gray-900\">#{sale.stockNumber}</p>\n              <p className=\"text-sm text-gray-600\">Stock Number</p>\n            </div>\n            <div className=\"text-center p-4 rounded-lg border\">\n              <p className=\"text-2xl font-bold text-gray-900\">\n                {sale.deliveryDate ? new Date(sale.deliveryDate).toLocaleDateString('en-US', { \n                  month: 'short', day: 'numeric', year: 'numeric' \n                }) : 'Not set'}\n              </p>\n              <p className=\"text-sm text-gray-600\">Delivery Date</p>\n            </div>\n            <div className=\"text-center p-4 rounded-lg border\">\n              <p className=\"text-2xl font-bold text-gray-900\">{sale.deliveryMileage ? sale.deliveryMileage.toLocaleString() : 'N/A'}</p>\n              <p className=\"text-sm text-gray-600\">Delivery Miles</p>\n            </div>\n          </div>\n        </div>\n        \n        {/* Pricing Breakdown */}\n        <div className=\"bg-white rounded-lg p-6 shadow-sm border\">\n          <h3 className=\"text-xl font-semibold text-gray-900 mb-4\">Pricing Details</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div className=\"p-4 rounded-lg border\">\n              <p className=\"text-sm font-medium text-gray-600 mb-1\">MSRP</p>\n              <p className=\"text-2xl font-bold text-gray-900\">${sale.msrp ? Number(sale.msrp).toLocaleString() : 'N/A'}</p>\n            </div>\n            <div className=\"p-4 rounded-lg border\">\n              <p className=\"text-sm font-medium text-gray-600 mb-1\">List Price</p>\n              <p className=\"text-2xl font-bold text-gray-900\">${sale.listPrice ? Number(sale.listPrice).toLocaleString() : 'N/A'}</p>\n            </div>\n            <div className=\"p-4 rounded-lg border\">\n              <p className=\"text-sm font-medium text-gray-600 mb-1\">Final Sale Price</p>\n              <p className=\"text-2xl font-bold text-gray-900\">${Number(sale.salesPrice).toLocaleString()}</p>\n              {discount > 0 && (\n                <p className=\"text-xs text-gray-500 mt-1\">Saved ${discount.toLocaleString()}</p>\n              )}\n            </div>\n          </div>\n        </div>\n\n        {/* Trade-in Information */}\n        {(sale.trade1Vin || sale.trade2Vin) && (\n          <div className=\"bg-white rounded-lg p-6 shadow-sm border\">\n            <h3 className=\"text-xl font-semibold text-gray-900 mb-4\">Trade-in Vehicles</h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              {sale.trade1Vin && (\n                <div className=\"p-4 rounded-lg border\">\n                  <h4 className=\"font-semibold text-gray-900 mb-3\">Trade-in #1</h4>\n                  <div className=\"space-y-2\">\n                    <p><span className=\"text-sm text-gray-600\">VIN:</span> <span className=\"font-mono text-sm\">{sale.trade1Vin}</span></p>\n                    <p><span className=\"text-sm text-gray-600\">Vehicle:</span> <span className=\"font-medium\">{sale.trade1Year} {sale.trade1Make} {sale.trade1Model}</span></p>\n                    <p><span className=\"text-sm text-gray-600\">Mileage:</span> <span className=\"font-medium\">{sale.trade1Odometer ? sale.trade1Odometer.toLocaleString() : 'N/A'} miles</span></p>\n                    <p><span className=\"text-sm text-gray-600\">ACV:</span> <span className=\"font-bold text-gray-900\">${sale.trade1ACV ? Number(sale.trade1ACV).toLocaleString() : 'N/A'}</span></p>\n                  </div>\n                </div>\n              )}\n              {sale.trade2Vin && (\n                <div className=\"p-4 rounded-lg border\">\n                  <h4 className=\"font-semibold text-gray-900 mb-3\">Trade-in #2</h4>\n                  <div className=\"space-y-2\">\n                    <p><span className=\"text-sm text-gray-600\">VIN:</span> <span className=\"font-mono text-sm\">{sale.trade2Vin}</span></p>\n                    <p><span className=\"text-sm text-gray-600\">Vehicle:</span> <span className=\"font-medium\">{sale.trade2Year} {sale.trade2Make} {sale.trade2Model}</span></p>\n                    <p><span className=\"text-sm text-gray-600\">Mileage:</span> <span className=\"font-medium\">{sale.trade2Odometer ? sale.trade2Odometer.toLocaleString() : 'N/A'} miles</span></p>\n                    <p><span className=\"text-sm text-gray-600\">ACV:</span> <span className=\"font-bold text-gray-900\">${sale.trade2ACV ? Number(sale.trade2ACV).toLocaleString() : 'N/A'}</span></p>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n        \n        {/* Staff Information */}\n        <div className=\"bg-white rounded-lg p-6 shadow-sm border\">\n          <h3 className=\"text-xl font-semibold text-gray-900 mb-4\">Staff Team</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div className=\"p-4 rounded-lg border text-center\">\n              <p className=\"text-sm font-medium text-gray-600 mb-2\">Closing Manager</p>\n              <p className=\"text-lg font-bold text-gray-900\">{sale.closingManagerName || 'Not assigned'}</p>\n              <p className=\"text-xs text-gray-500\">#{sale.closingManagerNumber || 'N/A'}</p>\n            </div>\n            <div className=\"p-4 rounded-lg border text-center\">\n              <p className=\"text-sm font-medium text-gray-600 mb-2\">Finance Manager</p>\n              <p className=\"text-lg font-bold text-gray-900\">{sale.financeManagerName || 'Not assigned'}</p>\n              <p className=\"text-xs text-gray-500\">#{sale.financeManagerNumber || 'N/A'}</p>\n            </div>\n            <div className=\"p-4 rounded-lg border text-center\">\n              <p className=\"text-sm font-medium text-gray-600 mb-2\">Salesperson</p>\n              <p className=\"text-lg font-bold text-gray-900\">{sale.salesmanName || 'Not assigned'}</p>\n              <p className=\"text-xs text-gray-500\">#{sale.salesmanNumber || 'N/A'}</p>\n            </div>\n          </div>\n        </div>\n        \n        {/* Record Information */}\n        <div className=\"bg-gray-50 rounded-lg p-4 border\">\n          <div className=\"flex items-center text-gray-600\">\n            <div className=\"w-2 h-2 bg-gray-400 rounded-full mr-2\"></div>\n            <span className=\"text-sm\">Sale recorded: </span>\n            <span className=\"font-medium ml-1\">{sale.createdAt ? new Date(sale.createdAt).toLocaleDateString('en-US', { \n              year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit'\n            }) : 'Date not available'}</span>\n          </div>\n        </div>\n      </div>\n    </DialogContent>\n  );\n}\n\nexport default function SalesTable({ sales, isLoading, visibleColumns }: SalesTableProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [editingSale, setEditingSale] = useState<Sales | null>(null);\n\n\n  if (isLoading) {\n    return (\n      <Card>\n        <div className=\"p-8 text-center\">\n          <p className=\"text-gray-500\">Loading sales records...</p>\n        </div>\n      </Card>\n    );\n  }\n\n  if (sales.length === 0) {\n    return (\n      <Card>\n        <div className=\"p-8 text-center\">\n          <p className=\"text-gray-500\">No sales records found</p>\n        </div>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"overflow-hidden\">\n      <div className=\"overflow-x-auto\">\n        <Table>\n          <TableHeader>\n            <TableRow className=\"bg-gray-50\">\n              {visibleColumns.dealNumber && <TableHead>Deal #</TableHead>}\n              {visibleColumns.customer && <TableHead>Customer</TableHead>}\n              {visibleColumns.vehicle && <TableHead>Vehicle</TableHead>}\n              {visibleColumns.salesPrice && <TableHead>Sale Price</TableHead>}\n              {visibleColumns.deliveryDate && <TableHead>Delivery Date</TableHead>}\n              {visibleColumns.salesman && <TableHead>Salesman</TableHead>}\n              {visibleColumns.actions && <TableHead>Actions</TableHead>}\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {sales.map((sale) => (\n              <TableRow key={sale.id} className=\"hover:bg-gray-50\" data-testid={`row-sale-${sale.id}`}>\n                {visibleColumns.dealNumber && (\n                  <TableCell className=\"font-medium text-primary\" data-testid={`text-deal-${sale.id}`}>\n                    {sale.dealNumber}\n                  </TableCell>\n                )}\n                {visibleColumns.customer && (\n                  <TableCell>\n                    <div>\n                      <div className=\"font-medium text-gray-900\" data-testid={`text-customer-${sale.id}`}>\n                        {sale.firstName} {sale.lastName}\n                      </div>\n                      {sale.customerNumber && (\n                        <div className=\"text-sm text-gray-500\">{sale.customerNumber}</div>\n                      )}\n                    </div>\n                  </TableCell>\n                )}\n                {visibleColumns.vehicle && (\n                  <TableCell>\n                    <div>\n                      <div className=\"font-medium text-gray-900\" data-testid={`text-stock-${sale.id}`}>\n                        Stock #{sale.stockNumber}\n                      </div>\n                      <div className=\"text-sm text-gray-500\">\n                        {sale.newUsed} • {sale.exteriorColor}\n                      </div>\n                    </div>\n                  </TableCell>\n                )}\n                {visibleColumns.salesPrice && (\n                  <TableCell className=\"font-medium text-gray-900\" data-testid={`text-price-${sale.id}`}>\n                    ${Number(sale.salesPrice).toLocaleString()}\n                  </TableCell>\n                )}\n                {visibleColumns.deliveryDate && (\n                  <TableCell className=\"text-gray-600\" data-testid={`text-delivery-${sale.id}`}>\n                    {sale.deliveryDate ? new Date(sale.deliveryDate).toLocaleDateString() : 'Not set'}\n                  </TableCell>\n                )}\n                {visibleColumns.salesman && (\n                  <TableCell className=\"text-gray-600\" data-testid={`text-salesman-${sale.id}`}>\n                    {sale.salesmanName || 'Not assigned'}\n                  </TableCell>\n                )}\n                {visibleColumns.actions && (\n                  <TableCell>\n                    <div className=\"flex items-center space-x-2\">\n                      <Dialog>\n                        <DialogTrigger asChild>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"text-primary hover:text-blue-700\"\n                            data-testid={`button-view-${sale.id}`}\n                          >\n                            <Eye size={16} />\n                          </Button>\n                        </DialogTrigger>\n                        <SaleViewDialog sale={sale} />\n                      </Dialog>\n                      <Dialog open={editingSale?.id === sale.id} onOpenChange={(open) => !open && setEditingSale(null)}>\n                        <DialogTrigger asChild>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"text-primary hover:text-blue-700\"\n                            onClick={() => setEditingSale(sale)}\n                            data-testid={`button-edit-sale-${sale.id}`}\n                          >\n                            <Edit size={16} />\n                          </Button>\n                        </DialogTrigger>\n                        <DialogContent className=\"max-w-6xl max-h-[90vh] overflow-y-auto\">\n                          {editingSale && (\n                            <SalesEditForm \n                              sale={editingSale} \n                              onSuccess={() => setEditingSale(null)} \n                            />\n                          )}\n                        </DialogContent>\n                      </Dialog>\n                    </div>\n                  </TableCell>\n                )}\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </div>\n    </Card>\n  );\n}\n","size_bytes":15912},"client/src/components/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport {\n  Car,\n  BarChart3,\n  Receipt,\n  ChartBar,\n  Settings,\n  LogOut,\n  User,\n} from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { Button } from \"@/components/ui/button\";\n\nconst navigation = [\n  { name: \"Dashboard\", href: \"/dashboard\", icon: BarChart3 },\n  { name: \"Car Inventory\", href: \"/inventory\", icon: Car },\n  { name: \"Sales Log\", href: \"/sales\", icon: Receipt },\n  { name: \"Reports\", href: \"/reports\", icon: ChartBar },\n  { name: \"Settings\", href: \"/settings\", icon: Settings },\n];\n\nexport default function Sidebar() {\n  const [location] = useLocation();\n  const { user, logout } = useAuth();\n\n  const handleLogout = () => {\n    logout();\n  };\n\n  return (\n    <div className=\"w-64 bg-white shadow-sm border-r border-gray-200\">\n      <div className=\"flex items-center px-6 py-4 border-b border-gray-200\">\n        <Car className=\"text-primary text-2xl mr-3\" />\n        <h1 className=\"text-xl font-semibold text-gray-900\">DealerPro</h1>\n      </div>\n\n      <nav className=\"mt-6\">\n        <div className=\"px-3\">\n          {navigation.map((item) => {\n            const isActive =\n              location === item.href ||\n              (location === \"/\" && item.href === \"/dashboard\");\n            const Icon = item.icon;\n\n            return (\n              <Link\n                key={item.name}\n                href={item.href}\n                data-testid={`nav-${item.name.toLowerCase().replace(\" \", \"-\")}`}\n              >\n                <button\n                  className={cn(\n                    \"w-full flex items-center px-3 py-2 text-sm font-medium rounded-md mb-1 transition-colors\",\n                    isActive\n                      ? \"text-primary bg-blue-50\"\n                      : \"text-gray-600 hover:text-gray-900 hover:bg-gray-50\",\n                  )}\n                >\n                  <Icon className=\"mr-3\" size={18} />\n                  {item.name}\n                </button>\n              </Link>\n            );\n          })}\n        </div>\n      </nav>\n\n      <div className=\"absolute bottom-0 z-50 left-0 right-0 p-4 border-t border-gray-200 bg-white\">\n        <div className=\"flex items-center\">\n          <div className=\"h-8 w-8 rounded-full bg-blue-500 flex items-center justify-center\">\n            <User className=\"text-white\" size={16} />\n          </div>\n          <div className=\"ml-2 flex-1\">\n            <p\n              className=\"text-sm font-medium text-gray-700\"\n              data-testid=\"text-username\"\n            >\n              {user?.username || \"User\"}\n            </p>\n            <p\n              className=\"text-xs text-gray-500 capitalize\"\n              data-testid=\"text-role\"\n            >\n              {user?.userType || \"employee\"}\n            </p>\n          </div>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={handleLogout}\n            className=\"ml-auto p-1 text-gray-400 hover:text-gray-500\"\n            data-testid=\"button-logout\"\n          >\n            <LogOut size={16} />\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3160},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const errorText = await res.text();\n    let errorMessage;\n    try {\n      const errorData = JSON.parse(errorText);\n      errorMessage = errorData.message || errorText || res.statusText;\n    } catch {\n      errorMessage = errorText || res.statusText;\n    }\n    throw new Error(`${res.status}: ${errorMessage}`);\n  }\n}\n\ninterface ApiRequestOptions {\n  method?: string;\n  body?: unknown;\n  headers?: Record<string, string>;\n}\n\nexport async function apiRequest(\n  url: string,\n  options: ApiRequestOptions = {}\n): Promise<any> {\n  const { method = \"GET\", body, headers = {} } = options;\n  \n  // Get token from localStorage\n  const token = localStorage.getItem(\"auth_token\");\n  \n  const requestHeaders: Record<string, string> = {\n    ...headers,\n  };\n  \n  if (body) {\n    requestHeaders[\"Content-Type\"] = \"application/json\";\n  }\n  \n  if (token) {\n    requestHeaders[\"Authorization\"] = `Bearer ${token}`;\n  }\n\n  const res = await fetch(url, {\n    method,\n    headers: requestHeaders,\n    body: body ? JSON.stringify(body) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res.json();\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const token = localStorage.getItem(\"auth_token\");\n    const headers: Record<string, string> = {};\n    \n    if (token) {\n      headers[\"Authorization\"] = `Bearer ${token}`;\n    }\n\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      headers,\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":2231},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Car, Handshake, DollarSign, Clock } from \"lucide-react\";\n\ninterface Stats {\n  totalInventory: number;\n  salesThisMonth: number;\n  revenue: number;\n  avgDaysInLot: number;\n}\n\nexport default function Dashboard() {\n  const { data: stats, isLoading } = useQuery<Stats>({\n    queryKey: [\"/api/stats\"],\n  });\n\n  return (\n    <>\n      {/* Header */}\n      <header className=\"bg-white shadow-sm border-b border-gray-200\">\n        <div className=\"flex items-center justify-between px-6 py-4\">\n          <div>\n            <h2 className=\"text-2xl font-semibold text-gray-900\">Dashboard</h2>\n            <p className=\"text-sm text-gray-600 mt-1\">Overview of your dealership operations</p>\n          </div>\n          <div className=\"flex items-center\">\n            <div className=\"h-8 w-8 rounded-full bg-gray-300 flex items-center justify-center\">\n              <span className=\"text-sm font-medium text-gray-600\">JS</span>\n            </div>\n            <span className=\"ml-2 text-sm font-medium text-gray-700\">John Smith</span>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <main className=\"flex-1 overflow-y-auto bg-gray-50\">\n        <div className=\"p-6\">\n          {/* Stats Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"flex-shrink-0\">\n                    <Car className=\"text-2xl text-primary\" />\n                  </div>\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-600\">Total Inventory</p>\n                    <p className=\"text-2xl font-semibold text-gray-900\" data-testid=\"stat-total-inventory\">\n                      {isLoading ? \"...\" : stats?.totalInventory || 0}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"flex-shrink-0\">\n                    <Handshake className=\"text-2xl text-accent\" />\n                  </div>\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-600\">Sales This Month</p>\n                    <p className=\"text-2xl font-semibold text-gray-900\" data-testid=\"stat-sales-month\">\n                      {isLoading ? \"...\" : stats?.salesThisMonth || 0}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"flex-shrink-0\">\n                    <DollarSign className=\"text-2xl text-yellow-600\" />\n                  </div>\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-600\">Revenue</p>\n                    <p className=\"text-2xl font-semibold text-gray-900\" data-testid=\"stat-revenue\">\n                      {isLoading ? \"...\" : `$${(stats?.revenue || 0).toLocaleString()}`}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"flex-shrink-0\">\n                    <Clock className=\"text-2xl text-orange-600\" />\n                  </div>\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-600\">Avg. Days in Lot</p>\n                    <p className=\"text-2xl font-semibold text-gray-900\" data-testid=\"stat-avg-days\">\n                      {isLoading ? \"...\" : stats?.avgDaysInLot || 0}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Recent Activities */}\n          <Card>\n            <div className=\"px-6 py-4 border-b border-gray-200\">\n              <h3 className=\"text-lg font-semibold text-gray-900\">Welcome to DealerPro</h3>\n            </div>\n            <CardContent className=\"p-6\">\n              <div className=\"text-center py-8\">\n                <Car className=\"mx-auto h-12 w-12 text-gray-400\" />\n                <h3 className=\"mt-2 text-sm font-medium text-gray-900\">Get Started</h3>\n                <p className=\"mt-1 text-sm text-gray-500\">\n                  Start by adding vehicles to your inventory or recording sales.\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n    </>\n  );\n}\n","size_bytes":4963},"client/src/pages/inventory.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogTrigger, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Plus, Download, Search } from \"lucide-react\";\nimport type { Inventory } from \"@shared/schema\";\nimport InventoryForm from \"@/components/inventory-form\";\nimport InventoryTable from \"@/components/inventory-table\";\nimport ColumnVisibilityDropdown, { type ColumnDefinition } from \"@/components/column-visibility-dropdown\";\n\nconst INVENTORY_COLUMNS: ColumnDefinition[] = [\n  { key: \"stockNumber\", label: \"Stock #\", defaultVisible: true },\n  { key: \"vin\", label: \"VIN\", defaultVisible: true },\n  { key: \"vehicle\", label: \"Vehicle\", defaultVisible: true },\n  { key: \"color\", label: \"Color\", defaultVisible: true },\n  { key: \"price\", label: \"Price\", defaultVisible: true },\n  { key: \"odometer\", label: \"Odometer\", defaultVisible: true },\n  { key: \"age\", label: \"Age\", defaultVisible: true },\n  { key: \"actions\", label: \"Actions\", defaultVisible: true },\n];\n\nexport default function Inventory() {\n  const [isFormOpen, setIsFormOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedMake, setSelectedMake] = useState(\"\");\n\n  // Column visibility state\n  const [visibleColumns, setVisibleColumns] = useState<Record<string, boolean>>(() => {\n    const initial: Record<string, boolean> = {};\n    INVENTORY_COLUMNS.forEach(col => {\n      initial[col.key] = col.defaultVisible;\n    });\n    return initial;\n  });\n\n  const handleVisibilityChange = (key: string, visible: boolean) => {\n    setVisibleColumns(prev => ({ ...prev, [key]: visible }));\n  };\n\n  const handleHideAll = () => {\n    const hidden: Record<string, boolean> = {};\n    INVENTORY_COLUMNS.forEach(col => {\n      hidden[col.key] = false;\n    });\n    setVisibleColumns(hidden);\n  };\n\n  const handleResetToDefault = () => {\n    const defaults: Record<string, boolean> = {};\n    INVENTORY_COLUMNS.forEach(col => {\n      defaults[col.key] = col.defaultVisible;\n    });\n    setVisibleColumns(defaults);\n  };\n\n  const { data: inventory = [], isLoading } = useQuery<Inventory[]>({\n    queryKey: [\"/api/inventory\"],\n  });\n\n  const filteredInventory = inventory.filter((item) => {\n    const matchesSearch = !searchQuery || \n      item.vin.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      item.make.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      item.model.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      item.stockNumber.toLowerCase().includes(searchQuery.toLowerCase());\n    \n    const matchesMake = !selectedMake || selectedMake === \"all\" || item.make === selectedMake;\n    \n    return matchesSearch && matchesMake;\n  });\n\n  const uniqueMakes = Array.from(new Set(inventory.map(item => item.make))).sort();\n\n  return (\n    <>\n      {/* Header */}\n      <header className=\"bg-white shadow-sm border-b border-gray-200\">\n        <div className=\"flex items-center justify-between px-6 py-4\">\n          <div>\n            <h2 className=\"text-2xl font-semibold text-gray-900\">Car Inventory</h2>\n            <p className=\"text-sm text-gray-600 mt-1\">Manage your vehicle inventory</p>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <main className=\"flex-1 overflow-y-auto bg-gray-50\">\n        <div className=\"p-6\">\n          {/* Inventory Header Actions */}\n          <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between mb-6\">\n            <div className=\"mb-4 lg:mb-0\">\n              <div className=\"flex items-center space-x-4\">\n                <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>\n                  <DialogTrigger asChild>\n                    <Button data-testid=\"button-add-vehicle\">\n                      <Plus className=\"mr-2\" size={16} />\n                      Add Vehicle\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n                    <DialogTitle className=\"sr-only\">Add New Vehicle to Inventory</DialogTitle>\n                    <DialogDescription className=\"sr-only\">Enter vehicle details to add to inventory</DialogDescription>\n                    <InventoryForm onSuccess={() => setIsFormOpen(false)} />\n                  </DialogContent>\n                </Dialog>\n                <Button variant=\"outline\" data-testid=\"button-export\">\n                  <Download className=\"mr-2\" size={16} />\n                  Export\n                </Button>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"relative\">\n                <Input\n                  type=\"text\"\n                  placeholder=\"Search by VIN, Make, Model...\"\n                  className=\"pl-10 w-80\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  data-testid=\"input-search-inventory\"\n                />\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={16} />\n              </div>\n              <Select value={selectedMake} onValueChange={setSelectedMake}>\n                <SelectTrigger className=\"w-40\" data-testid=\"select-make-filter\">\n                  <SelectValue placeholder=\"All Makes\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Makes</SelectItem>\n                  {uniqueMakes.map((make) => (\n                    <SelectItem key={make} value={make}>{make}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <ColumnVisibilityDropdown\n                columns={INVENTORY_COLUMNS}\n                visibleColumns={visibleColumns}\n                onVisibilityChange={handleVisibilityChange}\n                onHideAll={handleHideAll}\n                onResetToDefault={handleResetToDefault}\n              />\n            </div>\n          </div>\n\n          {/* Inventory Table */}\n          <InventoryTable \n            inventory={filteredInventory} \n            isLoading={isLoading}\n            visibleColumns={visibleColumns}\n          />\n        </div>\n      </main>\n    </>\n  );\n}\n","size_bytes":6492},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/reports.tsx":{"content":"import { BarChart3 } from \"lucide-react\";\n\nexport default function Reports() {\n  return (\n    <>\n      {/* Header */}\n      <header className=\"bg-white shadow-sm border-b border-gray-200\">\n        <div className=\"flex items-center justify-between px-6 py-4\">\n          <div>\n            <h2 className=\"text-2xl font-semibold text-gray-900\">Reports</h2>\n            <p className=\"text-sm text-gray-600 mt-1\">View comprehensive business reports</p>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <main className=\"flex-1 overflow-y-auto bg-gray-50\">\n        <div className=\"p-6\">\n          <div className=\"text-center py-12\">\n            <BarChart3 className=\"mx-auto h-16 w-16 text-gray-300 mb-4\" />\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Reports Coming Soon</h3>\n            <p className=\"text-gray-600\">Comprehensive reporting features will be available here.</p>\n          </div>\n        </div>\n      </main>\n    </>\n  );\n}\n","size_bytes":988},"client/src/pages/sales.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Dialog, DialogContent, DialogTrigger, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Plus, Download, Search } from \"lucide-react\";\nimport type { Sales } from \"@shared/schema\";\nimport SalesForm from \"@/components/sales-form\";\nimport SalesTable from \"@/components/sales-table\";\nimport ColumnVisibilityDropdown, { type ColumnDefinition } from \"@/components/column-visibility-dropdown\";\n\nconst SALES_COLUMNS: ColumnDefinition[] = [\n  { key: \"dealNumber\", label: \"Deal #\", defaultVisible: true },\n  { key: \"customer\", label: \"Customer\", defaultVisible: true },\n  { key: \"vehicle\", label: \"Vehicle\", defaultVisible: true },\n  { key: \"salesPrice\", label: \"Sale Price\", defaultVisible: true },\n  { key: \"deliveryDate\", label: \"Delivery Date\", defaultVisible: true },\n  { key: \"salesman\", label: \"Salesman\", defaultVisible: true },\n  { key: \"actions\", label: \"Actions\", defaultVisible: true },\n];\n\nexport default function Sales() {\n  const [isFormOpen, setIsFormOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  // Column visibility state\n  const [visibleColumns, setVisibleColumns] = useState<Record<string, boolean>>(() => {\n    const initial: Record<string, boolean> = {};\n    SALES_COLUMNS.forEach(col => {\n      initial[col.key] = col.defaultVisible;\n    });\n    return initial;\n  });\n\n  const handleVisibilityChange = (key: string, visible: boolean) => {\n    setVisibleColumns(prev => ({ ...prev, [key]: visible }));\n  };\n\n  const handleHideAll = () => {\n    const hidden: Record<string, boolean> = {};\n    SALES_COLUMNS.forEach(col => {\n      hidden[col.key] = false;\n    });\n    setVisibleColumns(hidden);\n  };\n\n  const handleResetToDefault = () => {\n    const defaults: Record<string, boolean> = {};\n    SALES_COLUMNS.forEach(col => {\n      defaults[col.key] = col.defaultVisible;\n    });\n    setVisibleColumns(defaults);\n  };\n\n  const { data: sales = [], isLoading } = useQuery<Sales[]>({\n    queryKey: [\"/api/sales\"],\n  });\n\n  const filteredSales = sales.filter((item) => {\n    const matchesSearch = !searchQuery || \n      item.dealNumber.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      item.firstName.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      item.lastName.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      (item.customerNumber && item.customerNumber.toLowerCase().includes(searchQuery.toLowerCase()));\n    \n    return matchesSearch;\n  });\n\n  return (\n    <>\n      {/* Header */}\n      <header className=\"bg-white shadow-sm border-b border-gray-200\">\n        <div className=\"flex items-center justify-between px-6 py-4\">\n          <div>\n            <h2 className=\"text-2xl font-semibold text-gray-900\">Sales Log</h2>\n            <p className=\"text-sm text-gray-600 mt-1\">Track vehicle sales and customer information</p>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <main className=\"flex-1 overflow-y-auto bg-gray-50\">\n        <div className=\"p-6\">\n          {/* Sales Header Actions */}\n          <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between mb-6\">\n            <div className=\"mb-4 lg:mb-0\">\n              <div className=\"flex items-center space-x-4\">\n                <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>\n                  <DialogTrigger asChild>\n                    <Button data-testid=\"button-new-sale\">\n                      <Plus className=\"mr-2\" size={16} />\n                      New Sale\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent className=\"max-w-6xl max-h-[90vh] overflow-y-auto\">\n                    <DialogTitle className=\"sr-only\">Record New Sale</DialogTitle>\n                    <DialogDescription className=\"sr-only\">Enter sale details and customer information</DialogDescription>\n                    <SalesForm onSuccess={() => setIsFormOpen(false)} />\n                  </DialogContent>\n                </Dialog>\n                <Button variant=\"outline\" data-testid=\"button-export-sales\">\n                  <Download className=\"mr-2\" size={16} />\n                  Export Sales\n                </Button>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"relative\">\n                <Input\n                  type=\"text\"\n                  placeholder=\"Search by deal number, customer...\"\n                  className=\"pl-10 w-80\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  data-testid=\"input-search-sales\"\n                />\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={16} />\n              </div>\n              <ColumnVisibilityDropdown\n                columns={SALES_COLUMNS}\n                visibleColumns={visibleColumns}\n                onVisibilityChange={handleVisibilityChange}\n                onHideAll={handleHideAll}\n                onResetToDefault={handleResetToDefault}\n              />\n            </div>\n          </div>\n\n          {/* Sales Table */}\n          <SalesTable \n            sales={filteredSales} \n            isLoading={isLoading}\n            visibleColumns={visibleColumns}\n          />\n        </div>\n      </main>\n    </>\n  );\n}\n","size_bytes":5525},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/column-visibility-dropdown.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Separator } from \"@/components/ui/separator\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Eye, Search } from \"lucide-react\";\n\nexport interface ColumnDefinition {\n  key: string;\n  label: string;\n  defaultVisible: boolean;\n}\n\ninterface ColumnVisibilityDropdownProps {\n  columns: ColumnDefinition[];\n  visibleColumns: Record<string, boolean>;\n  onVisibilityChange: (key: string, visible: boolean) => void;\n  onHideAll: () => void;\n  onResetToDefault: () => void;\n}\n\nexport default function ColumnVisibilityDropdown({\n  columns,\n  visibleColumns,\n  onVisibilityChange,\n  onHideAll,\n  onResetToDefault,\n}: ColumnVisibilityDropdownProps) {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [isOpen, setIsOpen] = useState(false);\n\n  const filteredColumns = columns.filter((column) =>\n    column.label.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const visibleCount = Object.values(visibleColumns).filter(Boolean).length;\n\n  return (\n    <DropdownMenu open={isOpen} onOpenChange={setIsOpen}>\n      <DropdownMenuTrigger asChild>\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          className=\"flex items-center space-x-2\"\n          data-testid=\"button-columns\"\n        >\n          <Eye size={16} />\n          <span>Columns ({visibleCount})</span>\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent\n        align=\"end\"\n        className=\"w-64 p-0\"\n        data-testid=\"dropdown-columns\"\n      >\n        <Card className=\"border-0 shadow-none\">\n          <div className=\"p-4 space-y-4\">\n            {/* Search Bar */}\n            <div className=\"relative\">\n              <Input\n                type=\"text\"\n                placeholder=\"Search columns...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-9\"\n                data-testid=\"input-search-columns\"\n              />\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={14} />\n            </div>\n\n            {/* Preset Actions */}\n            <div className=\"space-y-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={onHideAll}\n                className=\"w-full justify-start text-sm\"\n                data-testid=\"button-hide-all\"\n              >\n                Hide All\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={onResetToDefault}\n                className=\"w-full justify-start text-sm\"\n                data-testid=\"button-reset-columns\"\n              >\n                Reset to Default\n              </Button>\n            </div>\n\n            <Separator />\n\n            {/* Column List */}\n            <div className=\"space-y-2 max-h-64 overflow-y-auto\">\n              {filteredColumns.map((column) => (\n                <div\n                  key={column.key}\n                  className=\"flex items-center space-x-2 py-1\"\n                  data-testid={`column-option-${column.key}`}\n                >\n                  <Checkbox\n                    id={`column-${column.key}`}\n                    checked={visibleColumns[column.key] || false}\n                    onCheckedChange={(checked) =>\n                      onVisibilityChange(column.key, !!checked)\n                    }\n                    data-testid={`checkbox-column-${column.key}`}\n                  />\n                  <label\n                    htmlFor={`column-${column.key}`}\n                    className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 cursor-pointer flex-1\"\n                  >\n                    {column.label}\n                  </label>\n                </div>\n              ))}\n              {filteredColumns.length === 0 && (\n                <p className=\"text-sm text-gray-500 text-center py-2\">\n                  No columns match \"{searchQuery}\"\n                </p>\n              )}\n            </div>\n          </div>\n        </Card>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}","size_bytes":4444},"server/middleware/auth.ts":{"content":"import { Request, Response, NextFunction } from \"express\";\nimport jwt from \"jsonwebtoken\";\nimport bcrypt from \"bcryptjs\";\nimport { type JWTPayload, type UserType } from \"@shared/schema\";\nimport { env } from \"../config/env\";\nimport { UnauthorizedError, ForbiddenError } from \"../utils/errors\";\n\n// Extend Express Request type to include user\ndeclare global {\n  namespace Express {\n    interface Request {\n      user?: JWTPayload;\n    }\n  }\n}\n\nexport interface AuthenticatedRequest extends Request {\n  user: JWTPayload;\n}\n\n// JWT Authentication Middleware\nexport const authenticateToken = async (\n  req: Request,\n  res: Response,\n  next: NextFunction\n): Promise<void> => {\n  try {\n    const authHeader = req.headers.authorization;\n    const token = authHeader && authHeader.split(' ')[1]; // Bearer TOKEN\n\n    if (!token) {\n      throw new UnauthorizedError(\"Access token required\");\n    }\n\n    const decoded = jwt.verify(token, env.JWT_SECRET) as JWTPayload;\n    req.user = decoded;\n    next();\n  } catch (error) {\n    if (error instanceof jwt.JsonWebTokenError) {\n      next(new UnauthorizedError(\"Invalid token\"));\n    } else if (error instanceof jwt.TokenExpiredError) {\n      next(new UnauthorizedError(\"Token expired\"));\n    } else {\n      next(error);\n    }\n  }\n};\n\n// Role-based Authorization Middleware\nexport const authorizeRoles = (...allowedRoles: UserType[]) => {\n  return (req: Request, res: Response, next: NextFunction): void => {\n    if (!req.user) {\n      next(new UnauthorizedError(\"Authentication required\"));\n      return;\n    }\n\n    if (!allowedRoles.includes(req.user.userType)) {\n      next(new ForbiddenError(`Access denied. Required roles: ${allowedRoles.join(\", \")}`));\n      return;\n    }\n\n    next();\n  };\n};\n\n// Specific role authorization helpers\nexport const requireAdmin = authorizeRoles(\"admin\");\nexport const requireManagerOrAdmin = authorizeRoles(\"admin\", \"manager\");\nexport const requireAnyRole = authorizeRoles(\"admin\", \"manager\", \"employee\");\n\n// Utility function to generate JWT token\nexport const generateToken = (payload: JWTPayload): string => {\n  return jwt.sign(payload, env.JWT_SECRET, { \n    expiresIn: env.JWT_EXPIRES_IN\n  } as jwt.SignOptions);\n};\n\n// Utility function to hash password\nexport const hashPassword = async (password: string): Promise<string> => {\n  const saltRounds = 12;\n  return bcrypt.hash(password, saltRounds);\n};\n\n// Utility function to compare password\nexport const comparePassword = async (\n  plainPassword: string, \n  hashedPassword: string\n): Promise<boolean> => {\n  return bcrypt.compare(plainPassword, hashedPassword);\n};","size_bytes":2594},"client/src/components/ProtectedRoute.tsx":{"content":"import { useAuth } from \"@/contexts/AuthContext\";\nimport { useLocation } from \"wouter\";\nimport { useEffect } from \"react\";\n\ninterface ProtectedRouteProps {\n  children: React.ReactNode;\n  requiredRoles?: string[];\n}\n\nexport default function ProtectedRoute({ children, requiredRoles }: ProtectedRouteProps) {\n  const { isAuthenticated, user, isLoading } = useAuth();\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      setLocation(\"/login\");\n    }\n  }, [isAuthenticated, isLoading, setLocation]);\n\n  // Show loading while checking authentication\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto\"></div>\n          <p className=\"mt-4 text-gray-600\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Return null while redirecting to avoid white screen\n  if (!isAuthenticated) {\n    return null;\n  }\n\n  // Check role-based access if required\n  if (requiredRoles && user && !requiredRoles.includes(user.userType)) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-gray-900\">Access Denied</h1>\n          <p className=\"mt-2 text-gray-600\">\n            You don't have permission to access this page.\n          </p>\n          <p className=\"mt-1 text-sm text-gray-500\">\n            Required: {requiredRoles.join(\", \")} | Your role: {user.userType}\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  return <>{children}</>;\n}","size_bytes":1718},"client/src/contexts/AuthContext.tsx":{"content":"import { createContext, useContext, useState, useEffect, ReactNode } from \"react\";\nimport { type User, type JWTPayload } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface AuthContextType {\n  user: User | null;\n  token: string | null;\n  isLoading: boolean;\n  login: (email: string, password: string) => Promise<void>;\n  register: (userData: { username: string; email: string; password: string; userType: string }) => Promise<void>;\n  logout: () => void;\n  isAuthenticated: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n};\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport const AuthProvider = ({ children }: AuthProviderProps) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [token, setToken] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const isAuthenticated = !!user && !!token;\n\n  useEffect(() => {\n    // Check for stored token on app start\n    const storedToken = localStorage.getItem(\"auth_token\");\n    const storedUser = localStorage.getItem(\"auth_user\");\n    \n    if (storedToken && storedUser) {\n      setToken(storedToken);\n      setUser(JSON.parse(storedUser));\n    }\n    setIsLoading(false);\n  }, []);\n\n  const login = async (email: string, password: string) => {\n    try {\n      const response = await apiRequest(\"/api/auth/login\", {\n        method: \"POST\",\n        body: { email, password },\n      });\n\n      const { user: userData, token: authToken } = response;\n      \n      setUser(userData);\n      setToken(authToken);\n      \n      // Store in localStorage\n      localStorage.setItem(\"auth_token\", authToken);\n      localStorage.setItem(\"auth_user\", JSON.stringify(userData));\n    } catch (error) {\n      console.error(\"Login failed:\", error);\n      throw error;\n    }\n  };\n\n  const register = async (userData: { username: string; email: string; password: string; userType: string }) => {\n    try {\n      const response = await apiRequest(\"/api/auth/register\", {\n        method: \"POST\",\n        body: userData,\n      });\n\n      const { user: newUser, token: authToken } = response;\n      \n      setUser(newUser);\n      setToken(authToken);\n      \n      // Store in localStorage\n      localStorage.setItem(\"auth_token\", authToken);\n      localStorage.setItem(\"auth_user\", JSON.stringify(newUser));\n    } catch (error) {\n      console.error(\"Registration failed:\", error);\n      throw error;\n    }\n  };\n\n  const logout = () => {\n    setUser(null);\n    setToken(null);\n    localStorage.removeItem(\"auth_token\");\n    localStorage.removeItem(\"auth_user\");\n  };\n\n  const value = {\n    user,\n    token,\n    isLoading,\n    login,\n    register,\n    logout,\n    isAuthenticated,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};","size_bytes":3020},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { loginUserSchema, type LoginUser } from \"@shared/schema\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Loader2 } from \"lucide-react\";\n\nexport default function Login() {\n  const [, setLocation] = useLocation();\n  const { login } = useAuth();\n  const [error, setError] = useState<string>(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm<LoginUser>({\n    resolver: zodResolver(loginUserSchema),\n  });\n\n  const onSubmit = async (data: LoginUser) => {\n    setIsLoading(true);\n    setError(\"\");\n    \n    try {\n      await login(data.email, data.password);\n      setLocation(\"/dashboard\");\n    } catch (err: any) {\n      setError(err.message || \"Login failed. Please check your credentials.\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-1\">\n          <CardTitle className=\"text-2xl font-bold text-center\">Welcome Back</CardTitle>\n          <CardDescription className=\"text-center\">\n            Sign in to your DealerPro account\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-4\">\n            {error && (\n              <Alert variant=\"destructive\">\n                <AlertDescription>{error}</AlertDescription>\n              </Alert>\n            )}\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"Enter your email\"\n                data-testid=\"input-email\"\n                {...register(\"email\")}\n              />\n              {errors.email && (\n                <p className=\"text-sm text-red-500\">{errors.email.message}</p>\n              )}\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Password</Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                placeholder=\"Enter your password\"\n                data-testid=\"input-password\"\n                {...register(\"password\")}\n              />\n              {errors.password && (\n                <p className=\"text-sm text-red-500\">{errors.password.message}</p>\n              )}\n            </div>\n\n            <Button \n              type=\"submit\" \n              className=\"w-full\" \n              disabled={isLoading}\n              data-testid=\"button-login\"\n            >\n              {isLoading && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n              Sign In\n            </Button>\n          </form>\n        </CardContent>\n        <CardFooter className=\"text-center\">\n          <p className=\"text-sm text-gray-600\">\n            Don't have an account?{\" \"}\n            <Link href=\"/register\" className=\"text-blue-600 hover:underline\">\n              Sign up\n            </Link>\n          </p>\n        </CardFooter>\n      </Card>\n    </div>\n  );\n}","size_bytes":3652},"client/src/pages/register.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { registerUserSchema, type RegisterUser } from \"@shared/schema\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Loader2 } from \"lucide-react\";\n\nexport default function Register() {\n  const [, setLocation] = useLocation();\n  const { register: registerUser } = useAuth();\n  const [error, setError] = useState<string>(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    watch,\n    formState: { errors },\n  } = useForm<RegisterUser>({\n    resolver: zodResolver(registerUserSchema),\n  });\n\n  const userType = watch(\"userType\");\n\n  const onSubmit = async (data: RegisterUser) => {\n    setIsLoading(true);\n    setError(\"\");\n    \n    try {\n      await registerUser(data);\n      setLocation(\"/dashboard\");\n    } catch (err: any) {\n      setError(err.message || \"Registration failed. Please try again.\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-1\">\n          <CardTitle className=\"text-2xl font-bold text-center\">Create Account</CardTitle>\n          <CardDescription className=\"text-center\">\n            Join DealerPro to manage your dealership\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-4\">\n            {error && (\n              <Alert variant=\"destructive\">\n                <AlertDescription>{error}</AlertDescription>\n              </Alert>\n            )}\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"username\">Username</Label>\n              <Input\n                id=\"username\"\n                type=\"text\"\n                placeholder=\"Choose a username\"\n                data-testid=\"input-username\"\n                {...register(\"username\")}\n              />\n              {errors.username && (\n                <p className=\"text-sm text-red-500\">{errors.username.message}</p>\n              )}\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"Enter your email\"\n                data-testid=\"input-email\"\n                {...register(\"email\")}\n              />\n              {errors.email && (\n                <p className=\"text-sm text-red-500\">{errors.email.message}</p>\n              )}\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Password</Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                placeholder=\"Create a password\"\n                data-testid=\"input-password\"\n                {...register(\"password\")}\n              />\n              {errors.password && (\n                <p className=\"text-sm text-red-500\">{errors.password.message}</p>\n              )}\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"userType\">Role</Label>\n              <Select \n                value={userType} \n                onValueChange={(value) => setValue(\"userType\", value as any)}\n                data-testid=\"select-usertype\"\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select your role\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"employee\">Employee</SelectItem>\n                  <SelectItem value=\"manager\">Manager</SelectItem>\n                  <SelectItem value=\"admin\">Admin</SelectItem>\n                </SelectContent>\n              </Select>\n              {errors.userType && (\n                <p className=\"text-sm text-red-500\">{errors.userType.message}</p>\n              )}\n            </div>\n\n            <Button \n              type=\"submit\" \n              className=\"w-full\" \n              disabled={isLoading}\n              data-testid=\"button-register\"\n            >\n              {isLoading && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n              Create Account\n            </Button>\n          </form>\n        </CardContent>\n        <CardFooter className=\"text-center\">\n          <p className=\"text-sm text-gray-600\">\n            Already have an account?{\" \"}\n            <Link href=\"/login\" className=\"text-blue-600 hover:underline\">\n              Sign in\n            </Link>\n          </p>\n        </CardFooter>\n      </Card>\n    </div>\n  );\n}","size_bytes":5197},"client/src/pages/settings.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Settings as SettingsIcon, Plus, X, Save, Edit, Pencil } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Settings, ModelSeriesType, ColorOptionType } from \"@shared/schema\";\n\nexport default function Settings() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [editMode, setEditMode] = useState<string | null>(null);\n  const [tempValues, setTempValues] = useState<Record<string, any>>({});\n\n  // Fetch settings data\n  const { data: settings, isLoading } = useQuery<Settings>({\n    queryKey: [\"/api/settings\"],\n    queryFn: () => apiRequest(\"/api/settings\"),\n  });\n\n  // Update settings mutation\n  const updateMutation = useMutation({\n    mutationFn: (data: Partial<Settings>) => \n      apiRequest(\"/api/settings\", { method: \"PUT\", body: data }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/settings\"] });\n      toast({\n        title: \"Settings Updated\",\n        description: \"Your settings have been saved successfully.\",\n      });\n      setEditMode(null);\n      setTempValues({});\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update settings\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleEdit = (section: string) => {\n    if (!settings) return;\n    setEditMode(section);\n    setTempValues({ [section]: [...(settings[section as keyof Settings] as any[])] });\n  };\n\n  const handleCancel = () => {\n    setEditMode(null);\n    setTempValues({});\n  };\n\n  const handleSave = (section: string) => {\n    if (!settings) return;\n    \n    const updatedSettings = {\n      ...settings,\n      [section]: tempValues[section]\n    };\n    \n    updateMutation.mutate(updatedSettings);\n  };\n\n  const handleAddItem = (section: string) => {\n    const currentValues = tempValues[section] || [];\n    \n    if (section === \"model\") {\n      setTempValues({\n        ...tempValues,\n        [section]: [...currentValues, { name: \"\", Series: [] }]\n      });\n    } else if (section === \"colors\") {\n      setTempValues({\n        ...tempValues,\n        [section]: [...currentValues, { code: \"\", name: \"\" }]\n      });\n    } else if (section === \"years\") {\n      const currentYear = new Date().getFullYear();\n      setTempValues({\n        ...tempValues,\n        [section]: [...currentValues, currentYear]\n      });\n    } else {\n      setTempValues({\n        ...tempValues,\n        [section]: [...currentValues, \"\"]\n      });\n    }\n  };\n\n  const handleRemoveItem = (section: string, index: number) => {\n    const currentValues = [...tempValues[section]];\n    currentValues.splice(index, 1);\n    setTempValues({\n      ...tempValues,\n      [section]: currentValues\n    });\n  };\n\n  const handleItemChange = (section: string, index: number, value: any, field?: string) => {\n    const currentValues = [...tempValues[section]];\n    \n    if (field) {\n      currentValues[index] = { ...currentValues[index], [field]: value };\n    } else {\n      currentValues[index] = value;\n    }\n    \n    setTempValues({\n      ...tempValues,\n      [section]: currentValues\n    });\n  };\n\n  const handleSeriesChange = (modelIndex: number, seriesIndex: number, value: string) => {\n    const currentModels = [...tempValues.model];\n    const currentSeries = [...currentModels[modelIndex].Series];\n    currentSeries[seriesIndex] = value;\n    currentModels[modelIndex] = { ...currentModels[modelIndex], Series: currentSeries };\n    setTempValues({\n      ...tempValues,\n      model: currentModels\n    });\n  };\n\n  const handleAddSeries = (modelIndex: number) => {\n    const currentModels = [...tempValues.model];\n    currentModels[modelIndex] = {\n      ...currentModels[modelIndex],\n      Series: [...currentModels[modelIndex].Series, \"\"]\n    };\n    setTempValues({\n      ...tempValues,\n      model: currentModels\n    });\n  };\n\n  const handleRemoveSeries = (modelIndex: number, seriesIndex: number) => {\n    const currentModels = [...tempValues.model];\n    const currentSeries = [...currentModels[modelIndex].Series];\n    currentSeries.splice(seriesIndex, 1);\n    currentModels[modelIndex] = { ...currentModels[modelIndex], Series: currentSeries };\n    setTempValues({\n      ...tempValues,\n      model: currentModels\n    });\n  };\n\n  // Helper function to get status color based on status value\n  const getStatusColor = (status: string): string => {\n    const statusLower = status.toLowerCase();\n    if (statusLower.includes('stock') || statusLower.includes('available')) return 'bg-green-100 text-green-800 border-green-200 hover:bg-green-200';\n    if (statusLower.includes('sold')) return 'bg-blue-100 text-blue-800 border-blue-200 hover:bg-blue-200';\n    if (statusLower.includes('recall') || statusLower.includes('service')) return 'bg-red-100 text-red-800 border-red-200 hover:bg-red-200';\n    if (statusLower.includes('received') || statusLower.includes('transit')) return 'bg-emerald-100 text-emerald-800 border-emerald-200 hover:bg-emerald-200';\n    if (statusLower.includes('reserved') || statusLower.includes('hold')) return 'bg-amber-100 text-amber-800 border-amber-200 hover:bg-amber-200';\n    if (statusLower.includes('demo')) return 'bg-purple-100 text-purple-800 border-purple-200 hover:bg-purple-200';\n    if (statusLower.includes('wholesale') || statusLower.includes('auction')) return 'bg-gray-100 text-gray-800 border-gray-200 hover:bg-gray-200';\n    return 'bg-slate-100 text-slate-800 border-slate-200 hover:bg-slate-200';\n  };\n\n  // Helper function to get make color\n  const getMakeColor = (make: string): string => {\n    const colors = [\n      'bg-blue-100 text-blue-800 border-blue-200 hover:bg-blue-200',\n      'bg-purple-100 text-purple-800 border-purple-200 hover:bg-purple-200',\n      'bg-green-100 text-green-800 border-green-200 hover:bg-green-200',\n      'bg-yellow-100 text-yellow-800 border-yellow-200 hover:bg-yellow-200',\n      'bg-pink-100 text-pink-800 border-pink-200 hover:bg-pink-200',\n      'bg-indigo-100 text-indigo-800 border-indigo-200 hover:bg-indigo-200',\n    ];\n    return colors[make.length % colors.length];\n  };\n\n  // Helper function to get source color\n  const getSourceColor = (source: string): string => {\n    const sourceLower = source.toLowerCase();\n    if (sourceLower.includes('blue book') || sourceLower.includes('kelley')) return 'bg-blue-100 text-blue-800 border-blue-200 hover:bg-blue-200';\n    if (sourceLower.includes('trade')) return 'bg-green-100 text-green-800 border-green-200 hover:bg-green-200';\n    if (sourceLower.includes('auction')) return 'bg-orange-100 text-orange-800 border-orange-200 hover:bg-orange-200';\n    if (sourceLower.includes('lease')) return 'bg-purple-100 text-purple-800 border-purple-200 hover:bg-purple-200';\n    if (sourceLower.includes('direct') || sourceLower.includes('purchase')) return 'bg-emerald-100 text-emerald-800 border-emerald-200 hover:bg-emerald-200';\n    return 'bg-slate-100 text-slate-800 border-slate-200 hover:bg-slate-200';\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-96\">\n        <div className=\"text-lg\">Loading settings...</div>\n      </div>\n    );\n  }\n\n  if (!settings) {\n    return (\n      <div className=\"flex items-center justify-center min-h-96\">\n        <div className=\"text-lg text-red-600\">Failed to load settings</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex flex-col h-screen bg-gray-50/30\">\n      {/* Sticky Header */}\n      <div className=\"sticky top-0 z-10 bg-white/80 backdrop-blur-sm border-b border-gray-200/50 shadow-sm flex-shrink-0\">\n        <div className=\"max-w-7xl mx-auto px-6 py-6\">\n          <div className=\"flex items-center gap-4\">\n            <div className=\"p-3 bg-blue-100 rounded-2xl\">\n              <SettingsIcon className=\"w-8 h-8 text-blue-600\" />\n            </div>\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900\" data-testid=\"settings-title\">Settings</h1>\n              <p className=\"text-gray-600 text-lg\">Manage system configuration and dropdown values</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Main Content - Scrollable */}\n      <div className=\"flex-1 overflow-y-auto\">\n        <div className=\"max-w-7xl mx-auto px-6 py-8\">\n        <div className=\"grid gap-8 lg:grid-cols-2\">\n          {/* Makes Section */}\n          <Card className=\"group hover:shadow-xl transition-all duration-300 hover:-translate-y-1 border-0 shadow-lg bg-white/70 backdrop-blur-sm\">\n            <CardHeader className=\"flex flex-row items-start justify-between p-8 pb-6\">\n              <div>\n                <CardTitle className=\"text-xl font-bold text-gray-900\">Makes</CardTitle>\n                <CardDescription className=\"text-gray-600 mt-1\">Vehicle manufacturers available in the system</CardDescription>\n              </div>\n              {editMode !== \"make\" && (\n                <Button \n                  variant=\"ghost\" \n                  size=\"sm\" \n                  onClick={() => handleEdit(\"make\")}\n                  className=\"h-10 w-10 rounded-full bg-gray-100 hover:bg-gray-200 transition-colors p-0\"\n                  data-testid=\"edit-makes-button\"\n                >\n                  <Pencil className=\"w-4 h-4 text-gray-600\" />\n                </Button>\n              )}\n            </CardHeader>\n            <CardContent className=\"p-8 pt-0\">\n              {editMode === \"make\" ? (\n                <div className=\"space-y-6\">\n                  <div className=\"flex flex-wrap gap-3\">\n                    {(tempValues.make || []).map((make: string, index: number) => (\n                      <div key={index} className=\"flex items-center gap-2\">\n                        <Input\n                          value={make}\n                          onChange={(e) => handleItemChange(\"make\", index, e.target.value)}\n                          className=\"w-36 border-gray-200 focus:border-blue-400 focus:ring-blue-400\"\n                          data-testid={`make-input-${index}`}\n                        />\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleRemoveItem(\"make\", index)}\n                          className=\"h-8 w-8 p-0 border-red-200 hover:bg-red-50 hover:border-red-300\"\n                          data-testid={`remove-make-${index}`}\n                        >\n                          <X className=\"w-4 h-4 text-red-500\" />\n                        </Button>\n                      </div>\n                    ))}\n                  </div>\n                  <div className=\"flex gap-3\">\n                    <Button variant=\"outline\" onClick={() => handleAddItem(\"make\")} className=\"border-blue-200 hover:bg-blue-50 hover:border-blue-300\" data-testid=\"add-make-button\">\n                      <Plus className=\"w-4 h-4 mr-2 text-blue-600\" />\n                      Add Make\n                    </Button>\n                  </div>\n                  <div className=\"flex gap-3 pt-2 border-t border-gray-100\">\n                    <Button onClick={() => handleSave(\"make\")} disabled={updateMutation.isPending} className=\"bg-blue-600 hover:bg-blue-700\" data-testid=\"save-makes-button\">\n                      <Save className=\"w-4 h-4 mr-2\" />\n                      Save\n                    </Button>\n                    <Button variant=\"outline\" onClick={handleCancel} className=\"border-gray-200 hover:bg-gray-50\">\n                      Cancel\n                    </Button>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"flex flex-wrap gap-3 max-h-40 overflow-y-auto scrollbar-thin scrollbar-thumb-gray-300 scrollbar-track-gray-100\">\n                  {settings.make.map((make, index) => (\n                    <span \n                      key={index} \n                      className={`inline-flex items-center px-4 py-2 rounded-full text-sm font-medium border transition-all duration-200 cursor-default shadow-sm ${getMakeColor(make)}`}\n                      data-testid={`make-badge-${index}`}\n                    >\n                      {make}\n                    </span>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Sources Section */}\n          <Card className=\"group hover:shadow-xl transition-all duration-300 hover:-translate-y-1 border-0 shadow-lg bg-white/70 backdrop-blur-sm\">\n            <CardHeader className=\"flex flex-row items-start justify-between p-8 pb-6\">\n              <div>\n                <CardTitle className=\"text-xl font-bold text-gray-900\">Sources</CardTitle>\n                <CardDescription className=\"text-gray-600 mt-1\">Vehicle acquisition sources</CardDescription>\n              </div>\n              {editMode !== \"sources\" && (\n                <Button \n                  variant=\"ghost\" \n                  size=\"sm\" \n                  onClick={() => handleEdit(\"sources\")}\n                  className=\"h-10 w-10 rounded-full bg-gray-100 hover:bg-gray-200 transition-colors p-0\"\n                  data-testid=\"edit-sources-button\"\n                >\n                  <Pencil className=\"w-4 h-4 text-gray-600\" />\n                </Button>\n              )}\n            </CardHeader>\n            <CardContent className=\"p-8 pt-0\">\n              {editMode === \"sources\" ? (\n                <div className=\"space-y-6\">\n                  <div className=\"flex flex-wrap gap-3\">\n                    {(tempValues.sources || []).map((source: string, index: number) => (\n                      <div key={index} className=\"flex items-center gap-2\">\n                        <Input\n                          value={source}\n                          onChange={(e) => handleItemChange(\"sources\", index, e.target.value)}\n                          className=\"w-44 border-gray-200 focus:border-blue-400 focus:ring-blue-400\"\n                          data-testid={`source-input-${index}`}\n                        />\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleRemoveItem(\"sources\", index)}\n                          className=\"h-8 w-8 p-0 border-red-200 hover:bg-red-50 hover:border-red-300\"\n                          data-testid={`remove-source-${index}`}\n                        >\n                          <X className=\"w-4 h-4 text-red-500\" />\n                        </Button>\n                      </div>\n                    ))}\n                  </div>\n                  <div className=\"flex gap-3\">\n                    <Button variant=\"outline\" onClick={() => handleAddItem(\"sources\")} className=\"border-blue-200 hover:bg-blue-50 hover:border-blue-300\" data-testid=\"add-source-button\">\n                      <Plus className=\"w-4 h-4 mr-2 text-blue-600\" />\n                      Add Source\n                    </Button>\n                  </div>\n                  <div className=\"flex gap-3 pt-2 border-t border-gray-100\">\n                    <Button onClick={() => handleSave(\"sources\")} disabled={updateMutation.isPending} className=\"bg-blue-600 hover:bg-blue-700\" data-testid=\"save-sources-button\">\n                      <Save className=\"w-4 h-4 mr-2\" />\n                      Save\n                    </Button>\n                    <Button variant=\"outline\" onClick={handleCancel} className=\"border-gray-200 hover:bg-gray-50\">\n                      Cancel\n                    </Button>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"flex flex-wrap gap-3 max-h-40 overflow-y-auto scrollbar-thin scrollbar-thumb-gray-300 scrollbar-track-gray-100\">\n                  {settings.sources.map((source, index) => (\n                    <span \n                      key={index} \n                      className={`inline-flex items-center px-4 py-2 rounded-full text-sm font-medium border transition-all duration-200 cursor-default shadow-sm ${getSourceColor(source)}`}\n                      data-testid={`source-badge-${index}`}\n                    >\n                      {source}\n                    </span>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Years Section */}\n          <Card className=\"group hover:shadow-xl transition-all duration-300 hover:-translate-y-1 border-0 shadow-lg bg-white/70 backdrop-blur-sm\">\n            <CardHeader className=\"flex flex-row items-start justify-between p-8 pb-6\">\n              <div>\n                <CardTitle className=\"text-xl font-bold text-gray-900\">Years</CardTitle>\n                <CardDescription className=\"text-gray-600 mt-1\">Available vehicle model years</CardDescription>\n              </div>\n              {editMode !== \"years\" && (\n                <Button \n                  variant=\"ghost\" \n                  size=\"sm\" \n                  onClick={() => handleEdit(\"years\")}\n                  className=\"h-10 w-10 rounded-full bg-gray-100 hover:bg-gray-200 transition-colors p-0\"\n                  data-testid=\"edit-years-button\"\n                >\n                  <Pencil className=\"w-4 h-4 text-gray-600\" />\n                </Button>\n              )}\n            </CardHeader>\n            <CardContent className=\"p-8 pt-0\">\n              {editMode === \"years\" ? (\n                <div className=\"space-y-6\">\n                  <div className=\"flex flex-wrap gap-3\">\n                    {(tempValues.years || []).map((year: number, index: number) => (\n                      <div key={index} className=\"flex items-center gap-2\">\n                        <Input\n                          type=\"number\"\n                          value={year}\n                          onChange={(e) => handleItemChange(\"years\", index, parseInt(e.target.value))}\n                          className=\"w-24 border-gray-200 focus:border-blue-400 focus:ring-blue-400\"\n                          data-testid={`year-input-${index}`}\n                        />\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleRemoveItem(\"years\", index)}\n                          className=\"h-8 w-8 p-0 border-red-200 hover:bg-red-50 hover:border-red-300\"\n                          data-testid={`remove-year-${index}`}\n                        >\n                          <X className=\"w-4 h-4 text-red-500\" />\n                        </Button>\n                      </div>\n                    ))}\n                  </div>\n                  <div className=\"flex gap-3\">\n                    <Button variant=\"outline\" onClick={() => handleAddItem(\"years\")} className=\"border-blue-200 hover:bg-blue-50 hover:border-blue-300\" data-testid=\"add-year-button\">\n                      <Plus className=\"w-4 h-4 mr-2 text-blue-600\" />\n                      Add Year\n                    </Button>\n                  </div>\n                  <div className=\"flex gap-3 pt-2 border-t border-gray-100\">\n                    <Button onClick={() => handleSave(\"years\")} disabled={updateMutation.isPending} className=\"bg-blue-600 hover:bg-blue-700\" data-testid=\"save-years-button\">\n                      <Save className=\"w-4 h-4 mr-2\" />\n                      Save\n                    </Button>\n                    <Button variant=\"outline\" onClick={handleCancel} className=\"border-gray-200 hover:bg-gray-50\">\n                      Cancel\n                    </Button>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"flex flex-wrap gap-3 max-h-40 overflow-y-auto scrollbar-thin scrollbar-thumb-gray-300 scrollbar-track-gray-100\">\n                  {settings.years.sort((a, b) => b - a).map((year, index) => (\n                    <span \n                      key={index} \n                      className=\"inline-flex items-center px-4 py-2 rounded-full text-sm font-medium bg-indigo-100 text-indigo-800 border border-indigo-200 hover:bg-indigo-200 transition-all duration-200 cursor-default shadow-sm\"\n                      data-testid={`year-badge-${index}`}\n                    >\n                      {year}\n                    </span>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Status Section */}\n          <Card className=\"group hover:shadow-xl transition-all duration-300 hover:-translate-y-1 border-0 shadow-lg bg-white/70 backdrop-blur-sm\">\n            <CardHeader className=\"flex flex-row items-start justify-between p-8 pb-6\">\n              <div>\n                <CardTitle className=\"text-xl font-bold text-gray-900\">Status</CardTitle>\n                <CardDescription className=\"text-gray-600 mt-1\">Vehicle status options</CardDescription>\n              </div>\n              {editMode !== \"status\" && (\n                <Button \n                  variant=\"ghost\" \n                  size=\"sm\" \n                  onClick={() => handleEdit(\"status\")}\n                  className=\"h-10 w-10 rounded-full bg-gray-100 hover:bg-gray-200 transition-colors p-0\"\n                  data-testid=\"edit-status-button\"\n                >\n                  <Pencil className=\"w-4 h-4 text-gray-600\" />\n                </Button>\n              )}\n            </CardHeader>\n            <CardContent className=\"p-8 pt-0\">\n              {editMode === \"status\" ? (\n                <div className=\"space-y-6\">\n                  <div className=\"flex flex-wrap gap-3\">\n                    {(tempValues.status || []).map((status: string, index: number) => (\n                      <div key={index} className=\"flex items-center gap-2\">\n                        <Input\n                          value={status}\n                          onChange={(e) => handleItemChange(\"status\", index, e.target.value)}\n                          className=\"w-36 border-gray-200 focus:border-blue-400 focus:ring-blue-400\"\n                          data-testid={`status-input-${index}`}\n                        />\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleRemoveItem(\"status\", index)}\n                          className=\"h-8 w-8 p-0 border-red-200 hover:bg-red-50 hover:border-red-300\"\n                          data-testid={`remove-status-${index}`}\n                        >\n                          <X className=\"w-4 h-4 text-red-500\" />\n                        </Button>\n                      </div>\n                    ))}\n                  </div>\n                  <div className=\"flex gap-3\">\n                    <Button variant=\"outline\" onClick={() => handleAddItem(\"status\")} className=\"border-blue-200 hover:bg-blue-50 hover:border-blue-300\" data-testid=\"add-status-button\">\n                      <Plus className=\"w-4 h-4 mr-2 text-blue-600\" />\n                      Add Status\n                    </Button>\n                  </div>\n                  <div className=\"flex gap-3 pt-2 border-t border-gray-100\">\n                    <Button onClick={() => handleSave(\"status\")} disabled={updateMutation.isPending} className=\"bg-blue-600 hover:bg-blue-700\" data-testid=\"save-status-button\">\n                      <Save className=\"w-4 h-4 mr-2\" />\n                      Save\n                    </Button>\n                    <Button variant=\"outline\" onClick={handleCancel} className=\"border-gray-200 hover:bg-gray-50\">\n                      Cancel\n                    </Button>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"flex overflow-x-auto gap-3 pb-2 scrollbar-thin scrollbar-thumb-gray-300 scrollbar-track-gray-100\">\n                  <div className=\"flex gap-3 min-w-max\">\n                    {settings.status.map((status, index) => (\n                      <span \n                        key={index} \n                        className={`inline-flex items-center px-4 py-2 rounded-full text-sm font-medium border transition-all duration-200 cursor-default shadow-sm ${getStatusColor(status)}`}\n                        data-testid={`status-badge-${index}`}\n                      >\n                        {status}\n                      </span>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Models Section - Full Width */}\n        <Card className=\"mt-8 group hover:shadow-xl transition-all duration-300 hover:-translate-y-1 border-0 shadow-lg bg-white/70 backdrop-blur-sm\">\n          <CardHeader className=\"flex flex-row items-start justify-between p-8 pb-6\">\n            <div>\n              <CardTitle className=\"text-xl font-bold text-gray-900\">Models & Series</CardTitle>\n              <CardDescription className=\"text-gray-600 mt-1\">Vehicle models and their available series</CardDescription>\n            </div>\n            {editMode !== \"model\" && (\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                onClick={() => handleEdit(\"model\")}\n                className=\"h-10 w-10 rounded-full bg-gray-100 hover:bg-gray-200 transition-colors p-0\"\n                data-testid=\"edit-models-button\"\n              >\n                <Pencil className=\"w-4 h-4 text-gray-600\" />\n              </Button>\n            )}\n          </CardHeader>\n          <CardContent className=\"p-8 pt-0\">\n            {editMode === \"model\" ? (\n              <div className=\"space-y-8\">\n                {(tempValues.model || []).map((model: ModelSeriesType, modelIndex: number) => (\n                  <div key={modelIndex} className=\"border border-gray-200 rounded-2xl p-6 space-y-6 bg-gray-50/50\">\n                    <div className=\"flex items-center gap-4\">\n                      <Label htmlFor={`model-${modelIndex}`} className=\"font-medium text-gray-700 min-w-[100px]\">Model Name:</Label>\n                      <Input\n                        id={`model-${modelIndex}`}\n                        value={model.name}\n                        onChange={(e) => handleItemChange(\"model\", modelIndex, e.target.value, \"name\")}\n                        className=\"w-48 border-gray-200 focus:border-blue-400 focus:ring-blue-400\"\n                        data-testid={`model-name-input-${modelIndex}`}\n                      />\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => handleRemoveItem(\"model\", modelIndex)}\n                        className=\"h-8 w-8 p-0 border-red-200 hover:bg-red-50 hover:border-red-300\"\n                        data-testid={`remove-model-${modelIndex}`}\n                      >\n                        <X className=\"w-4 h-4 text-red-500\" />\n                      </Button>\n                    </div>\n                    <div className=\"space-y-4\">\n                      <Label className=\"font-medium text-gray-700\">Series:</Label>\n                      <div className=\"flex flex-wrap gap-3\">\n                        {model.Series.map((series: string, seriesIndex: number) => (\n                          <div key={seriesIndex} className=\"flex items-center gap-2\">\n                            <Input\n                              value={series}\n                              onChange={(e) => handleSeriesChange(modelIndex, seriesIndex, e.target.value)}\n                              className=\"w-40 border-gray-200 focus:border-blue-400 focus:ring-blue-400\"\n                              data-testid={`series-input-${modelIndex}-${seriesIndex}`}\n                            />\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => handleRemoveSeries(modelIndex, seriesIndex)}\n                              className=\"h-8 w-8 p-0 border-red-200 hover:bg-red-50 hover:border-red-300\"\n                              data-testid={`remove-series-${modelIndex}-${seriesIndex}`}\n                            >\n                              <X className=\"w-4 h-4 text-red-500\" />\n                            </Button>\n                          </div>\n                        ))}\n                      </div>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => handleAddSeries(modelIndex)}\n                        className=\"border-blue-200 hover:bg-blue-50 hover:border-blue-300\"\n                        data-testid={`add-series-${modelIndex}`}\n                      >\n                        <Plus className=\"w-4 h-4 mr-2 text-blue-600\" />\n                        Add Series\n                      </Button>\n                    </div>\n                  </div>\n                ))}\n                <div className=\"flex gap-3\">\n                  <Button variant=\"outline\" onClick={() => handleAddItem(\"model\")} className=\"border-blue-200 hover:bg-blue-50 hover:border-blue-300\" data-testid=\"add-model-button\">\n                    <Plus className=\"w-4 h-4 mr-2 text-blue-600\" />\n                    Add Model\n                  </Button>\n                </div>\n                <div className=\"flex gap-3 pt-4 border-t border-gray-200\">\n                  <Button onClick={() => handleSave(\"model\")} disabled={updateMutation.isPending} className=\"bg-blue-600 hover:bg-blue-700\" data-testid=\"save-models-button\">\n                    <Save className=\"w-4 h-4 mr-2\" />\n                    Save\n                  </Button>\n                  <Button variant=\"outline\" onClick={handleCancel} className=\"border-gray-200 hover:bg-gray-50\">\n                    Cancel\n                  </Button>\n                </div>\n              </div>\n            ) : (\n              <div className=\"space-y-6\">\n                {settings.model.map((model, index) => (\n                  <div key={index} className=\"border border-gray-200 rounded-2xl p-6 bg-gray-50/30 hover:bg-gray-50/50 transition-colors\" data-testid={`model-card-${index}`}>\n                    <h4 className=\"font-bold text-lg text-gray-900 mb-4\">{model.name}</h4>\n                    <div className=\"flex flex-wrap gap-3\">\n                      {model.Series.map((series, seriesIndex) => (\n                        <span \n                          key={seriesIndex} \n                          className=\"inline-flex items-center px-4 py-2 rounded-full text-sm font-medium bg-violet-100 text-violet-800 border border-violet-200 hover:bg-violet-200 transition-all duration-200 cursor-default shadow-sm\"\n                          data-testid={`series-badge-${index}-${seriesIndex}`}\n                        >\n                          {series}\n                        </span>\n                      ))}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Colors Section - Full Width */}\n        <Card className=\"mt-8 group hover:shadow-xl transition-all duration-300 hover:-translate-y-1 border-0 shadow-lg bg-white/70 backdrop-blur-sm\">\n          <CardHeader className=\"flex flex-row items-start justify-between p-8 pb-6\">\n            <div>\n              <CardTitle className=\"text-xl font-bold text-gray-900\">Colors</CardTitle>\n              <CardDescription className=\"text-gray-600 mt-1\">Available vehicle colors with codes</CardDescription>\n            </div>\n            {editMode !== \"colors\" && (\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                onClick={() => handleEdit(\"colors\")}\n                className=\"h-10 w-10 rounded-full bg-gray-100 hover:bg-gray-200 transition-colors p-0\"\n                data-testid=\"edit-colors-button\"\n              >\n                <Pencil className=\"w-4 h-4 text-gray-600\" />\n              </Button>\n            )}\n          </CardHeader>\n          <CardContent className=\"p-8 pt-0\">\n            {editMode === \"colors\" ? (\n              <div className=\"space-y-6\">\n                <div className=\"space-y-4\">\n                  {(tempValues.colors || []).map((color: ColorOptionType, index: number) => (\n                    <div key={index} className=\"flex items-center gap-4 p-4 border border-gray-200 rounded-xl bg-gray-50/30\">\n                      <Input\n                        placeholder=\"Code\"\n                        value={color.code}\n                        onChange={(e) => handleItemChange(\"colors\", index, e.target.value, \"code\")}\n                        className=\"w-24 border-gray-200 focus:border-blue-400 focus:ring-blue-400\"\n                        data-testid={`color-code-input-${index}`}\n                      />\n                      <Input\n                        placeholder=\"Color Name\"\n                        value={color.name}\n                        onChange={(e) => handleItemChange(\"colors\", index, e.target.value, \"name\")}\n                        className=\"flex-1 border-gray-200 focus:border-blue-400 focus:ring-blue-400\"\n                        data-testid={`color-name-input-${index}`}\n                      />\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => handleRemoveItem(\"colors\", index)}\n                        className=\"h-8 w-8 p-0 border-red-200 hover:bg-red-50 hover:border-red-300\"\n                        data-testid={`remove-color-${index}`}\n                      >\n                        <X className=\"w-4 h-4 text-red-500\" />\n                      </Button>\n                    </div>\n                  ))}\n                </div>\n                <div className=\"flex gap-3\">\n                  <Button variant=\"outline\" onClick={() => handleAddItem(\"colors\")} className=\"border-blue-200 hover:bg-blue-50 hover:border-blue-300\" data-testid=\"add-color-button\">\n                    <Plus className=\"w-4 h-4 mr-2 text-blue-600\" />\n                    Add Color\n                  </Button>\n                </div>\n                <div className=\"flex gap-3 pt-4 border-t border-gray-200\">\n                  <Button onClick={() => handleSave(\"colors\")} disabled={updateMutation.isPending} className=\"bg-blue-600 hover:bg-blue-700\" data-testid=\"save-colors-button\">\n                    <Save className=\"w-4 h-4 mr-2\" />\n                    Save\n                  </Button>\n                  <Button variant=\"outline\" onClick={handleCancel} className=\"border-gray-200 hover:bg-gray-50\">\n                    Cancel\n                  </Button>\n                </div>\n              </div>\n            ) : (\n              <div className=\"grid gap-3 grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4\">\n                {settings.colors.map((color, index) => (\n                  <div \n                    key={index} \n                    className=\"flex items-center gap-3 p-4 bg-gray-50/50 border border-gray-200 rounded-xl hover:bg-gray-50/80 transition-all duration-200 shadow-sm\"\n                    data-testid={`color-item-${index}`}\n                  >\n                    <span className=\"inline-flex items-center justify-center w-8 h-8 bg-gradient-to-br from-gray-400 to-gray-600 rounded-full text-xs font-mono text-white shadow-sm\">\n                      {color.code}\n                    </span>\n                    <span className=\"text-sm font-medium text-gray-900 truncate\">{color.name}</span>\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":36104},"server/app.ts":{"content":"import express from \"express\";\nimport { connectDatabase } from \"./config/database\";\nimport { errorHandler } from \"./middleware\";\nimport { SeedService } from \"./services\";\nimport apiRoutes from \"./routes/index\";\n\nexport const createApp = async (): Promise<express.Application> => {\n  const app = express();\n\n  // Basic middleware\n  app.use(express.json());\n  app.use(express.urlencoded({ extended: false }));\n\n  // Request logging middleware\n  app.use((req, res, next) => {\n    const start = Date.now();\n    const path = req.path;\n    let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n    const originalResJson = res.json;\n    res.json = function (bodyJson, ...args) {\n      capturedJsonResponse = bodyJson;\n      return originalResJson.apply(res, [bodyJson, ...args]);\n    };\n\n    res.on(\"finish\", () => {\n      const duration = Date.now() - start;\n      if (path.startsWith(\"/api\")) {\n        let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n        if (capturedJsonResponse) {\n          logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n        }\n\n        if (logLine.length > 80) {\n          logLine = logLine.slice(0, 79) + \"…\";\n        }\n\n        console.log(logLine);\n      }\n    });\n\n    next();\n  });\n\n  // Connect to database\n  await connectDatabase();\n\n  // Seed default data\n  await SeedService.seedAll();\n\n  // API routes\n  app.use(\"/api\", apiRoutes);\n\n  // Error handling middleware (must be last)\n  app.use(errorHandler);\n\n  return app;\n};","size_bytes":1510},"server/oldIndex.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // Serve the app on the port specified in the environment variable PORT\n  // Default to 5000 if not specified.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  \n  // Use localhost for local development, 0.0.0.0 for Replit\n  const isReplit = process.env.REPLIT_DEV_DOMAIN || process.env.REPL_ID;\n  const host = isReplit ? \"0.0.0.0\" : \"localhost\";\n  \n  server.listen(port, host, () => {\n    log(`serving on ${host}:${port}`);\n  });\n})();\n","size_bytes":2083},"server/oldRoutes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage, storagePromise } from \"./storage\";\nimport { \n  insertInventorySchema, \n  insertSalesSchema,\n  insertSettingsSchema,\n  registerUserSchema,\n  loginUserSchema \n} from \"@shared/schema\";\nimport { ZodError } from \"zod\";\nimport { \n  authenticateToken,\n  authorizeRoles,\n  requireAdmin,\n  requireManagerOrAdmin,\n  requireAnyRole,\n  generateToken,\n  comparePassword\n} from \"./middleware/auth\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Wait for storage to be initialized\n  await storagePromise;\n\n  // Authentication routes\n  app.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      const validatedData = registerUserSchema.parse(req.body);\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(validatedData.email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"User with this email already exists\" });\n      }\n      \n      const user = await storage.createUser(validatedData);\n      \n      // Generate JWT token\n      const token = generateToken({\n        userId: user.id,\n        email: user.email,\n        userType: user.userType\n      });\n      \n      res.status(201).json({\n        message: \"User registered successfully\",\n        user: {\n          id: user.id,\n          username: user.username,\n          email: user.email,\n          userType: user.userType\n        },\n        token\n      });\n    } catch (error) {\n      if (error instanceof ZodError) {\n        return res.status(400).json({ \n          message: \"Validation error\", \n          errors: error.errors \n        });\n      }\n      console.error(\"Registration error:\", error);\n      res.status(500).json({ message: \"Failed to register user\" });\n    }\n  });\n\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const validatedData = loginUserSchema.parse(req.body);\n      \n      // Find user by email\n      const userDoc = await storage.getUserByEmail(validatedData.email);\n      if (!userDoc) {\n        return res.status(401).json({ message: \"Invalid email or password\" });\n      }\n      \n      // Verify password\n      const isValidPassword = await comparePassword(validatedData.password, userDoc.password);\n      if (!isValidPassword) {\n        return res.status(401).json({ message: \"Invalid email or password\" });\n      }\n      \n      // Generate JWT token\n      const token = generateToken({\n        userId: userDoc._id!.toString(),\n        email: userDoc.email,\n        userType: userDoc.userType\n      });\n      \n      res.json({\n        message: \"Login successful\",\n        user: {\n          id: userDoc._id!.toString(),\n          username: userDoc.username,\n          email: userDoc.email,\n          userType: userDoc.userType\n        },\n        token\n      });\n    } catch (error) {\n      if (error instanceof ZodError) {\n        return res.status(400).json({ \n          message: \"Validation error\", \n          errors: error.errors \n        });\n      }\n      console.error(\"Login error:\", error);\n      res.status(500).json({ message: \"Failed to login\" });\n    }\n  });\n\n  // Protected route to get current user\n  app.get(\"/api/auth/me\", authenticateToken, async (req, res) => {\n    try {\n      const user = await storage.getUserById(req.user!.userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json({ user });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get user data\" });\n    }\n  });\n\n  // Inventory routes - All roles can view inventory\n  app.get(\"/api/inventory\", authenticateToken, requireAnyRole, async (req, res) => {\n    try {\n      const inventory = await storage.getInventory();\n      res.json(inventory);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch inventory\" });\n    }\n  });\n\n  app.get(\"/api/inventory/vin/:vin\", authenticateToken, requireAnyRole, async (req, res) => {\n    try {\n      const item = await storage.getInventoryByVin(req.params.vin);\n      if (!item) {\n        return res.status(404).json({ message: \"Vehicle not found\" });\n      }\n      res.json(item);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to search by VIN\" });\n    }\n  });\n\n  app.get(\"/api/inventory/:id\", authenticateToken, requireAnyRole, async (req, res) => {\n    try {\n      const item = await storage.getInventoryItem(req.params.id);\n      if (!item) {\n        return res.status(404).json({ message: \"Inventory item not found\" });\n      }\n      res.json(item);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch inventory item\" });\n    }\n  });\n\n  app.post(\"/api/inventory\", authenticateToken, requireManagerOrAdmin, async (req, res) => {\n    try {\n      const validatedData = insertInventorySchema.parse(req.body);\n      \n      // Check for duplicate VIN or Stock Number\n      const existingVin = await storage.getInventoryByVin(validatedData.vin);\n      if (existingVin) {\n        return res.status(400).json({ message: \"A vehicle with this VIN already exists\" });\n      }\n      \n      const existingStock = await storage.getInventoryByStockNumber(validatedData.stockNumber);\n      if (existingStock) {\n        return res.status(400).json({ message: \"A vehicle with this stock number already exists\" });\n      }\n\n      const item = await storage.createInventoryItem(validatedData);\n      res.status(201).json(item);\n    } catch (error) {\n      if (error instanceof ZodError) {\n        return res.status(400).json({ \n          message: \"Validation error\", \n          errors: error.errors \n        });\n      }\n      res.status(500).json({ message: \"Failed to create inventory item\" });\n    }\n  });\n\n  app.put(\"/api/inventory/:id\", authenticateToken, requireManagerOrAdmin, async (req, res) => {\n    try {\n      const validatedData = insertInventorySchema.partial().parse(req.body);\n      const item = await storage.updateInventoryItem(req.params.id, validatedData);\n      res.json(item);\n    } catch (error) {\n      if (error instanceof ZodError) {\n        return res.status(400).json({ \n          message: \"Validation error\", \n          errors: error.errors \n        });\n      }\n      if (error instanceof Error && error.message === \"Inventory item not found\") {\n        return res.status(404).json({ message: \"Inventory item not found\" });\n      }\n      res.status(500).json({ message: \"Failed to update inventory item\" });\n    }\n  });\n\n  app.delete(\"/api/inventory/:id\", authenticateToken, requireAdmin, async (req, res) => {\n    try {\n      const deleted = await storage.deleteInventoryItem(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Inventory item not found\" });\n      }\n      res.json({ message: \"Inventory item deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete inventory item\" });\n    }\n  });\n\n  app.get(\"/api/inventory/search/:query\", authenticateToken, requireAnyRole, async (req, res) => {\n    try {\n      const results = await storage.searchInventory(req.params.query);\n      res.json(results);\n    } catch (error) {\n      res.status(500).json({ message: \"Search failed\" });\n    }\n  });\n\n  // Sales routes - All roles can view sales data\n  app.get(\"/api/sales\", authenticateToken, requireAnyRole, async (req, res) => {\n    try {\n      const sales = await storage.getSales();\n      res.json(sales);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch sales\" });\n    }\n  });\n\n  app.get(\"/api/sales/:id\", authenticateToken, requireAnyRole, async (req, res) => {\n    try {\n      const item = await storage.getSalesItem(req.params.id);\n      if (!item) {\n        return res.status(404).json({ message: \"Sales record not found\" });\n      }\n      res.json(item);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch sales record\" });\n    }\n  });\n\n  app.post(\"/api/sales\", authenticateToken, requireManagerOrAdmin, async (req, res) => {\n    try {\n      const validatedData = insertSalesSchema.parse(req.body);\n      \n      // Verify the stock number exists in inventory\n      const inventoryItem = await storage.getInventoryByStockNumber(validatedData.stockNumber);\n      if (!inventoryItem) {\n        return res.status(400).json({ message: \"Stock number not found in inventory\" });\n      }\n\n      const item = await storage.createSalesItem(validatedData);\n      res.status(201).json(item);\n    } catch (error) {\n      if (error instanceof ZodError) {\n        return res.status(400).json({ \n          message: \"Validation error\", \n          errors: error.errors \n        });\n      }\n      res.status(500).json({ message: \"Failed to create sales record\" });\n    }\n  });\n\n  app.put(\"/api/sales/:id\", authenticateToken, requireManagerOrAdmin, async (req, res) => {\n    try {\n      const validatedData = insertSalesSchema.partial().parse(req.body);\n      const item = await storage.updateSalesItem(req.params.id, validatedData);\n      res.json(item);\n    } catch (error) {\n      if (error instanceof ZodError) {\n        return res.status(400).json({ \n          message: \"Validation error\", \n          errors: error.errors \n        });\n      }\n      if (error instanceof Error && error.message === \"Sales item not found\") {\n        return res.status(404).json({ message: \"Sales record not found\" });\n      }\n      res.status(500).json({ message: \"Failed to update sales record\" });\n    }\n  });\n\n  app.delete(\"/api/sales/:id\", authenticateToken, requireAdmin, async (req, res) => {\n    try {\n      const deleted = await storage.deleteSalesItem(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Sales record not found\" });\n      }\n      res.json({ message: \"Sales record deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete sales record\" });\n    }\n  });\n\n  app.get(\"/api/sales/search/:query\", authenticateToken, requireAnyRole, async (req, res) => {\n    try {\n      const results = await storage.searchSales(req.params.query);\n      res.json(results);\n    } catch (error) {\n      res.status(500).json({ message: \"Search failed\" });\n    }\n  });\n\n  // Dashboard stats - All roles can view stats\n  app.get(\"/api/stats\", authenticateToken, requireAnyRole, async (req, res) => {\n    try {\n      const inventory = await storage.getInventory();\n      const sales = await storage.getSales();\n      \n      const currentMonth = new Date().getMonth();\n      const currentYear = new Date().getFullYear();\n      \n      const salesThisMonth = sales.filter(sale => {\n        const saleDate = sale.createdAt ? new Date(sale.createdAt) : new Date();\n        return saleDate.getMonth() === currentMonth && saleDate.getFullYear() === currentYear;\n      });\n\n      const totalRevenue = salesThisMonth.reduce((sum, sale) => sum + Number(sale.salesPrice), 0);\n      \n      const avgAge = inventory.length > 0 \n        ? inventory.reduce((sum, item) => sum + (item.age || 0), 0) / inventory.length \n        : 0;\n\n      res.json({\n        totalInventory: inventory.length,\n        salesThisMonth: salesThisMonth.length,\n        revenue: totalRevenue,\n        avgDaysInLot: Math.round(avgAge),\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch stats\" });\n    }\n  });\n\n  // Settings routes - Admin only can update settings, all roles can view\n  app.get(\"/api/settings\", authenticateToken, requireAnyRole, async (req, res) => {\n    try {\n      const settings = await storage.getSettings();\n      if (!settings) {\n        // Return empty settings structure if no settings exist\n        res.json({\n          make: [],\n          sources: [],\n          years: [],\n          status: [],\n          model: [],\n          colors: []\n        });\n        return;\n      }\n      res.json(settings);\n    } catch (error) {\n      console.error(\"Failed to get settings:\", error);\n      res.status(500).json({ message: \"Failed to retrieve settings\" });\n    }\n  });\n\n  app.put(\"/api/settings\", authenticateToken, requireAdmin, async (req, res) => {\n    try {\n      const validatedData = insertSettingsSchema.parse(req.body);\n      const settings = await storage.updateSettings(validatedData);\n      res.json(settings);\n    } catch (error) {\n      if (error instanceof ZodError) {\n        return res.status(400).json({ \n          message: \"Validation error\", \n          errors: error.errors \n        });\n      }\n      console.error(\"Failed to update settings:\", error);\n      res.status(500).json({ message: \"Failed to update settings\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":12708},"server/oldStorage.ts":{"content":"import { ObjectId, MongoClient, Db, Collection } from \"mongodb\";\nimport { \n  type Inventory, \n  type InsertInventory, \n  type Sales, \n  type InsertSales,\n  type InventoryDocument,\n  type SalesDocument,\n  type User,\n  type RegisterUser,\n  type UserDocument,\n  type Settings,\n  type InsertSettings,\n  type SettingsDocument\n} from \"@shared/schema\";\n\nexport interface IStorage {\n  // User methods\n  createUser(user: RegisterUser): Promise<User>;\n  getUserByEmail(email: string): Promise<UserDocument | undefined>;\n  getUserById(id: string): Promise<User | undefined>;\n  \n  // Inventory methods\n  getInventory(): Promise<Inventory[]>;\n  getInventoryItem(id: string): Promise<Inventory | undefined>;\n  getInventoryByVin(vin: string): Promise<Inventory | undefined>;\n  getInventoryByStockNumber(stockNumber: string): Promise<Inventory | undefined>;\n  createInventoryItem(item: InsertInventory): Promise<Inventory>;\n  updateInventoryItem(id: string, item: Partial<InsertInventory>): Promise<Inventory>;\n  deleteInventoryItem(id: string): Promise<boolean>;\n\n  // Sales methods\n  getSales(): Promise<Sales[]>;\n  getSalesItem(id: string): Promise<Sales | undefined>;\n  createSalesItem(item: InsertSales): Promise<Sales>;\n  updateSalesItem(id: string, item: Partial<InsertSales>): Promise<Sales>;\n  deleteSalesItem(id: string): Promise<boolean>;\n\n  // Settings methods\n  getSettings(): Promise<Settings | undefined>;\n  updateSettings(settings: InsertSettings): Promise<Settings>;\n\n  // Search methods\n  searchInventory(query: string): Promise<Inventory[]>;\n  searchSales(query: string): Promise<Sales[]>;\n}\n\nclass MongoDBCompatibleStorage implements IStorage {\n  private inventory: Map<string, InventoryDocument>;\n  private sales: Map<string, SalesDocument>;\n  private users: Map<string, UserDocument>;\n  private settings: SettingsDocument | null;\n\n  constructor() {\n    this.inventory = new Map();\n    this.sales = new Map();\n    this.users = new Map();\n    this.settings = null;\n    this.initializeDummyData();\n    this.initializeDefaultUsers();\n    this.initializeDefaultSettings();\n  }\n\n  private initializeDummyData() {\n    // Add dummy inventory data\n    const dummyInventory: InventoryDocument[] = [\n      {\n        _id: new ObjectId(),\n        stockNumber: \"A2024001\",\n        vin: \"1HGBH41JXMN109186\",\n        year: 2023,\n        make: \"Honda\",\n        model: \"Accord\",\n        series: \"LX\",\n        color: \"Silver Metallic\",\n        certified: true,\n        body: \"Sedan\",\n        price: \"28450\",\n        bookValue: \"26500\",\n        cost: \"24000\",\n        markup: \"4450\",\n        odometer: 15420,\n        age: 45,\n        createdAt: new Date(Date.now() - 45 * 24 * 60 * 60 * 1000)\n      },\n      {\n        _id: new ObjectId(),\n        stockNumber: \"B2024002\",\n        vin: \"3GNKBKRS5NS123456\",\n        year: 2022,\n        make: \"Chevrolet\",\n        model: \"Equinox\",\n        series: \"LS\",\n        color: \"Pearl White\",\n        certified: false,\n        body: \"SUV\",\n        price: \"32995\",\n        bookValue: \"30200\",\n        cost: \"28500\",\n        markup: \"4495\",\n        odometer: 28750,\n        age: 32,\n        createdAt: new Date(Date.now() - 32 * 24 * 60 * 60 * 1000)\n      },\n      {\n        _id: new ObjectId(),\n        stockNumber: \"C2024003\",\n        vin: \"1FA6P8TH5N5123789\",\n        year: 2024,\n        make: \"Ford\",\n        model: \"Mustang\",\n        series: \"GT\",\n        color: \"Racing Red\",\n        certified: true,\n        body: \"Coupe\",\n        price: \"45750\",\n        bookValue: \"43200\",\n        cost: \"39800\",\n        markup: \"5950\",\n        odometer: 2850,\n        age: 18,\n        createdAt: new Date(Date.now() - 18 * 24 * 60 * 60 * 1000)\n      },\n      {\n        _id: new ObjectId(),\n        stockNumber: \"D2024004\",\n        vin: \"JM1CX1GL5N0456123\",\n        year: 2023,\n        make: \"Mazda\",\n        model: \"CX-5\",\n        series: \"Touring\",\n        color: \"Deep Crystal Blue\",\n        certified: true,\n        body: \"SUV\",\n        price: \"34200\",\n        bookValue: \"32100\",\n        cost: \"29500\",\n        markup: \"4700\",\n        odometer: 12340,\n        age: 28,\n        createdAt: new Date(Date.now() - 28 * 24 * 60 * 60 * 1000)\n      },\n      {\n        _id: new ObjectId(),\n        stockNumber: \"E2024005\",\n        vin: \"5YFBURHE5NP789456\",\n        year: 2022,\n        make: \"Toyota\",\n        model: \"Camry\",\n        series: \"XLE\",\n        color: \"Midnight Black\",\n        certified: false,\n        body: \"Sedan\",\n        price: \"29850\",\n        bookValue: \"27900\",\n        cost: \"25200\",\n        markup: \"4650\",\n        odometer: 22100,\n        age: 52,\n        createdAt: new Date(Date.now() - 52 * 24 * 60 * 60 * 1000)\n      }\n    ];\n\n    // Add dummy sales data\n    const dummySales: SalesDocument[] = [\n      {\n        _id: new ObjectId(),\n        dealNumber: \"D2024-001\",\n        customerNumber: \"C001\",\n        firstName: \"John\",\n        lastName: \"Smith\",\n        zip: \"12345\",\n        exteriorColor: \"Silver Metallic\",\n        newUsed: \"Used\",\n        stockNumber: \"A2024001\",\n        deliveryDate: new Date(Date.now() - 15 * 24 * 60 * 60 * 1000),\n        deliveryMileage: 15420,\n        trade1Vin: \"2HGFC2F59MH987654\",\n        trade1Year: 2021,\n        trade1Make: \"Honda\",\n        trade1Model: \"Civic\",\n        trade1Odometer: 45000,\n        trade1ACV: \"18500\",\n        trade2Vin: null,\n        trade2Year: null,\n        trade2Make: null,\n        trade2Model: null,\n        trade2Odometer: null,\n        trade2ACV: null,\n        closingManagerNumber: \"M001\",\n        closingManagerName: \"Sarah Johnson\",\n        financeManagerNumber: \"F001\",\n        financeManagerName: \"Mike Davis\",\n        salesmanNumber: \"S001\",\n        salesmanName: \"Robert Wilson\",\n        msrp: \"29500\",\n        listPrice: \"28450\",\n        salesPrice: \"27200\",\n        createdAt: new Date(Date.now() - 15 * 24 * 60 * 60 * 1000)\n      },\n      {\n        _id: new ObjectId(),\n        dealNumber: \"D2024-002\",\n        customerNumber: \"C002\",\n        firstName: \"Emily\",\n        lastName: \"Johnson\",\n        zip: \"54321\",\n        exteriorColor: \"Pearl White\",\n        newUsed: \"Used\",\n        stockNumber: \"B2024002\",\n        deliveryDate: new Date(Date.now() - 8 * 24 * 60 * 60 * 1000),\n        deliveryMileage: 28750,\n        trade1Vin: null,\n        trade1Year: null,\n        trade1Make: null,\n        trade1Model: null,\n        trade1Odometer: null,\n        trade1ACV: null,\n        trade2Vin: null,\n        trade2Year: null,\n        trade2Make: null,\n        trade2Model: null,\n        trade2Odometer: null,\n        trade2ACV: null,\n        closingManagerNumber: \"M002\",\n        closingManagerName: \"Lisa Chen\",\n        financeManagerNumber: \"F002\",\n        financeManagerName: \"James Brown\",\n        salesmanNumber: \"S002\",\n        salesmanName: \"Amanda Garcia\",\n        msrp: \"34200\",\n        listPrice: \"32995\",\n        salesPrice: \"31800\",\n        createdAt: new Date(Date.now() - 8 * 24 * 60 * 60 * 1000)\n      },\n      {\n        _id: new ObjectId(),\n        dealNumber: \"D2024-003\",\n        customerNumber: \"C003\",\n        firstName: \"Michael\",\n        lastName: \"Brown\",\n        zip: \"67890\",\n        exteriorColor: \"Racing Red\",\n        newUsed: \"New\",\n        stockNumber: \"C2024003\",\n        deliveryDate: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000),\n        deliveryMileage: 2850,\n        trade1Vin: \"1G6KD57Y85U456789\",\n        trade1Year: 2019,\n        trade1Make: \"Cadillac\",\n        trade1Model: \"CTS\",\n        trade1Odometer: 62000,\n        trade1ACV: \"22500\",\n        trade2Vin: null,\n        trade2Year: null,\n        trade2Make: null,\n        trade2Model: null,\n        trade2Odometer: null,\n        trade2ACV: null,\n        closingManagerNumber: \"M001\",\n        closingManagerName: \"Sarah Johnson\",\n        financeManagerNumber: \"F001\",\n        financeManagerName: \"Mike Davis\",\n        salesmanNumber: \"S003\",\n        salesmanName: \"David Martinez\",\n        msrp: \"47500\",\n        listPrice: \"45750\",\n        salesPrice: \"44200\",\n        createdAt: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000)\n      }\n    ];\n\n    // Add to maps using ObjectId as string key\n    dummyInventory.forEach(item => {\n      this.inventory.set(item._id!.toString(), item);\n    });\n\n    dummySales.forEach(item => {\n      this.sales.set(item._id!.toString(), item);\n    });\n  }\n\n  private async initializeDefaultUsers() {\n    // Create default admin user (password will be hashed in production)\n    const { hashPassword } = await import(\"./middleware/auth\");\n    \n    const defaultUsers: UserDocument[] = [\n      {\n        _id: new ObjectId(),\n        username: \"admin\",\n        email: \"admin@dealerpro.com\",\n        password: await hashPassword(\"admin123\"),\n        userType: \"admin\",\n        createdAt: new Date()\n      },\n      {\n        _id: new ObjectId(),\n        username: \"manager1\",\n        email: \"manager@dealerpro.com\", \n        password: await hashPassword(\"manager123\"),\n        userType: \"manager\",\n        createdAt: new Date()\n      },\n      {\n        _id: new ObjectId(),\n        username: \"employee1\",\n        email: \"employee@dealerpro.com\",\n        password: await hashPassword(\"employee123\"),\n        userType: \"employee\",\n        createdAt: new Date()\n      }\n    ];\n\n    defaultUsers.forEach(user => {\n      this.users.set(user._id!.toString(), user);\n    });\n  }\n\n  private documentToInventory(doc: InventoryDocument): Inventory {\n    return {\n      id: doc._id!.toString(),\n      stockNumber: doc.stockNumber,\n      vin: doc.vin,\n      year: doc.year,\n      make: doc.make,\n      model: doc.model,\n      series: doc.series,\n      color: doc.color,\n      certified: doc.certified,\n      body: doc.body,\n      price: doc.price,\n      bookValue: doc.bookValue,\n      cost: doc.cost,\n      markup: doc.markup,\n      odometer: doc.odometer,\n      age: doc.age,\n      createdAt: doc.createdAt\n    };\n  }\n\n  private documentToSales(doc: SalesDocument): Sales {\n    return {\n      id: doc._id!.toString(),\n      dealNumber: doc.dealNumber,\n      customerNumber: doc.customerNumber,\n      firstName: doc.firstName,\n      lastName: doc.lastName,\n      zip: doc.zip,\n      exteriorColor: doc.exteriorColor,\n      newUsed: doc.newUsed,\n      stockNumber: doc.stockNumber,\n      deliveryDate: doc.deliveryDate,\n      deliveryMileage: doc.deliveryMileage,\n      trade1Vin: doc.trade1Vin,\n      trade1Year: doc.trade1Year,\n      trade1Make: doc.trade1Make,\n      trade1Model: doc.trade1Model,\n      trade1Odometer: doc.trade1Odometer,\n      trade1ACV: doc.trade1ACV,\n      trade2Vin: doc.trade2Vin,\n      trade2Year: doc.trade2Year,\n      trade2Make: doc.trade2Make,\n      trade2Model: doc.trade2Model,\n      trade2Odometer: doc.trade2Odometer,\n      trade2ACV: doc.trade2ACV,\n      closingManagerNumber: doc.closingManagerNumber,\n      closingManagerName: doc.closingManagerName,\n      financeManagerNumber: doc.financeManagerNumber,\n      financeManagerName: doc.financeManagerName,\n      salesmanNumber: doc.salesmanNumber,\n      salesmanName: doc.salesmanName,\n      msrp: doc.msrp,\n      listPrice: doc.listPrice,\n      salesPrice: doc.salesPrice,\n      createdAt: doc.createdAt\n    };\n  }\n\n  private documentToUser(doc: UserDocument): User {\n    return {\n      id: doc._id!.toString(),\n      username: doc.username,\n      email: doc.email,\n      userType: doc.userType,\n      createdAt: doc.createdAt\n    };\n  }\n\n  // User methods\n  async createUser(userData: RegisterUser): Promise<User> {\n    const { hashPassword } = await import(\"./middleware/auth\");\n    \n    const id = new ObjectId();\n    const document: UserDocument = {\n      _id: id,\n      username: userData.username,\n      email: userData.email,\n      password: await hashPassword(userData.password),\n      userType: userData.userType,\n      createdAt: new Date()\n    };\n\n    this.users.set(id.toString(), document);\n    return this.documentToUser(document);\n  }\n\n  async getUserByEmail(email: string): Promise<UserDocument | undefined> {\n    const users = Array.from(this.users.values());\n    return users.find(user => user.email === email);\n  }\n\n  async getUserById(id: string): Promise<User | undefined> {\n    const doc = this.users.get(id);\n    return doc ? this.documentToUser(doc) : undefined;\n  }\n\n  // Inventory methods\n  async getInventory(): Promise<Inventory[]> {\n    const docs = Array.from(this.inventory.values());\n    return docs.map(doc => this.documentToInventory(doc));\n  }\n\n  async getInventoryItem(id: string): Promise<Inventory | undefined> {\n    const doc = this.inventory.get(id);\n    return doc ? this.documentToInventory(doc) : undefined;\n  }\n\n  async getInventoryByVin(vin: string): Promise<Inventory | undefined> {\n    const docs = Array.from(this.inventory.values());\n    const doc = docs.find(item => item.vin === vin);\n    return doc ? this.documentToInventory(doc) : undefined;\n  }\n\n  async getInventoryByStockNumber(stockNumber: string): Promise<Inventory | undefined> {\n    const docs = Array.from(this.inventory.values());\n    const doc = docs.find(item => item.stockNumber === stockNumber);\n    return doc ? this.documentToInventory(doc) : undefined;\n  }\n\n  async createInventoryItem(insertItem: InsertInventory): Promise<Inventory> {\n    const id = new ObjectId();\n    const document: InventoryDocument = {\n      _id: id,\n      ...insertItem,\n      createdAt: new Date(),\n      markup: insertItem.price && insertItem.cost \n        ? String(Number(insertItem.price) - Number(insertItem.cost))\n        : insertItem.markup || null\n    };\n\n    this.inventory.set(id.toString(), document);\n    return this.documentToInventory(document);\n  }\n\n  async updateInventoryItem(id: string, updateData: Partial<InsertInventory>): Promise<Inventory> {\n    const existing = this.inventory.get(id);\n    if (!existing) {\n      throw new Error(\"Inventory item not found\");\n    }\n\n    const updated: InventoryDocument = {\n      ...existing,\n      ...updateData,\n      markup: updateData.price && updateData.cost \n        ? String(Number(updateData.price) - Number(updateData.cost))\n        : updateData.markup || existing.markup\n    };\n    \n    this.inventory.set(id, updated);\n    return this.documentToInventory(updated);\n  }\n\n  async deleteInventoryItem(id: string): Promise<boolean> {\n    return this.inventory.delete(id);\n  }\n\n  // Sales methods\n  async getSales(): Promise<Sales[]> {\n    const docs = Array.from(this.sales.values());\n    return docs.map(doc => this.documentToSales(doc));\n  }\n\n  async getSalesItem(id: string): Promise<Sales | undefined> {\n    const doc = this.sales.get(id);\n    return doc ? this.documentToSales(doc) : undefined;\n  }\n\n  async createSalesItem(insertItem: InsertSales): Promise<Sales> {\n    const id = new ObjectId();\n    const document: SalesDocument = {\n      _id: id,\n      ...insertItem,\n      createdAt: new Date(),\n    };\n\n    this.sales.set(id.toString(), document);\n    return this.documentToSales(document);\n  }\n\n  async updateSalesItem(id: string, updateData: Partial<InsertSales>): Promise<Sales> {\n    const existing = this.sales.get(id);\n    if (!existing) {\n      throw new Error(\"Sales item not found\");\n    }\n\n    const updated: SalesDocument = { ...existing, ...updateData };\n    this.sales.set(id, updated);\n    return this.documentToSales(updated);\n  }\n\n  async deleteSalesItem(id: string): Promise<boolean> {\n    return this.sales.delete(id);\n  }\n\n  // Search methods\n  async searchInventory(query: string): Promise<Inventory[]> {\n    const docs = Array.from(this.inventory.values());\n    const lowerQuery = query.toLowerCase();\n    \n    const filtered = docs.filter(item => \n      item.vin.toLowerCase().includes(lowerQuery) ||\n      item.make.toLowerCase().includes(lowerQuery) ||\n      item.model.toLowerCase().includes(lowerQuery) ||\n      item.stockNumber.toLowerCase().includes(lowerQuery) ||\n      item.color.toLowerCase().includes(lowerQuery)\n    );\n    \n    return filtered.map(doc => this.documentToInventory(doc));\n  }\n\n  async searchSales(query: string): Promise<Sales[]> {\n    const docs = Array.from(this.sales.values());\n    const lowerQuery = query.toLowerCase();\n    \n    const filtered = docs.filter(item => \n      item.dealNumber.toLowerCase().includes(lowerQuery) ||\n      item.firstName.toLowerCase().includes(lowerQuery) ||\n      item.lastName.toLowerCase().includes(lowerQuery) ||\n      (item.customerNumber && item.customerNumber.toLowerCase().includes(lowerQuery))\n    );\n    \n    return filtered.map(doc => this.documentToSales(doc));\n  }\n\n  // Settings methods\n  async getSettings(): Promise<Settings | undefined> {\n    if (!this.settings) {\n      return undefined;\n    }\n    return this.documentToSettings(this.settings);\n  }\n\n  async updateSettings(settings: InsertSettings): Promise<Settings> {\n    const updatedSettings: SettingsDocument = {\n      _id: this.settings?._id || new ObjectId(),\n      ...settings,\n      createdAt: this.settings?.createdAt || new Date(),\n      updatedAt: new Date(),\n    };\n    \n    this.settings = updatedSettings;\n    return this.documentToSettings(updatedSettings);\n  }\n\n  private initializeDefaultSettings() {\n    const defaultSettings: SettingsDocument = {\n      _id: new ObjectId(),\n      make: [\"Ford\", \"Toyota\", \"Honda\", \"Chevrolet\", \"Nissan\", \"BMW\", \"Mercedes-Benz\", \"Audi\", \"Hyundai\", \"Kia\", \"Volkswagen\", \"Subaru\", \"Mazda\", \"Lexus\", \"Acura\", \"Infiniti\", \"Cadillac\", \"Lincoln\", \"Buick\", \"GMC\", \"Ram\", \"Jeep\", \"Dodge\", \"Chrysler\"],\n      sources: [\"Kelley Blue Book\", \"Direct Purchase\", \"Trade-In\", \"Lease Buyout\", \"Auction\", \"Fleet Sale\", \"Wholesale\", \"Consignment\"],\n      years: [2020, 2021, 2022, 2023, 2024, 2025],\n      status: [\"Available\", \"In Stock\", \"Sold\", \"Reserved\", \"In Transit\", \"Received\", \"Pending Inspection\", \"Dealer Trade\", \"Service Required\", \"Demo Vehicle\", \"Wholesale\", \"Auction\", \"On Hold\", \"Recall\"],\n      model: [\n        {\n          name: \"Bronco\",\n          Series: [\"Base\", \"Big Bend\", \"Black Diamond\", \"Outer Banks\", \"Badlands\", \"Wildtrak\", \"Raptor\"]\n        },\n        {\n          name: \"Bronco Sport\",\n          Series: [\"Base\", \"Big Bend\", \"Outer Banks\", \"Badlands\"]\n        },\n        {\n          name: \"F-150\",\n          Series: [\"Regular Cab\", \"SuperCab\", \"SuperCrew\", \"XL\", \"XLT\", \"Lariat\", \"King Ranch\", \"Platinum\", \"Limited\", \"Raptor\", \"Lightning\"]\n        },\n        {\n          name: \"Mustang\",\n          Series: [\"EcoBoost\", \"EcoBoost Premium\", \"GT\", \"GT Premium\", \"Mach 1\", \"Shelby GT350\", \"Shelby GT500\"]\n        },\n        {\n          name: \"Explorer\",\n          Series: [\"Base\", \"XLT\", \"Limited\", \"Platinum\", \"ST\", \"King Ranch\"]\n        },\n        {\n          name: \"Escape\",\n          Series: [\"S\", \"SE\", \"SEL\", \"Titanium\"]\n        },\n        {\n          name: \"Edge\",\n          Series: [\"SE\", \"SEL\", \"Titanium\", \"ST\"]\n        }\n      ],\n      colors: [\n        {code: \"PUM\", name: \"Agate Black\"},\n        {code: \"PDR\", name: \"Avalanche\"},\n        {code: \"PYZ\", name: \"Oxford White\"},\n        {code: \"PAZ\", name: \"Star White\"},\n        {code: \"PA3\", name: \"Space White\"},\n        {code: \"PG1\", name: \"Shadow Black\"},\n        {code: \"PHY\", name: \"Dark Matter\"},\n        {code: \"PM7\", name: \"Carbonized Gray\"},\n        {code: \"PUJ\", name: \"Sterling Gray\"},\n        {code: \"PJS\", name: \"Iconic Silver\"},\n        {code: \"PTN\", name: \"Silver Gray\"},\n        {code: \"PNE\", name: \"Fighter Jet Gray\"},\n        {code: \"PAE\", name: \"Grabber Blue\"},\n        {code: \"PK1\", name: \"Vapor Blue\"},\n        {code: \"PAB\", name: \"Blue Tinted Clearcoat\"},\n        {code: \"PE7\", name: \"Velocity Blue\"},\n        {code: \"PLK\", name: \"Dark Blue\"},\n        {code: \"PL8\", name: \"Cinnabar Red\"},\n        {code: \"PD4\", name: \"Rapid Red Metallic\"},\n        {code: \"PPQ\", name: \"Race Red\"},\n        {code: \"PCN\", name: \"Code Orange\"},\n        {code: \"PSB\", name: \"Cyber Orange\"}\n      ],\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n\n    this.settings = defaultSettings;\n  }\n\n  private documentToSettings(doc: SettingsDocument): Settings {\n    return {\n      id: doc._id!.toString(),\n      make: doc.make,\n      sources: doc.sources,\n      years: doc.years,\n      status: doc.status,\n      model: doc.model,\n      colors: doc.colors,\n      createdAt: doc.createdAt,\n      updatedAt: doc.updatedAt,\n    };\n  }\n}\n\nclass MongoDBStorage implements IStorage {\n  private client: MongoClient;\n  private db: Db;\n  private users: Collection<UserDocument>;\n  private inventory: Collection<InventoryDocument>;\n  private sales: Collection<SalesDocument>;\n  private settings: Collection<SettingsDocument>;\n\n  constructor(mongoUrl: string, databaseName: string = \"dealerpro\") {\n    this.client = new MongoClient(mongoUrl);\n    this.db = this.client.db(databaseName);\n    this.users = this.db.collection<UserDocument>(\"users\");\n    this.inventory = this.db.collection<InventoryDocument>(\"inventory\");\n    this.sales = this.db.collection<SalesDocument>(\"sales\");\n    this.settings = this.db.collection<SettingsDocument>(\"settings\");\n  }\n\n  async connect(): Promise<void> {\n    await this.client.connect();\n    console.log(\"Connected to MongoDB successfully\");\n    await this.initializeDefaultUsers();\n    await this.initializeDefaultSettings();\n  }\n\n  async disconnect(): Promise<void> {\n    await this.client.close();\n    console.log(\"Disconnected from MongoDB\");\n  }\n\n  private async initializeDefaultUsers() {\n    // Check if users already exist\n    const existingUsersCount = await this.users.countDocuments();\n    if (existingUsersCount > 0) {\n      console.log(\"Users already exist in MongoDB, skipping initialization\");\n      return;\n    }\n\n    // Create default users\n    const { hashPassword } = await import(\"./middleware/auth\");\n    \n    const defaultUsers: UserDocument[] = [\n      {\n        _id: new ObjectId(),\n        username: \"admin\",\n        email: \"admin@dealerpro.com\",\n        password: await hashPassword(\"admin123\"),\n        userType: \"admin\",\n        createdAt: new Date()\n      },\n      {\n        _id: new ObjectId(),\n        username: \"manager1\",\n        email: \"manager@dealerpro.com\", \n        password: await hashPassword(\"manager123\"),\n        userType: \"manager\",\n        createdAt: new Date()\n      },\n      {\n        _id: new ObjectId(),\n        username: \"employee1\",\n        email: \"employee@dealerpro.com\",\n        password: await hashPassword(\"employee123\"),\n        userType: \"employee\",\n        createdAt: new Date()\n      }\n    ];\n\n    await this.users.insertMany(defaultUsers);\n    console.log(\"Default users created in MongoDB\");\n  }\n\n  private documentToInventory(doc: InventoryDocument): Inventory {\n    return {\n      id: doc._id!.toString(),\n      stockNumber: doc.stockNumber,\n      vin: doc.vin,\n      year: doc.year,\n      make: doc.make,\n      model: doc.model,\n      series: doc.series,\n      color: doc.color,\n      certified: doc.certified,\n      body: doc.body,\n      price: doc.price,\n      bookValue: doc.bookValue,\n      cost: doc.cost,\n      markup: doc.markup,\n      odometer: doc.odometer,\n      age: doc.age,\n      createdAt: doc.createdAt\n    };\n  }\n\n  private documentToSales(doc: SalesDocument): Sales {\n    return {\n      id: doc._id!.toString(),\n      dealNumber: doc.dealNumber,\n      customerNumber: doc.customerNumber,\n      firstName: doc.firstName,\n      lastName: doc.lastName,\n      zip: doc.zip,\n      exteriorColor: doc.exteriorColor,\n      newUsed: doc.newUsed,\n      stockNumber: doc.stockNumber,\n      deliveryDate: doc.deliveryDate,\n      deliveryMileage: doc.deliveryMileage,\n      trade1Vin: doc.trade1Vin,\n      trade1Year: doc.trade1Year,\n      trade1Make: doc.trade1Make,\n      trade1Model: doc.trade1Model,\n      trade1Odometer: doc.trade1Odometer,\n      trade1ACV: doc.trade1ACV,\n      trade2Vin: doc.trade2Vin,\n      trade2Year: doc.trade2Year,\n      trade2Make: doc.trade2Make,\n      trade2Model: doc.trade2Model,\n      trade2Odometer: doc.trade2Odometer,\n      trade2ACV: doc.trade2ACV,\n      closingManagerNumber: doc.closingManagerNumber,\n      closingManagerName: doc.closingManagerName,\n      financeManagerNumber: doc.financeManagerNumber,\n      financeManagerName: doc.financeManagerName,\n      salesmanNumber: doc.salesmanNumber,\n      salesmanName: doc.salesmanName,\n      msrp: doc.msrp,\n      listPrice: doc.listPrice,\n      salesPrice: doc.salesPrice,\n      createdAt: doc.createdAt\n    };\n  }\n\n  private documentToUser(doc: UserDocument): User {\n    return {\n      id: doc._id!.toString(),\n      username: doc.username,\n      email: doc.email,\n      userType: doc.userType,\n      createdAt: doc.createdAt\n    };\n  }\n\n  // User methods\n  async createUser(userData: RegisterUser): Promise<User> {\n    const { hashPassword } = await import(\"./middleware/auth\");\n    \n    const document: UserDocument = {\n      _id: new ObjectId(),\n      username: userData.username,\n      email: userData.email,\n      password: await hashPassword(userData.password),\n      userType: userData.userType,\n      createdAt: new Date()\n    };\n\n    const result = await this.users.insertOne(document);\n    document._id = result.insertedId;\n    return this.documentToUser(document);\n  }\n\n  async getUserByEmail(email: string): Promise<UserDocument | undefined> {\n    const user = await this.users.findOne({ email });\n    return user || undefined;\n  }\n\n  async getUserById(id: string): Promise<User | undefined> {\n    const doc = await this.users.findOne({ _id: new ObjectId(id) });\n    return doc ? this.documentToUser(doc) : undefined;\n  }\n\n  // Inventory methods\n  async getInventory(): Promise<Inventory[]> {\n    const docs = await this.inventory.find({}).toArray();\n    return docs.map(doc => this.documentToInventory(doc));\n  }\n\n  async getInventoryItem(id: string): Promise<Inventory | undefined> {\n    const doc = await this.inventory.findOne({ _id: new ObjectId(id) });\n    return doc ? this.documentToInventory(doc) : undefined;\n  }\n\n  async getInventoryByVin(vin: string): Promise<Inventory | undefined> {\n    const doc = await this.inventory.findOne({ vin });\n    return doc ? this.documentToInventory(doc) : undefined;\n  }\n\n  async getInventoryByStockNumber(stockNumber: string): Promise<Inventory | undefined> {\n    const doc = await this.inventory.findOne({ stockNumber });\n    return doc ? this.documentToInventory(doc) : undefined;\n  }\n\n  async createInventoryItem(insertItem: InsertInventory): Promise<Inventory> {\n    const document: InventoryDocument = {\n      _id: new ObjectId(),\n      ...insertItem,\n      createdAt: new Date(),\n      markup: insertItem.price && insertItem.cost \n        ? String(Number(insertItem.price) - Number(insertItem.cost))\n        : insertItem.markup || null\n    };\n\n    const result = await this.inventory.insertOne(document);\n    document._id = result.insertedId;\n    return this.documentToInventory(document);\n  }\n\n  async updateInventoryItem(id: string, updateData: Partial<InsertInventory>): Promise<Inventory> {\n    const updateDoc = {\n      ...updateData,\n      markup: updateData.price && updateData.cost \n        ? String(Number(updateData.price) - Number(updateData.cost))\n        : updateData.markup\n    };\n\n    const result = await this.inventory.findOneAndUpdate(\n      { _id: new ObjectId(id) },\n      { $set: updateDoc },\n      { returnDocument: \"after\" }\n    );\n    \n    if (!result) {\n      throw new Error(\"Inventory item not found\");\n    }\n    \n    return this.documentToInventory(result);\n  }\n\n  async deleteInventoryItem(id: string): Promise<boolean> {\n    const result = await this.inventory.deleteOne({ _id: new ObjectId(id) });\n    return result.deletedCount > 0;\n  }\n\n  // Sales methods\n  async getSales(): Promise<Sales[]> {\n    const docs = await this.sales.find({}).toArray();\n    return docs.map(doc => this.documentToSales(doc));\n  }\n\n  async getSalesItem(id: string): Promise<Sales | undefined> {\n    const doc = await this.sales.findOne({ _id: new ObjectId(id) });\n    return doc ? this.documentToSales(doc) : undefined;\n  }\n\n  async createSalesItem(insertItem: InsertSales): Promise<Sales> {\n    const document: SalesDocument = {\n      _id: new ObjectId(),\n      ...insertItem,\n      createdAt: new Date(),\n    };\n\n    const result = await this.sales.insertOne(document);\n    document._id = result.insertedId;\n    return this.documentToSales(document);\n  }\n\n  async updateSalesItem(id: string, updateData: Partial<InsertSales>): Promise<Sales> {\n    const result = await this.sales.findOneAndUpdate(\n      { _id: new ObjectId(id) },\n      { $set: updateData },\n      { returnDocument: \"after\" }\n    );\n    \n    if (!result) {\n      throw new Error(\"Sales item not found\");\n    }\n    \n    return this.documentToSales(result);\n  }\n\n  async deleteSalesItem(id: string): Promise<boolean> {\n    const result = await this.sales.deleteOne({ _id: new ObjectId(id) });\n    return result.deletedCount > 0;\n  }\n\n  // Search methods\n  async searchInventory(query: string): Promise<Inventory[]> {\n    const lowerQuery = query.toLowerCase();\n    const regex = new RegExp(lowerQuery, 'i');\n    \n    const docs = await this.inventory.find({\n      $or: [\n        { vin: regex },\n        { make: regex },\n        { model: regex },\n        { stockNumber: regex },\n        { color: regex }\n      ]\n    }).toArray();\n    \n    return docs.map(doc => this.documentToInventory(doc));\n  }\n\n  async searchSales(query: string): Promise<Sales[]> {\n    const lowerQuery = query.toLowerCase();\n    const regex = new RegExp(lowerQuery, 'i');\n    \n    const docs = await this.sales.find({\n      $or: [\n        { dealNumber: regex },\n        { firstName: regex },\n        { lastName: regex },\n        { customerNumber: regex }\n      ]\n    }).toArray();\n    \n    return docs.map(doc => this.documentToSales(doc));\n  }\n\n  // Settings methods\n  async getSettings(): Promise<Settings | undefined> {\n    const doc = await this.settings.findOne({});\n    return doc ? this.documentToSettings(doc) : undefined;\n  }\n\n  async updateSettings(settings: InsertSettings): Promise<Settings> {\n    const existingDoc = await this.settings.findOne({});\n    \n    if (existingDoc) {\n      const updatedDoc = {\n        ...existingDoc,\n        ...settings,\n        updatedAt: new Date(),\n      };\n      \n      await this.settings.replaceOne({ _id: existingDoc._id }, updatedDoc);\n      return this.documentToSettings(updatedDoc);\n    } else {\n      const newDoc: SettingsDocument = {\n        _id: new ObjectId(),\n        ...settings,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n      \n      await this.settings.insertOne(newDoc);\n      return this.documentToSettings(newDoc);\n    }\n  }\n\n  private async initializeDefaultSettings() {\n    // Check if settings already exist\n    const existingSettingsCount = await this.settings.countDocuments();\n    if (existingSettingsCount > 0) {\n      console.log(\"Settings already exist in MongoDB, skipping initialization\");\n      return;\n    }\n\n    const defaultSettings: SettingsDocument = {\n      _id: new ObjectId(),\n      make: [\"Ford\", \"Toyota\", \"Honda\", \"Chevrolet\", \"Nissan\", \"BMW\", \"Mercedes-Benz\", \"Audi\", \"Hyundai\", \"Kia\", \"Volkswagen\", \"Subaru\", \"Mazda\", \"Lexus\", \"Acura\", \"Infiniti\", \"Cadillac\", \"Lincoln\", \"Buick\", \"GMC\", \"Ram\", \"Jeep\", \"Dodge\", \"Chrysler\"],\n      sources: [\"Kelley Blue Book\", \"Direct Purchase\", \"Trade-In\", \"Lease Buyout\", \"Auction\", \"Fleet Sale\", \"Wholesale\", \"Consignment\"],\n      years: [2020, 2021, 2022, 2023, 2024, 2025],\n      status: [\"Available\", \"In Stock\", \"Sold\", \"Reserved\", \"In Transit\", \"Received\", \"Pending Inspection\", \"Dealer Trade\", \"Service Required\", \"Demo Vehicle\", \"Wholesale\", \"Auction\", \"On Hold\", \"Recall\"],\n      model: [\n        {\n          name: \"Bronco\",\n          Series: [\"Base\", \"Big Bend\", \"Black Diamond\", \"Outer Banks\", \"Badlands\", \"Wildtrak\", \"Raptor\"]\n        },\n        {\n          name: \"Bronco Sport\",\n          Series: [\"Base\", \"Big Bend\", \"Outer Banks\", \"Badlands\"]\n        },\n        {\n          name: \"F-150\",\n          Series: [\"Regular Cab\", \"SuperCab\", \"SuperCrew\", \"XL\", \"XLT\", \"Lariat\", \"King Ranch\", \"Platinum\", \"Limited\", \"Raptor\", \"Lightning\"]\n        },\n        {\n          name: \"Mustang\",\n          Series: [\"EcoBoost\", \"EcoBoost Premium\", \"GT\", \"GT Premium\", \"Mach 1\", \"Shelby GT350\", \"Shelby GT500\"]\n        },\n        {\n          name: \"Explorer\",\n          Series: [\"Base\", \"XLT\", \"Limited\", \"Platinum\", \"ST\", \"King Ranch\"]\n        },\n        {\n          name: \"Escape\",\n          Series: [\"S\", \"SE\", \"SEL\", \"Titanium\"]\n        },\n        {\n          name: \"Edge\",\n          Series: [\"SE\", \"SEL\", \"Titanium\", \"ST\"]\n        }\n      ],\n      colors: [\n        {code: \"PUM\", name: \"Agate Black\"},\n        {code: \"PDR\", name: \"Avalanche\"},\n        {code: \"PYZ\", name: \"Oxford White\"},\n        {code: \"PAZ\", name: \"Star White\"},\n        {code: \"PA3\", name: \"Space White\"},\n        {code: \"PG1\", name: \"Shadow Black\"},\n        {code: \"PHY\", name: \"Dark Matter\"},\n        {code: \"PM7\", name: \"Carbonized Gray\"},\n        {code: \"PUJ\", name: \"Sterling Gray\"},\n        {code: \"PJS\", name: \"Iconic Silver\"},\n        {code: \"PTN\", name: \"Silver Gray\"},\n        {code: \"PNE\", name: \"Fighter Jet Gray\"},\n        {code: \"PAE\", name: \"Grabber Blue\"},\n        {code: \"PK1\", name: \"Vapor Blue\"},\n        {code: \"PAB\", name: \"Blue Tinted Clearcoat\"},\n        {code: \"PE7\", name: \"Velocity Blue\"},\n        {code: \"PLK\", name: \"Dark Blue\"},\n        {code: \"PL8\", name: \"Cinnabar Red\"},\n        {code: \"PD4\", name: \"Rapid Red Metallic\"},\n        {code: \"PPQ\", name: \"Race Red\"},\n        {code: \"PCN\", name: \"Code Orange\"},\n        {code: \"PSB\", name: \"Cyber Orange\"}\n      ],\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n\n    await this.settings.insertOne(defaultSettings);\n    console.log(\"Default settings created in MongoDB\");\n  }\n\n  private documentToSettings(doc: SettingsDocument): Settings {\n    return {\n      id: doc._id!.toString(),\n      make: doc.make,\n      sources: doc.sources,\n      years: doc.years,\n      status: doc.status,\n      model: doc.model,\n      colors: doc.colors,\n      createdAt: doc.createdAt,\n      updatedAt: doc.updatedAt,\n    };\n  }\n}\n\n// Initialize storage based on environment\nasync function initializeStorage(): Promise<IStorage> {\n  const mongoUrl = process.env.MONGODB_URL || process.env.MONGO_URL;\n  \n  if (mongoUrl) {\n    console.log(\"Initializing MongoDB storage...\");\n    try {\n      const mongoStorage = new MongoDBStorage(mongoUrl);\n      await mongoStorage.connect();\n      return mongoStorage;\n    } catch (error) {\n      console.error(\"Failed to connect to MongoDB:\", error);\n      console.log(\"Falling back to in-memory storage\");\n    }\n  }\n  \n  console.log(\"Using in-memory storage\");\n  return new MongoDBCompatibleStorage();\n}\n\n// Export a promise that resolves to the initialized storage\nexport const storagePromise = initializeStorage();\nexport let storage: IStorage;\n\n// Initialize storage immediately\ninitializeStorage().then(s => {\n  storage = s;\n}).catch(error => {\n  console.error(\"Failed to initialize storage:\", error);\n  storage = new MongoDBCompatibleStorage();\n});","size_bytes":34941},"server/config/database.ts":{"content":"import mongoose from \"mongoose\";\n\nexport const connectDatabase = async (): Promise<void> => {\n  try {\n    // Use MONGODB_URL specifically for MongoDB connection\n    const mongoUrl = process.env.MONGODB_URL;\n    \n    if (!mongoUrl) {\n      throw new Error(\"MONGODB_URL environment variable is not set\");\n    }\n\n    // Connect to MongoDB using Mongoose\n    await mongoose.connect(mongoUrl, mongooseOptions);\n    \n    console.log(\"Connected to MongoDB successfully\");\n  } catch (error) {\n    console.error(\"MongoDB connection error:\", error);\n    process.exit(1);\n  }\n};\n\nexport const disconnectDatabase = async (): Promise<void> => {\n  try {\n    await mongoose.disconnect();\n    console.log(\"Disconnected from MongoDB\");\n  } catch (error) {\n    console.error(\"Error disconnecting from MongoDB:\", error);\n  }\n};\n\n// Mongoose options (can be extended as needed)\nexport const mongooseOptions = {\n  bufferCommands: false,\n  maxPoolSize: 10,\n  serverSelectionTimeoutMS: 5000,\n  socketTimeoutMS: 45000,\n} as const;","size_bytes":1006},"server/config/env.ts":{"content":"export const env = {\n  NODE_ENV: process.env.NODE_ENV || \"development\",\n  PORT: parseInt(process.env.PORT || \"5000\", 10),\n  DATABASE_URL: process.env.DATABASE_URL || \"\",\n  MONGODB_URL: process.env.MONGODB_URL || \"\",\n  JWT_SECRET: process.env.JWT_SECRET || \"your-secret-key-change-in-production\",\n  JWT_EXPIRES_IN: process.env.JWT_EXPIRES_IN || \"24h\",\n} as const;\n\nexport const isDevelopment = env.NODE_ENV === \"development\";\nexport const isProduction = env.NODE_ENV === \"production\";","size_bytes":483},"server/controllers/index.ts":{"content":"// Export all controllers from a single entry point\nexport * from \"./userController\";\nexport * from \"./inventoryController\";\nexport * from \"./salesController\";\nexport * from \"./settingsController\";","size_bytes":197},"server/controllers/inventoryController.ts":{"content":"import { Request, Response, NextFunction } from \"express\";\nimport { Inventory } from \"../models\";\nimport { insertInventorySchema, type InsertInventory } from \"@shared/schema\";\nimport { NotFoundError, ConflictError } from \"../utils/errors\";\nimport { sendSuccess } from \"../utils/response\";\nimport { asyncHandler } from \"../middleware\";\n\nexport const getAllInventory = asyncHandler(async (req: Request, res: Response, next: NextFunction) => {\n  const inventory = await Inventory.find({}).sort({ createdAt: -1 });\n  \n  sendSuccess(res, inventory, \"Inventory retrieved successfully\");\n});\n\nexport const getInventoryById = asyncHandler(async (req: Request, res: Response, next: NextFunction) => {\n  const { id } = req.params;\n  \n  const item = await Inventory.findById(id);\n  if (!item) {\n    throw new NotFoundError(\"Inventory item not found\");\n  }\n  \n  sendSuccess(res, item, \"Inventory item retrieved successfully\");\n});\n\nexport const getInventoryByVin = asyncHandler(async (req: Request, res: Response, next: NextFunction) => {\n  const { vin } = req.params;\n  \n  const item = await Inventory.findOne({ vin: vin.toUpperCase() });\n  if (!item) {\n    throw new NotFoundError(\"Vehicle not found\");\n  }\n  \n  sendSuccess(res, item, \"Vehicle retrieved successfully\");\n});\n\nexport const getInventoryByStockNumber = asyncHandler(async (req: Request, res: Response, next: NextFunction) => {\n  const { stockNumber } = req.params;\n  \n  const item = await Inventory.findOne({ stockNumber });\n  if (!item) {\n    throw new NotFoundError(\"Vehicle not found\");\n  }\n  \n  sendSuccess(res, item, \"Vehicle retrieved successfully\");\n});\n\nexport const createInventoryItem = asyncHandler(async (req: Request, res: Response, next: NextFunction) => {\n  const validatedData: InsertInventory = insertInventorySchema.parse(req.body);\n  \n  // Check for duplicate VIN\n  const existingVin = await Inventory.findOne({ vin: validatedData.vin.toUpperCase() });\n  if (existingVin) {\n    throw new ConflictError(\"A vehicle with this VIN already exists\");\n  }\n  \n  // Check for duplicate Stock Number\n  const existingStock = await Inventory.findOne({ stockNumber: validatedData.stockNumber });\n  if (existingStock) {\n    throw new ConflictError(\"A vehicle with this stock number already exists\");\n  }\n  \n  // Create the inventory item\n  const item = await Inventory.create({\n    ...validatedData,\n    vin: validatedData.vin.toUpperCase(), // Ensure VIN is uppercase\n    createdAt: new Date(),\n  });\n  \n  sendSuccess(res, item, \"Inventory item created successfully\", 201);\n});\n\nexport const updateInventoryItem = asyncHandler(async (req: Request, res: Response, next: NextFunction) => {\n  const { id } = req.params;\n  const validatedData = insertInventorySchema.partial().parse(req.body);\n  \n  // If VIN is being updated, check for duplicates\n  if (validatedData.vin) {\n    const existingVin = await Inventory.findOne({ \n      vin: validatedData.vin.toUpperCase(),\n      _id: { $ne: id }\n    });\n    if (existingVin) {\n      throw new ConflictError(\"A vehicle with this VIN already exists\");\n    }\n    validatedData.vin = validatedData.vin.toUpperCase();\n  }\n  \n  // If stock number is being updated, check for duplicates\n  if (validatedData.stockNumber) {\n    const existingStock = await Inventory.findOne({ \n      stockNumber: validatedData.stockNumber,\n      _id: { $ne: id }\n    });\n    if (existingStock) {\n      throw new ConflictError(\"A vehicle with this stock number already exists\");\n    }\n  }\n  \n  const item = await Inventory.findByIdAndUpdate(\n    id,\n    validatedData,\n    { new: true, runValidators: true }\n  );\n  \n  if (!item) {\n    throw new NotFoundError(\"Inventory item not found\");\n  }\n  \n  sendSuccess(res, item, \"Inventory item updated successfully\");\n});\n\nexport const deleteInventoryItem = asyncHandler(async (req: Request, res: Response, next: NextFunction) => {\n  const { id } = req.params;\n  \n  const item = await Inventory.findByIdAndDelete(id);\n  if (!item) {\n    throw new NotFoundError(\"Inventory item not found\");\n  }\n  \n  sendSuccess(res, null, \"Inventory item deleted successfully\");\n});\n\nexport const searchInventory = asyncHandler(async (req: Request, res: Response, next: NextFunction) => {\n  const { query } = req.params;\n  \n  // Use MongoDB text search if available, otherwise use regex\n  const searchResults = await Inventory.find({\n    $or: [\n      { vin: { $regex: query, $options: \"i\" } },\n      { make: { $regex: query, $options: \"i\" } },\n      { model: { $regex: query, $options: \"i\" } },\n      { stockNumber: { $regex: query, $options: \"i\" } },\n      { color: { $regex: query, $options: \"i\" } },\n      { series: { $regex: query, $options: \"i\" } },\n    ]\n  }).sort({ createdAt: -1 });\n  \n  sendSuccess(res, searchResults, `Found ${searchResults.length} matching vehicles`);\n});","size_bytes":4783},"server/controllers/salesController.ts":{"content":"import { Request, Response, NextFunction } from \"express\";\nimport { Sales, Inventory } from \"../models\";\nimport { insertSalesSchema, type InsertSales } from \"@shared/schema\";\nimport { NotFoundError, ValidationError } from \"../utils/errors\";\nimport { sendSuccess } from \"../utils/response\";\nimport { asyncHandler } from \"../middleware\";\n\nexport const getAllSales = asyncHandler(async (req: Request, res: Response, next: NextFunction) => {\n  const sales = await Sales.find({}).sort({ createdAt: -1 });\n  \n  sendSuccess(res, sales, \"Sales retrieved successfully\");\n});\n\nexport const getSalesById = asyncHandler(async (req: Request, res: Response, next: NextFunction) => {\n  const { id } = req.params;\n  \n  const sale = await Sales.findById(id);\n  if (!sale) {\n    throw new NotFoundError(\"Sales record not found\");\n  }\n  \n  sendSuccess(res, sale, \"Sales record retrieved successfully\");\n});\n\nexport const createSalesItem = asyncHandler(async (req: Request, res: Response, next: NextFunction) => {\n  const validatedData: InsertSales = insertSalesSchema.parse(req.body);\n  \n  // Verify the stock number exists in inventory\n  const inventoryItem = await Inventory.findOne({ stockNumber: validatedData.stockNumber });\n  if (!inventoryItem) {\n    throw new ValidationError(\"Stock number not found in inventory\");\n  }\n  \n  // Create the sales record\n  const sale = await Sales.create({\n    ...validatedData,\n    createdAt: new Date(),\n  });\n  \n  sendSuccess(res, sale, \"Sales record created successfully\", 201);\n});\n\nexport const updateSalesItem = asyncHandler(async (req: Request, res: Response, next: NextFunction) => {\n  const { id } = req.params;\n  const validatedData = insertSalesSchema.partial().parse(req.body);\n  \n  // If stock number is being updated, verify it exists in inventory\n  if (validatedData.stockNumber) {\n    const inventoryItem = await Inventory.findOne({ stockNumber: validatedData.stockNumber });\n    if (!inventoryItem) {\n      throw new ValidationError(\"Stock number not found in inventory\");\n    }\n  }\n  \n  const sale = await Sales.findByIdAndUpdate(\n    id,\n    validatedData,\n    { new: true, runValidators: true }\n  );\n  \n  if (!sale) {\n    throw new NotFoundError(\"Sales record not found\");\n  }\n  \n  sendSuccess(res, sale, \"Sales record updated successfully\");\n});\n\nexport const deleteSalesItem = asyncHandler(async (req: Request, res: Response, next: NextFunction) => {\n  const { id } = req.params;\n  \n  const sale = await Sales.findByIdAndDelete(id);\n  if (!sale) {\n    throw new NotFoundError(\"Sales record not found\");\n  }\n  \n  sendSuccess(res, null, \"Sales record deleted successfully\");\n});\n\nexport const searchSales = asyncHandler(async (req: Request, res: Response, next: NextFunction) => {\n  const { query } = req.params;\n  \n  const searchResults = await Sales.find({\n    $or: [\n      { dealNumber: { $regex: query, $options: \"i\" } },\n      { firstName: { $regex: query, $options: \"i\" } },\n      { lastName: { $regex: query, $options: \"i\" } },\n      { customerNumber: { $regex: query, $options: \"i\" } },\n      { stockNumber: { $regex: query, $options: \"i\" } },\n    ]\n  }).sort({ createdAt: -1 });\n  \n  sendSuccess(res, searchResults, `Found ${searchResults.length} matching sales records`);\n});\n\nexport const getSalesStats = asyncHandler(async (req: Request, res: Response, next: NextFunction) => {\n  const currentMonth = new Date().getMonth();\n  const currentYear = new Date().getFullYear();\n  \n  // Get sales this month\n  const salesThisMonth = await Sales.find({\n    createdAt: {\n      $gte: new Date(currentYear, currentMonth, 1),\n      $lt: new Date(currentYear, currentMonth + 1, 1)\n    }\n  });\n\n  // Calculate total revenue this month\n  const totalRevenue = salesThisMonth.reduce((sum, sale) => {\n    return sum + Number(sale.salesPrice);\n  }, 0);\n\n  // Get inventory stats\n  const totalInventory = await Inventory.countDocuments();\n  \n  // Calculate average age of inventory\n  const inventoryItems = await Inventory.find({}, { age: 1 });\n  const avgAge = inventoryItems.length > 0 \n    ? inventoryItems.reduce((sum, item) => sum + (item.age || 0), 0) / inventoryItems.length \n    : 0;\n\n  sendSuccess(res, {\n    totalInventory,\n    salesThisMonth: salesThisMonth.length,\n    revenue: totalRevenue,\n    avgDaysInLot: Math.round(avgAge),\n  }, \"Statistics retrieved successfully\");\n});","size_bytes":4321},"server/controllers/settingsController.ts":{"content":"import { Request, Response, NextFunction } from \"express\";\nimport { Settings } from \"../models\";\nimport { insertSettingsSchema, type InsertSettings } from \"@shared/schema\";\nimport { NotFoundError } from \"../utils/errors\";\nimport { sendSuccess } from \"../utils/response\";\nimport { asyncHandler } from \"../middleware\";\n\nexport const getSettings = asyncHandler(async (req: Request, res: Response, next: NextFunction) => {\n  let settings = await Settings.findOne({});\n  \n  if (!settings) {\n    // Return default empty settings structure if no settings exist\n    const defaultSettings = {\n      id: \"\",\n      make: [],\n      sources: [],\n      years: [],\n      status: [],\n      model: [],\n      colors: [],\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    \n    sendSuccess(res, defaultSettings, \"Default settings retrieved\");\n    return;\n  }\n  \n  sendSuccess(res, settings, \"Settings retrieved successfully\");\n});\n\nexport const updateSettings = asyncHandler(async (req: Request, res: Response, next: NextFunction) => {\n  const validatedData: InsertSettings = insertSettingsSchema.parse(req.body);\n  \n  // Try to update existing settings or create new ones\n  let settings = await Settings.findOne({});\n  \n  if (settings) {\n    // Update existing settings\n    Object.assign(settings, validatedData);\n    settings.updatedAt = new Date();\n    await settings.save();\n  } else {\n    // Create new settings\n    settings = await Settings.create({\n      ...validatedData,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    });\n  }\n  \n  sendSuccess(res, settings, \"Settings updated successfully\");\n});\n\nexport const resetSettings = asyncHandler(async (req: Request, res: Response, next: NextFunction) => {\n  // Delete all settings\n  await Settings.deleteMany({});\n  \n  // Create default settings\n  const defaultSettings = await Settings.create({\n    make: [\"Ford\", \"Toyota\", \"Honda\", \"Chevrolet\", \"Nissan\", \"BMW\", \"Mercedes-Benz\", \"Audi\", \"Hyundai\", \"Kia\", \"Volkswagen\", \"Subaru\", \"Mazda\", \"Lexus\", \"Acura\", \"Infiniti\", \"Cadillac\", \"Lincoln\", \"Buick\", \"GMC\", \"Ram\", \"Jeep\", \"Dodge\", \"Chrysler\"],\n    sources: [\"Kelley Blue Book\", \"Direct Purchase\", \"Trade-In\", \"Lease Buyout\", \"Auction\", \"Fleet Sale\", \"Wholesale\", \"Consignment\"],\n    years: [2020, 2021, 2022, 2023, 2024, 2025],\n    status: [\"Available\", \"In Stock\", \"Sold\", \"Reserved\", \"In Transit\", \"Received\", \"Pending Inspection\", \"Dealer Trade\", \"Service Required\", \"Demo Vehicle\", \"Wholesale\", \"Auction\", \"On Hold\", \"Recall\"],\n    model: [\n      {\n        name: \"Bronco\",\n        Series: [\"Base\", \"Big Bend\", \"Black Diamond\", \"Outer Banks\", \"Badlands\", \"Wildtrak\", \"Raptor\"]\n      },\n      {\n        name: \"Bronco Sport\",\n        Series: [\"Base\", \"Big Bend\", \"Outer Banks\", \"Badlands\"]\n      },\n      {\n        name: \"F-150\",\n        Series: [\"Regular Cab\", \"SuperCab\", \"SuperCrew\", \"XL\", \"XLT\", \"Lariat\", \"King Ranch\", \"Platinum\", \"Limited\", \"Raptor\", \"Lightning\"]\n      },\n      {\n        name: \"Mustang\",\n        Series: [\"EcoBoost\", \"EcoBoost Premium\", \"GT\", \"GT Premium\", \"Mach 1\", \"Shelby GT350\", \"Shelby GT500\"]\n      },\n      {\n        name: \"Explorer\",\n        Series: [\"Base\", \"XLT\", \"Limited\", \"Platinum\", \"ST\", \"King Ranch\"]\n      },\n      {\n        name: \"Escape\",\n        Series: [\"S\", \"SE\", \"SEL\", \"Titanium\"]\n      },\n      {\n        name: \"Edge\",\n        Series: [\"SE\", \"SEL\", \"Titanium\", \"ST\"]\n      }\n    ],\n    colors: [\n      {code: \"PUM\", name: \"Agate Black\"},\n      {code: \"PDR\", name: \"Avalanche\"},\n      {code: \"PYZ\", name: \"Oxford White\"},\n      {code: \"PAZ\", name: \"Star White\"},\n      {code: \"PA3\", name: \"Space White\"},\n      {code: \"PG1\", name: \"Shadow Black\"},\n      {code: \"PHY\", name: \"Dark Matter\"},\n      {code: \"PM7\", name: \"Carbonized Gray\"},\n      {code: \"PUJ\", name: \"Sterling Gray\"},\n      {code: \"PJS\", name: \"Iconic Silver\"},\n      {code: \"PTN\", name: \"Silver Gray\"},\n      {code: \"PNE\", name: \"Fighter Jet Gray\"},\n      {code: \"PAE\", name: \"Grabber Blue\"},\n      {code: \"PK1\", name: \"Vapor Blue\"},\n      {code: \"PAB\", name: \"Blue Tinted Clearcoat\"},\n      {code: \"PE7\", name: \"Velocity Blue\"},\n      {code: \"PLK\", name: \"Dark Blue\"},\n      {code: \"PL8\", name: \"Cinnabar Red\"},\n      {code: \"PD4\", name: \"Rapid Red Metallic\"},\n      {code: \"PPQ\", name: \"Race Red\"},\n      {code: \"PCN\", name: \"Code Orange\"},\n      {code: \"PSB\", name: \"Cyber Orange\"}\n    ],\n    createdAt: new Date(),\n    updatedAt: new Date(),\n  });\n  \n  sendSuccess(res, defaultSettings, \"Settings reset to defaults successfully\");\n});","size_bytes":4519},"server/controllers/userController.ts":{"content":"import { Request, Response, NextFunction } from \"express\";\nimport { User } from \"../models\";\nimport { \n  registerUserSchema, \n  loginUserSchema,\n  type RegisterUser,\n  type LoginUser,\n  type JWTPayload\n} from \"@shared/schema\";\nimport { \n  generateToken, \n  hashPassword, \n  comparePassword,\n  type AuthenticatedRequest \n} from \"../middleware\";\nimport { \n  NotFoundError, \n  UnauthorizedError, \n  ConflictError, \n  ValidationError \n} from \"../utils/errors\";\nimport { sendSuccess } from \"../utils/response\";\nimport { asyncHandler } from \"../middleware\";\n\nexport const registerUser = asyncHandler(async (req: Request, res: Response, next: NextFunction) => {\n  const validatedData: RegisterUser = registerUserSchema.parse(req.body);\n  \n  // Check if user already exists\n  const existingUser = await User.findOne({ email: validatedData.email });\n  if (existingUser) {\n    throw new ConflictError(\"User with this email already exists\");\n  }\n  \n  // Check if username already exists\n  const existingUsername = await User.findOne({ username: validatedData.username });\n  if (existingUsername) {\n    throw new ConflictError(\"Username already taken\");\n  }\n  \n  // Hash password and create user\n  const hashedPassword = await hashPassword(validatedData.password);\n  const user = await User.create({\n    ...validatedData,\n    password: hashedPassword,\n  });\n  \n  // Generate JWT token\n  const tokenPayload: JWTPayload = {\n    userId: user._id!.toString(),\n    email: user.email,\n    userType: user.userType\n  };\n  const token = generateToken(tokenPayload);\n  \n  sendSuccess(res, {\n    user: user.toJSON(), // This will exclude password due to transform\n    token\n  }, \"User registered successfully\", 201);\n});\n\nexport const loginUser = asyncHandler(async (req: Request, res: Response, next: NextFunction) => {\n  const validatedData: LoginUser = loginUserSchema.parse(req.body);\n  \n  // Find user by email (include password for verification)\n  const user = await User.findOne({ email: validatedData.email });\n  if (!user) {\n    throw new UnauthorizedError(\"Invalid email or password\");\n  }\n  \n  // Verify password\n  const isValidPassword = await comparePassword(validatedData.password, user.password);\n  if (!isValidPassword) {\n    throw new UnauthorizedError(\"Invalid email or password\");\n  }\n  \n  // Generate JWT token\n  const tokenPayload: JWTPayload = {\n    userId: user._id!.toString(),\n    email: user.email,\n    userType: user.userType\n  };\n  const token = generateToken(tokenPayload);\n  \n  sendSuccess(res, {\n    user: user.toJSON(), // This will exclude password due to transform\n    token\n  }, \"Login successful\");\n});\n\nexport const getCurrentUser = asyncHandler(async (req: AuthenticatedRequest, res: Response, next: NextFunction) => {\n  const user = await User.findById(req.user.userId);\n  if (!user) {\n    throw new NotFoundError(\"User not found\");\n  }\n  \n  sendSuccess(res, { user: user.toJSON() }, \"User data retrieved successfully\");\n});\n\nexport const getAllUsers = asyncHandler(async (req: Request, res: Response, next: NextFunction) => {\n  const users = await User.find({}).select(\"-password\"); // Exclude passwords\n  \n  sendSuccess(res, { users }, \"Users retrieved successfully\");\n});\n\nexport const getUserById = asyncHandler(async (req: Request, res: Response, next: NextFunction) => {\n  const { id } = req.params;\n  \n  const user = await User.findById(id).select(\"-password\");\n  if (!user) {\n    throw new NotFoundError(\"User not found\");\n  }\n  \n  sendSuccess(res, { user }, \"User retrieved successfully\");\n});\n\nexport const updateUser = asyncHandler(async (req: Request, res: Response, next: NextFunction) => {\n  const { id } = req.params;\n  const updateData = req.body;\n  \n  // Don't allow password updates through this endpoint\n  if (updateData.password) {\n    delete updateData.password;\n  }\n  \n  const user = await User.findByIdAndUpdate(\n    id, \n    updateData, \n    { new: true, runValidators: true }\n  ).select(\"-password\");\n  \n  if (!user) {\n    throw new NotFoundError(\"User not found\");\n  }\n  \n  sendSuccess(res, { user }, \"User updated successfully\");\n});\n\nexport const deleteUser = asyncHandler(async (req: Request, res: Response, next: NextFunction) => {\n  const { id } = req.params;\n  \n  const user = await User.findByIdAndDelete(id);\n  if (!user) {\n    throw new NotFoundError(\"User not found\");\n  }\n  \n  sendSuccess(res, null, \"User deleted successfully\");\n});","size_bytes":4386},"server/middleware/errorHandler.ts":{"content":"import { Request, Response, NextFunction } from \"express\";\nimport { ZodError } from \"zod\";\nimport { AppError } from \"../utils/errors\";\nimport { sendError, sendValidationError } from \"../utils/response\";\nimport { isDevelopment } from \"../config/env\";\n\nexport const errorHandler = (\n  err: Error,\n  req: Request,\n  res: Response,\n  next: NextFunction\n): Response | void => {\n  // Handle Zod validation errors\n  if (err instanceof ZodError) {\n    return sendValidationError(res, err.errors, \"Validation failed\");\n  }\n\n  // Handle operational errors\n  if (err instanceof AppError) {\n    return sendError(res, err.message, err.statusCode);\n  }\n\n  // Handle MongoDB duplicate key errors\n  if (err.name === \"MongoServerError\" && (err as any).code === 11000) {\n    const field = Object.keys((err as any).keyValue)[0];\n    return sendError(res, `Duplicate value for field: ${field}`, 409);\n  }\n\n  // Handle MongoDB validation errors\n  if (err.name === \"ValidationError\") {\n    const errors = Object.values((err as any).errors).map((e: any) => e.message);\n    return sendValidationError(res, errors, \"Database validation failed\");\n  }\n\n  // Handle JWT errors\n  if (err.name === \"JsonWebTokenError\") {\n    return sendError(res, \"Invalid token\", 401);\n  }\n\n  if (err.name === \"TokenExpiredError\") {\n    return sendError(res, \"Token expired\", 401);\n  }\n\n  // Log unexpected errors in development\n  if (isDevelopment) {\n    console.error(\"Unexpected error:\", err);\n  }\n\n  // Default error response\n  return sendError(res, \"Internal server error\", 500);\n};\n\n// Async error wrapper to catch async errors\nexport const asyncHandler = (fn: Function) => {\n  return (req: Request, res: Response, next: NextFunction) => {\n    Promise.resolve(fn(req, res, next)).catch(next);\n  };\n};","size_bytes":1760},"server/middleware/index.ts":{"content":"// Export all middleware from a single entry point\nexport {\n  authenticateToken,\n  authorizeRoles,\n  requireAdmin,\n  requireManagerOrAdmin,\n  requireAnyRole,\n  generateToken,\n  hashPassword,\n  comparePassword,\n  type AuthenticatedRequest\n} from \"./auth\";\n\nexport {\n  errorHandler,\n  asyncHandler\n} from \"./errorHandler\";\n\nexport {\n  validateBody,\n  validateParams,\n  validateQuery\n} from \"./validation\";","size_bytes":403},"server/middleware/validation.ts":{"content":"import { Request, Response, NextFunction } from \"express\";\nimport { z, ZodSchema } from \"zod\";\nimport { sendValidationError } from \"../utils/response\";\n\nexport const validateBody = (schema: ZodSchema) => {\n  return (req: Request, res: Response, next: NextFunction): void => {\n    try {\n      req.body = schema.parse(req.body);\n      next();\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        sendValidationError(res, error.errors, \"Request validation failed\");\n        return;\n      }\n      next(error);\n    }\n  };\n};\n\nexport const validateParams = (schema: ZodSchema) => {\n  return (req: Request, res: Response, next: NextFunction): void => {\n    try {\n      req.params = schema.parse(req.params);\n      next();\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        sendValidationError(res, error.errors, \"Parameter validation failed\");\n        return;\n      }\n      next(error);\n    }\n  };\n};\n\nexport const validateQuery = (schema: ZodSchema) => {\n  return (req: Request, res: Response, next: NextFunction): void => {\n    try {\n      req.query = schema.parse(req.query);\n      next();\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        sendValidationError(res, error.errors, \"Query validation failed\");\n        return;\n      }\n      next(error);\n    }\n  };\n};","size_bytes":1318},"server/models/Inventory.ts":{"content":"import mongoose, { Schema } from \"mongoose\";\nimport { InventoryDocument } from \"@shared/schema\";\n\n// Define the Mongoose schema for Inventory\nconst inventorySchema = new Schema<InventoryDocument>({\n  stockNumber: {\n    type: String,\n    required: true,\n    trim: true,\n  },\n  vin: {\n    type: String,\n    required: true,\n    length: 17,\n    uppercase: true,\n    trim: true,\n  },\n  year: {\n    type: Number,\n    required: true,\n    min: 1900,\n    max: 2030,\n  },\n  make: {\n    type: String,\n    required: true,\n    trim: true,\n  },\n  model: {\n    type: String,\n    required: true,\n    trim: true,\n  },\n  series: {\n    type: String,\n    trim: true,\n  },\n  color: {\n    type: String,\n    required: true,\n    trim: true,\n  },\n  certified: {\n    type: Boolean,\n    default: false,\n  },\n  body: {\n    type: String,\n    required: true,\n    trim: true,\n  },\n  price: {\n    type: String,\n    required: true,\n  },\n  bookValue: {\n    type: String,\n    default: null,\n  },\n  cost: {\n    type: String,\n    default: null,\n  },\n  markup: {\n    type: String,\n    default: null,\n  },\n  odometer: {\n    type: Number,\n    required: true,\n    min: 0,\n  },\n  age: {\n    type: Number,\n    default: null,\n  },\n  createdAt: {\n    type: Date,\n    default: Date.now,\n  },\n}, {\n  collection: \"inventory\",\n  timestamps: false, // We manage createdAt manually\n});\n\n// Create indexes for better performance\ninventorySchema.index({ vin: 1 });\ninventorySchema.index({ stockNumber: 1 });\ninventorySchema.index({ make: 1, model: 1 });\ninventorySchema.index({ year: 1 });\ninventorySchema.index({ price: 1 });\n\n// Text search index for searching across multiple fields\ninventorySchema.index({\n  vin: \"text\",\n  make: \"text\",\n  model: \"text\",\n  stockNumber: \"text\",\n  color: \"text\",\n});\n\n// Calculate and update markup before saving\ninventorySchema.pre(\"save\", function(next) {\n  if (this.price && this.cost) {\n    const priceNum = Number(this.price);\n    const costNum = Number(this.cost);\n    if (!isNaN(priceNum) && !isNaN(costNum)) {\n      this.markup = String(priceNum - costNum);\n    }\n  }\n  next();\n});\n\n// Transform toJSON to convert _id to id\ninventorySchema.set(\"toJSON\", {\n  transform: function (doc: any, ret: any) {\n    ret.id = ret._id;\n    delete ret._id;\n    delete ret.__v;\n    return ret;\n  }\n});\n\n// Export the model\nexport const Inventory = mongoose.model<InventoryDocument>(\"Inventory\", inventorySchema);\nexport type InventoryModel = typeof Inventory;","size_bytes":2434},"server/models/Sales.ts":{"content":"import mongoose, { Schema } from \"mongoose\";\nimport { SalesDocument } from \"@shared/schema\";\n\n// Define the Mongoose schema for Sales\nconst salesSchema = new Schema<SalesDocument>({\n  dealNumber: {\n    type: String,\n    required: true,\n    trim: true,\n  },\n  customerNumber: {\n    type: String,\n    trim: true,\n    default: null,\n  },\n  firstName: {\n    type: String,\n    required: true,\n    trim: true,\n  },\n  lastName: {\n    type: String,\n    required: true,\n    trim: true,\n  },\n  zip: {\n    type: String,\n    trim: true,\n    default: null,\n  },\n  exteriorColor: {\n    type: String,\n    trim: true,\n    default: null,\n  },\n  newUsed: {\n    type: String,\n    required: true,\n    enum: [\"New\", \"Used\"],\n  },\n  stockNumber: {\n    type: String,\n    required: true,\n    trim: true,\n  },\n  deliveryDate: {\n    type: Date,\n    default: null,\n  },\n  deliveryMileage: {\n    type: Number,\n    min: 0,\n    default: null,\n  },\n  // Trade 1 information\n  trade1Vin: {\n    type: String,\n    length: 17,\n    uppercase: true,\n    trim: true,\n    default: null,\n  },\n  trade1Year: {\n    type: Number,\n    min: 1900,\n    max: 2030,\n    default: null,\n  },\n  trade1Make: {\n    type: String,\n    trim: true,\n    default: null,\n  },\n  trade1Model: {\n    type: String,\n    trim: true,\n    default: null,\n  },\n  trade1Odometer: {\n    type: Number,\n    min: 0,\n    default: null,\n  },\n  trade1ACV: {\n    type: String,\n    default: null,\n  },\n  // Trade 2 information\n  trade2Vin: {\n    type: String,\n    length: 17,\n    uppercase: true,\n    trim: true,\n    default: null,\n  },\n  trade2Year: {\n    type: Number,\n    min: 1900,\n    max: 2030,\n    default: null,\n  },\n  trade2Make: {\n    type: String,\n    trim: true,\n    default: null,\n  },\n  trade2Model: {\n    type: String,\n    trim: true,\n    default: null,\n  },\n  trade2Odometer: {\n    type: Number,\n    min: 0,\n    default: null,\n  },\n  trade2ACV: {\n    type: String,\n    default: null,\n  },\n  // Manager and staff information\n  closingManagerNumber: {\n    type: String,\n    trim: true,\n    default: null,\n  },\n  closingManagerName: {\n    type: String,\n    trim: true,\n    default: null,\n  },\n  financeManagerNumber: {\n    type: String,\n    trim: true,\n    default: null,\n  },\n  financeManagerName: {\n    type: String,\n    trim: true,\n    default: null,\n  },\n  salesmanNumber: {\n    type: String,\n    trim: true,\n    default: null,\n  },\n  salesmanName: {\n    type: String,\n    trim: true,\n    default: null,\n  },\n  // Pricing information\n  msrp: {\n    type: String,\n    default: null,\n  },\n  listPrice: {\n    type: String,\n    default: null,\n  },\n  salesPrice: {\n    type: String,\n    required: true,\n  },\n  createdAt: {\n    type: Date,\n    default: Date.now,\n  },\n}, {\n  collection: \"sales\",\n  timestamps: false, // We manage createdAt manually\n});\n\n// Create indexes for better performance\nsalesSchema.index({ dealNumber: 1 });\nsalesSchema.index({ stockNumber: 1 });\nsalesSchema.index({ firstName: 1, lastName: 1 });\nsalesSchema.index({ customerNumber: 1 });\nsalesSchema.index({ deliveryDate: 1 });\nsalesSchema.index({ createdAt: 1 });\n\n// Text search index for searching across multiple fields\nsalesSchema.index({\n  dealNumber: \"text\",\n  firstName: \"text\",\n  lastName: \"text\",\n  customerNumber: \"text\",\n});\n\n// Transform toJSON to convert _id to id\nsalesSchema.set(\"toJSON\", {\n  transform: function (doc: any, ret: any) {\n    ret.id = ret._id;\n    delete ret._id;\n    delete ret.__v;\n    return ret;\n  }\n});\n\n// Export the model\nexport const Sales = mongoose.model<SalesDocument>(\"Sales\", salesSchema);\nexport type SalesModel = typeof Sales;","size_bytes":3576},"server/models/Settings.ts":{"content":"import mongoose, { Schema } from \"mongoose\";\nimport { SettingsDocument, ModelSeriesType, ColorOptionType } from \"@shared/schema\";\n\n// Sub-schema for model series\nconst modelSeriesSchema = new Schema<ModelSeriesType>({\n  name: {\n    type: String,\n    required: true,\n    trim: true,\n  },\n  Series: [{\n    type: String,\n    required: true,\n    trim: true,\n  }],\n}, { _id: false });\n\n// Sub-schema for color options\nconst colorOptionSchema = new Schema<ColorOptionType>({\n  code: {\n    type: String,\n    required: true,\n    trim: true,\n    uppercase: true,\n  },\n  name: {\n    type: String,\n    required: true,\n    trim: true,\n  },\n}, { _id: false });\n\n// Define the Mongoose schema for Settings\nconst settingsSchema = new Schema<SettingsDocument>({\n  make: [{\n    type: String,\n    required: true,\n    trim: true,\n  }],\n  sources: [{\n    type: String,\n    required: true,\n    trim: true,\n  }],\n  years: [{\n    type: Number,\n    required: true,\n    min: 1900,\n    max: 2100,\n  }],\n  status: [{\n    type: String,\n    required: true,\n    trim: true,\n  }],\n  model: [modelSeriesSchema],\n  colors: [colorOptionSchema],\n  createdAt: {\n    type: Date,\n    default: Date.now,\n  },\n  updatedAt: {\n    type: Date,\n    default: Date.now,\n  },\n}, {\n  collection: \"settings\",\n  timestamps: false, // We manage timestamps manually\n});\n\n// Update the updatedAt field before saving\nsettingsSchema.pre(\"save\", function(next) {\n  this.updatedAt = new Date();\n  next();\n});\n\n// Transform toJSON to convert _id to id\nsettingsSchema.set(\"toJSON\", {\n  transform: function (doc: any, ret: any) {\n    ret.id = ret._id;\n    delete ret._id;\n    delete ret.__v;\n    return ret;\n  }\n});\n\n// Export the model\nexport const Settings = mongoose.model<SettingsDocument>(\"Settings\", settingsSchema);\nexport type SettingsModel = typeof Settings;","size_bytes":1807},"server/models/User.ts":{"content":"import mongoose, { Schema, Document } from \"mongoose\";\nimport { UserDocument, UserType } from \"@shared/schema\";\n\n// Define the Mongoose schema for User\nconst userSchema = new Schema<UserDocument>({\n  username: {\n    type: String,\n    required: true,\n    trim: true,\n    minlength: 3,\n    maxlength: 50,\n  },\n  email: {\n    type: String,\n    required: true,\n    lowercase: true,\n    trim: true,\n  },\n  password: {\n    type: String,\n    required: true,\n    minlength: 6,\n  },\n  userType: {\n    type: String,\n    enum: [\"admin\", \"manager\", \"employee\"] as UserType[],\n    required: true,\n    default: \"employee\",\n  },\n  createdAt: {\n    type: Date,\n    default: Date.now,\n  },\n}, {\n  collection: \"users\",\n  timestamps: false, // We manage createdAt manually\n});\n\n// Create indexes for better performance\nuserSchema.index({ email: 1 });\nuserSchema.index({ username: 1 });\n\n// Transform toJSON to hide password and convert _id to id\nuserSchema.set(\"toJSON\", {\n  transform: function (doc: any, ret: any) {\n    ret.id = ret._id;\n    delete ret._id;\n    delete ret.__v;\n    delete ret.password; // Never include password in JSON responses\n    return ret;\n  }\n});\n\n// Export the model\nexport const User = mongoose.model<UserDocument>(\"User\", userSchema);\nexport type UserModel = typeof User;","size_bytes":1281},"server/models/index.ts":{"content":"// Export all models from a single entry point\nexport { User, type UserModel } from \"./User\";\nexport { Inventory, type InventoryModel } from \"./Inventory\";\nexport { Sales, type SalesModel } from \"./Sales\";\nexport { Settings, type SettingsModel } from \"./Settings\";","size_bytes":264},"server/routes/index.ts":{"content":"import { Router } from \"express\";\nimport userRoutes from \"./userRoutes\";\nimport inventoryRoutes from \"./inventoryRoutes\";\nimport salesRoutes from \"./salesRoutes\";\nimport settingsRoutes from \"./settingsRoutes\";\n\nconst router = Router();\n\n// Mount route modules\nrouter.use(\"/auth\", userRoutes);\nrouter.use(\"/users\", userRoutes); // For admin user management\nrouter.use(\"/inventory\", inventoryRoutes);\nrouter.use(\"/sales\", salesRoutes);\nrouter.use(\"/settings\", settingsRoutes);\n\n// Add a compatibility route for stats that was in the old routes\nrouter.get(\"/stats\", async (req, res, next) => {\n  try {\n    // Import the getSalesStats controller dynamically\n    const { getSalesStats } = await import(\"../controllers\");\n    const { authenticateToken, requireAnyRole } = await import(\"../middleware\");\n    // Apply middleware manually\n    await new Promise<void>((resolve, reject) => {\n      authenticateToken(req, res, (err) => {\n        if (err) reject(err);\n        else resolve();\n      });\n    });\n    await new Promise<void>((resolve, reject) => {\n      requireAnyRole(req, res, (err) => {\n        if (err) reject(err);\n        else resolve();\n      });\n    });\n    return getSalesStats(req, res, next);\n  } catch (error) {\n    next(error);\n  }\n});\n\nexport default router;","size_bytes":1273},"server/routes/inventoryRoutes.ts":{"content":"import { Router } from \"express\";\nimport {\n  getAllInventory,\n  getInventoryById,\n  getInventoryByVin,\n  getInventoryByStockNumber,\n  createInventoryItem,\n  updateInventoryItem,\n  deleteInventoryItem,\n  searchInventory\n} from \"../controllers\";\nimport { \n  authenticateToken, \n  requireAdmin, \n  requireManagerOrAdmin,\n  requireAnyRole,\n  validateBody\n} from \"../middleware\";\nimport { insertInventorySchema } from \"@shared/schema\";\n\nconst router = Router();\n\n// All routes require authentication\nrouter.use(authenticateToken);\n\n// View routes (all roles)\nrouter.get(\"/\", requireAnyRole, getAllInventory);\nrouter.get(\"/search/:query\", requireAnyRole, searchInventory);\nrouter.get(\"/vin/:vin\", requireAnyRole, getInventoryByVin);\nrouter.get(\"/stock/:stockNumber\", requireAnyRole, getInventoryByStockNumber);\nrouter.get(\"/:id\", requireAnyRole, getInventoryById);\n\n// Create/Update routes (managers and admins)\nrouter.post(\"/\", requireManagerOrAdmin, validateBody(insertInventorySchema), createInventoryItem);\nrouter.put(\"/:id\", requireManagerOrAdmin, updateInventoryItem);\n\n// Delete routes (admin only)\nrouter.delete(\"/:id\", requireAdmin, deleteInventoryItem);\n\nexport default router;","size_bytes":1181},"server/routes/salesRoutes.ts":{"content":"import { Router } from \"express\";\nimport {\n  getAllSales,\n  getSalesById,\n  createSalesItem,\n  updateSalesItem,\n  deleteSalesItem,\n  searchSales\n} from \"../controllers\";\nimport { \n  authenticateToken, \n  requireAdmin, \n  requireManagerOrAdmin,\n  requireAnyRole,\n  validateBody\n} from \"../middleware\";\nimport { insertSalesSchema } from \"@shared/schema\";\n\nconst router = Router();\n\n// All routes require authentication\nrouter.use(authenticateToken);\n\n// View routes (all roles)\nrouter.get(\"/\", requireAnyRole, getAllSales);\nrouter.get(\"/search/:query\", requireAnyRole, searchSales);\nrouter.get(\"/:id\", requireAnyRole, getSalesById);\n\n// Create/Update routes (managers and admins)\nrouter.post(\"/\", requireManagerOrAdmin, validateBody(insertSalesSchema), createSalesItem);\nrouter.put(\"/:id\", requireManagerOrAdmin, updateSalesItem);\n\n// Delete routes (admin only)\nrouter.delete(\"/:id\", requireAdmin, deleteSalesItem);\n\nexport default router;","size_bytes":937},"server/routes/settingsRoutes.ts":{"content":"import { Router } from \"express\";\nimport {\n  getSettings,\n  updateSettings,\n  resetSettings\n} from \"../controllers\";\nimport { \n  authenticateToken, \n  requireAdmin,\n  requireAnyRole,\n  validateBody\n} from \"../middleware\";\nimport { insertSettingsSchema } from \"@shared/schema\";\n\nconst router = Router();\n\n// All routes require authentication\nrouter.use(authenticateToken);\n\n// View routes (all roles can view settings)\nrouter.get(\"/\", requireAnyRole, getSettings);\n\n// Update routes (admin only)\nrouter.put(\"/\", requireAdmin, validateBody(insertSettingsSchema), updateSettings);\nrouter.post(\"/reset\", requireAdmin, resetSettings);\n\nexport default router;","size_bytes":653},"server/routes/userRoutes.ts":{"content":"import { Router } from \"express\";\nimport {\n  registerUser,\n  loginUser,\n  getCurrentUser,\n  getAllUsers,\n  getUserById,\n  updateUser,\n  deleteUser\n} from \"../controllers\";\nimport { \n  authenticateToken, \n  requireAdmin, \n  requireManagerOrAdmin,\n  validateBody\n} from \"../middleware\";\nimport { registerUserSchema, loginUserSchema } from \"@shared/schema\";\n\nconst router = Router();\n\n// Public routes\nrouter.post(\"/register\", validateBody(registerUserSchema), registerUser);\nrouter.post(\"/login\", validateBody(loginUserSchema), loginUser);\n\n// Protected routes\nrouter.get(\"/me\", authenticateToken, getCurrentUser);\n\n// Admin/Manager routes\nrouter.get(\"/\", authenticateToken, requireManagerOrAdmin, getAllUsers);\nrouter.get(\"/:id\", authenticateToken, requireManagerOrAdmin, getUserById);\nrouter.put(\"/:id\", authenticateToken, requireManagerOrAdmin, updateUser);\nrouter.delete(\"/:id\", authenticateToken, requireAdmin, deleteUser);\n\nexport default router;","size_bytes":950},"server/services/index.ts":{"content":"// Export all services from a single entry point\nexport { SeedService } from \"./seedService\";","size_bytes":93},"server/services/seedService.ts":{"content":"import { User, Inventory, Sales, Settings } from \"../models\";\nimport { hashPassword } from \"../middleware\";\n\nexport class SeedService {\n  static async seedUsers(): Promise<void> {\n    try {\n      // Check if users already exist\n      const existingUsersCount = await User.countDocuments();\n      if (existingUsersCount > 0) {\n        console.log(\"Users already exist, skipping user seeding\");\n        return;\n      }\n\n      console.log(\"Seeding default users...\");\n\n      const defaultUsers = [\n        {\n          username: \"admin\",\n          email: \"admin@dealerpro.com\",\n          password: await hashPassword(\"admin123\"),\n          userType: \"admin\" as const,\n        },\n        {\n          username: \"manager1\",\n          email: \"manager@dealerpro.com\",\n          password: await hashPassword(\"manager123\"),\n          userType: \"manager\" as const,\n        },\n        {\n          username: \"employee1\",\n          email: \"employee@dealerpro.com\",\n          password: await hashPassword(\"employee123\"),\n          userType: \"employee\" as const,\n        }\n      ];\n\n      await User.insertMany(defaultUsers);\n      console.log(\"Default users seeded successfully\");\n    } catch (error) {\n      console.error(\"Error seeding users:\", error);\n    }\n  }\n\n  static async seedSettings(): Promise<void> {\n    try {\n      // Check if settings already exist\n      const existingSettings = await Settings.findOne();\n      if (existingSettings) {\n        console.log(\"Settings already exist, skipping settings seeding\");\n        return;\n      }\n\n      console.log(\"Seeding default settings...\");\n\n      const defaultSettings = {\n        make: [\"Ford\", \"Toyota\", \"Honda\", \"Chevrolet\", \"Nissan\", \"BMW\", \"Mercedes-Benz\", \"Audi\", \"Hyundai\", \"Kia\", \"Volkswagen\", \"Subaru\", \"Mazda\", \"Lexus\", \"Acura\", \"Infiniti\", \"Cadillac\", \"Lincoln\", \"Buick\", \"GMC\", \"Ram\", \"Jeep\", \"Dodge\", \"Chrysler\"],\n        sources: [\"Kelley Blue Book\", \"Direct Purchase\", \"Trade-In\", \"Lease Buyout\", \"Auction\", \"Fleet Sale\", \"Wholesale\", \"Consignment\"],\n        years: [2020, 2021, 2022, 2023, 2024, 2025],\n        status: [\"Available\", \"In Stock\", \"Sold\", \"Reserved\", \"In Transit\", \"Received\", \"Pending Inspection\", \"Dealer Trade\", \"Service Required\", \"Demo Vehicle\", \"Wholesale\", \"Auction\", \"On Hold\", \"Recall\"],\n        model: [\n          {\n            name: \"Bronco\",\n            Series: [\"Base\", \"Big Bend\", \"Black Diamond\", \"Outer Banks\", \"Badlands\", \"Wildtrak\", \"Raptor\"]\n          },\n          {\n            name: \"Bronco Sport\",\n            Series: [\"Base\", \"Big Bend\", \"Outer Banks\", \"Badlands\"]\n          },\n          {\n            name: \"F-150\",\n            Series: [\"Regular Cab\", \"SuperCab\", \"SuperCrew\", \"XL\", \"XLT\", \"Lariat\", \"King Ranch\", \"Platinum\", \"Limited\", \"Raptor\", \"Lightning\"]\n          },\n          {\n            name: \"Mustang\",\n            Series: [\"EcoBoost\", \"EcoBoost Premium\", \"GT\", \"GT Premium\", \"Mach 1\", \"Shelby GT350\", \"Shelby GT500\"]\n          },\n          {\n            name: \"Explorer\",\n            Series: [\"Base\", \"XLT\", \"Limited\", \"Platinum\", \"ST\", \"King Ranch\"]\n          },\n          {\n            name: \"Escape\",\n            Series: [\"S\", \"SE\", \"SEL\", \"Titanium\"]\n          },\n          {\n            name: \"Edge\",\n            Series: [\"SE\", \"SEL\", \"Titanium\", \"ST\"]\n          }\n        ],\n        colors: [\n          {code: \"PUM\", name: \"Agate Black\"},\n          {code: \"PDR\", name: \"Avalanche\"},\n          {code: \"PYZ\", name: \"Oxford White\"},\n          {code: \"PAZ\", name: \"Star White\"},\n          {code: \"PA3\", name: \"Space White\"},\n          {code: \"PG1\", name: \"Shadow Black\"},\n          {code: \"PHY\", name: \"Dark Matter\"},\n          {code: \"PM7\", name: \"Carbonized Gray\"},\n          {code: \"PUJ\", name: \"Sterling Gray\"},\n          {code: \"PJS\", name: \"Iconic Silver\"},\n          {code: \"PTN\", name: \"Silver Gray\"},\n          {code: \"PNE\", name: \"Fighter Jet Gray\"},\n          {code: \"PAE\", name: \"Grabber Blue\"},\n          {code: \"PK1\", name: \"Vapor Blue\"},\n          {code: \"PAB\", name: \"Blue Tinted Clearcoat\"},\n          {code: \"PE7\", name: \"Velocity Blue\"},\n          {code: \"PLK\", name: \"Dark Blue\"},\n          {code: \"PL8\", name: \"Cinnabar Red\"},\n          {code: \"PD4\", name: \"Rapid Red Metallic\"},\n          {code: \"PPQ\", name: \"Race Red\"},\n          {code: \"PCN\", name: \"Code Orange\"},\n          {code: \"PSB\", name: \"Cyber Orange\"}\n        ],\n      };\n\n      await Settings.create(defaultSettings);\n      console.log(\"Default settings seeded successfully\");\n    } catch (error) {\n      console.error(\"Error seeding settings:\", error);\n    }\n  }\n\n  static async seedSampleData(): Promise<void> {\n    try {\n      // Check if sample data already exists\n      const existingInventory = await Inventory.countDocuments();\n      if (existingInventory > 0) {\n        console.log(\"Sample inventory already exists, skipping sample data seeding\");\n        return;\n      }\n\n      console.log(\"Seeding sample inventory and sales data...\");\n\n      // Add sample inventory\n      const sampleInventory = [\n        {\n          stockNumber: \"A2024001\",\n          vin: \"1HGBH41JXMN109186\",\n          year: 2023,\n          make: \"Honda\",\n          model: \"Accord\",\n          series: \"LX\",\n          color: \"Silver Metallic\",\n          certified: true,\n          body: \"Sedan\",\n          price: \"28450\",\n          bookValue: \"26500\",\n          cost: \"24000\",\n          markup: \"4450\",\n          odometer: 15420,\n          age: 45,\n        },\n        {\n          stockNumber: \"B2024002\",\n          vin: \"3GNKBKRS5NS123456\",\n          year: 2022,\n          make: \"Chevrolet\",\n          model: \"Equinox\",\n          series: \"LS\",\n          color: \"Pearl White\",\n          certified: false,\n          body: \"SUV\",\n          price: \"32995\",\n          bookValue: \"30200\",\n          cost: \"28500\",\n          markup: \"4495\",\n          odometer: 28750,\n          age: 32,\n        }\n      ];\n\n      await Inventory.insertMany(sampleInventory);\n\n      // Add sample sales\n      const sampleSales = [\n        {\n          dealNumber: \"D2024-001\",\n          customerNumber: \"C001\",\n          firstName: \"John\",\n          lastName: \"Smith\",\n          zip: \"12345\",\n          exteriorColor: \"Silver Metallic\",\n          newUsed: \"Used\",\n          stockNumber: \"A2024001\",\n          deliveryDate: new Date(Date.now() - 15 * 24 * 60 * 60 * 1000),\n          deliveryMileage: 15420,\n          trade1Vin: \"2HGFC2F59MH987654\",\n          trade1Year: 2021,\n          trade1Make: \"Honda\",\n          trade1Model: \"Civic\",\n          trade1Odometer: 45000,\n          trade1ACV: \"18500\",\n          closingManagerNumber: \"M001\",\n          closingManagerName: \"Sarah Johnson\",\n          financeManagerNumber: \"F001\",\n          financeManagerName: \"Mike Davis\",\n          salesmanNumber: \"S001\",\n          salesmanName: \"Robert Wilson\",\n          msrp: \"29500\",\n          listPrice: \"28450\",\n          salesPrice: \"27200\",\n        }\n      ];\n\n      await Sales.insertMany(sampleSales);\n      console.log(\"Sample data seeded successfully\");\n    } catch (error) {\n      console.error(\"Error seeding sample data:\", error);\n    }\n  }\n\n  static async seedAll(): Promise<void> {\n    await this.seedUsers();\n    await this.seedSettings();\n    await this.seedSampleData();\n  }\n}","size_bytes":7232},"server/utils/errors.ts":{"content":"export class AppError extends Error {\n  public statusCode: number;\n  public isOperational: boolean;\n\n  constructor(message: string, statusCode: number = 500) {\n    super(message);\n    this.statusCode = statusCode;\n    this.isOperational = true;\n\n    Error.captureStackTrace(this, this.constructor);\n  }\n}\n\nexport class ValidationError extends AppError {\n  constructor(message: string) {\n    super(message, 400);\n  }\n}\n\nexport class NotFoundError extends AppError {\n  constructor(message: string = \"Resource not found\") {\n    super(message, 404);\n  }\n}\n\nexport class UnauthorizedError extends AppError {\n  constructor(message: string = \"Unauthorized access\") {\n    super(message, 401);\n  }\n}\n\nexport class ForbiddenError extends AppError {\n  constructor(message: string = \"Access forbidden\") {\n    super(message, 403);\n  }\n}\n\nexport class ConflictError extends AppError {\n  constructor(message: string = \"Resource conflict\") {\n    super(message, 409);\n  }\n}","size_bytes":956},"server/utils/response.ts":{"content":"import { Response } from \"express\";\n\nexport interface ApiResponse<T = any> {\n  success: boolean;\n  message?: string;\n  data?: T;\n  errors?: any[];\n}\n\nexport const sendSuccess = <T>(\n  res: Response,\n  data: T,\n  message: string = \"Success\",\n  statusCode: number = 200\n): Response => {\n  const response: ApiResponse<T> = {\n    success: true,\n    message,\n    data,\n  };\n  return res.status(statusCode).json(response);\n};\n\nexport const sendError = (\n  res: Response,\n  message: string = \"Internal Server Error\",\n  statusCode: number = 500,\n  errors?: any[]\n): Response => {\n  const response: ApiResponse = {\n    success: false,\n    message,\n    errors,\n  };\n  return res.status(statusCode).json(response);\n};\n\nexport const sendValidationError = (\n  res: Response,\n  errors: any[],\n  message: string = \"Validation failed\"\n): Response => {\n  return sendError(res, message, 400, errors);\n};","size_bytes":885}},"version":1}